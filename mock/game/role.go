// Code generated by MockGen. DO NOT EDIT.
// Source: app/game/contract/role.go

// Package game is a generated GoMock package.
package game

import (
	reflect "reflect"
	types "uwwolf/app/types"

	gomock "github.com/golang/mock/gomock"
)

// MockRole is a mock of Role interface.
type MockRole struct {
	ctrl     *gomock.Controller
	recorder *MockRoleMockRecorder
}

// MockRoleMockRecorder is the mock recorder for MockRole.
type MockRoleMockRecorder struct {
	mock *MockRole
}

// NewMockRole creates a new mock instance.
func NewMockRole(ctrl *gomock.Controller) *MockRole {
	mock := &MockRole{ctrl: ctrl}
	mock.recorder = &MockRoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRole) EXPECT() *MockRoleMockRecorder {
	return m.recorder
}

// ActivateSkill mocks base method.
func (m *MockRole) ActivateSkill(req *types.ActionRequest) *types.ActionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateSkill", req)
	ret0, _ := ret[0].(*types.ActionResponse)
	return ret0
}

// ActivateSkill indicates an expected call of ActivateSkill.
func (mr *MockRoleMockRecorder) ActivateSkill(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateSkill", reflect.TypeOf((*MockRole)(nil).ActivateSkill), req)
}

// AfterBeingVoted mocks base method.
func (m *MockRole) AfterBeingVoted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterBeingVoted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AfterBeingVoted indicates an expected call of AfterBeingVoted.
func (mr *MockRoleMockRecorder) AfterBeingVoted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterBeingVoted", reflect.TypeOf((*MockRole)(nil).AfterBeingVoted))
}

// AfterDeath mocks base method.
func (m *MockRole) AfterDeath() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterDeath")
}

// AfterDeath indicates an expected call of AfterDeath.
func (mr *MockRoleMockRecorder) AfterDeath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterDeath", reflect.TypeOf((*MockRole)(nil).AfterDeath))
}

// FactionId mocks base method.
func (m *MockRole) FactionId() types.FactionId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FactionId")
	ret0, _ := ret[0].(types.FactionId)
	return ret0
}

// FactionId indicates an expected call of FactionId.
func (mr *MockRoleMockRecorder) FactionId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FactionId", reflect.TypeOf((*MockRole)(nil).FactionId))
}

// Id mocks base method.
func (m *MockRole) Id() types.RoleId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(types.RoleId)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockRoleMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockRole)(nil).Id))
}
