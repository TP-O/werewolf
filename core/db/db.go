// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.assignGameRolesStmt, err = db.PrepareContext(ctx, assignGameRoles); err != nil {
		return nil, fmt.Errorf("error preparing query AssignGameRoles: %w", err)
	}
	if q.createGameStmt, err = db.PrepareContext(ctx, createGame); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGame: %w", err)
	}
	if q.createGameLogsStmt, err = db.PrepareContext(ctx, createGameLogs); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGameLogs: %w", err)
	}
	if q.finishGameStmt, err = db.PrepareContext(ctx, finishGame); err != nil {
		return nil, fmt.Errorf("error preparing query FinishGame: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.assignGameRolesStmt != nil {
		if cerr := q.assignGameRolesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing assignGameRolesStmt: %w", cerr)
		}
	}
	if q.createGameStmt != nil {
		if cerr := q.createGameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGameStmt: %w", cerr)
		}
	}
	if q.createGameLogsStmt != nil {
		if cerr := q.createGameLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGameLogsStmt: %w", cerr)
		}
	}
	if q.finishGameStmt != nil {
		if cerr := q.finishGameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing finishGameStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                  DBTX
	tx                  *sql.Tx
	assignGameRolesStmt *sql.Stmt
	createGameStmt      *sql.Stmt
	createGameLogsStmt  *sql.Stmt
	finishGameStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		assignGameRolesStmt: q.assignGameRolesStmt,
		createGameStmt:      q.createGameStmt,
		createGameLogsStmt:  q.createGameLogsStmt,
		finishGameStmt:      q.finishGameStmt,
	}
}
