// Code generated by MockGen. DO NOT EDIT.
// Source: game/contract/role.go

// Package gamemock is a generated GoMock package.
package gamemock

import (
	reflect "reflect"
	enum "uwwolf/game/enum"
	types "uwwolf/game/types"

	gomock "github.com/golang/mock/gomock"
)

// MockRole is a mock of Role interface.
type MockRole struct {
	ctrl     *gomock.Controller
	recorder *MockRoleMockRecorder
}

// MockRoleMockRecorder is the mock recorder for MockRole.
type MockRoleMockRecorder struct {
	mock *MockRole
}

// NewMockRole creates a new mock instance.
func NewMockRole(ctrl *gomock.Controller) *MockRole {
	mock := &MockRole{ctrl: ctrl}
	mock.recorder = &MockRoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRole) EXPECT() *MockRoleMockRecorder {
	return m.recorder
}

// ActiveLimit mocks base method.
func (m *MockRole) ActiveLimit(actionID enum.ActionID) enum.Limit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveLimit", actionID)
	ret0, _ := ret[0].(enum.Limit)
	return ret0
}

// ActiveLimit indicates an expected call of ActiveLimit.
func (mr *MockRoleMockRecorder) ActiveLimit(actionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveLimit", reflect.TypeOf((*MockRole)(nil).ActiveLimit), actionID)
}

// AfterDeath mocks base method.
func (m *MockRole) AfterDeath() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterDeath")
}

// AfterDeath indicates an expected call of AfterDeath.
func (mr *MockRoleMockRecorder) AfterDeath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterDeath", reflect.TypeOf((*MockRole)(nil).AfterDeath))
}

// BeforeDeath mocks base method.
func (m *MockRole) BeforeDeath() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeDeath")
	ret0, _ := ret[0].(bool)
	return ret0
}

// BeforeDeath indicates an expected call of BeforeDeath.
func (mr *MockRoleMockRecorder) BeforeDeath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeDeath", reflect.TypeOf((*MockRole)(nil).BeforeDeath))
}

// BeginRound mocks base method.
func (m *MockRole) BeginRound() enum.Round {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginRound")
	ret0, _ := ret[0].(enum.Round)
	return ret0
}

// BeginRound indicates an expected call of BeginRound.
func (mr *MockRoleMockRecorder) BeginRound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginRound", reflect.TypeOf((*MockRole)(nil).BeginRound))
}

// FactionID mocks base method.
func (m *MockRole) FactionID() enum.FactionID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FactionID")
	ret0, _ := ret[0].(enum.FactionID)
	return ret0
}

// FactionID indicates an expected call of FactionID.
func (mr *MockRoleMockRecorder) FactionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FactionID", reflect.TypeOf((*MockRole)(nil).FactionID))
}

// ID mocks base method.
func (m *MockRole) ID() enum.RoleID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(enum.RoleID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockRoleMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRole)(nil).ID))
}

// PhaseID mocks base method.
func (m *MockRole) PhaseID() enum.PhaseID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhaseID")
	ret0, _ := ret[0].(enum.PhaseID)
	return ret0
}

// PhaseID indicates an expected call of PhaseID.
func (mr *MockRoleMockRecorder) PhaseID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhaseID", reflect.TypeOf((*MockRole)(nil).PhaseID))
}

// Priority mocks base method.
func (m *MockRole) Priority() enum.Priority {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Priority")
	ret0, _ := ret[0].(enum.Priority)
	return ret0
}

// Priority indicates an expected call of Priority.
func (mr *MockRoleMockRecorder) Priority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Priority", reflect.TypeOf((*MockRole)(nil).Priority))
}

// UseAbility mocks base method.
func (m *MockRole) UseAbility(req *types.UseRoleRequest) *types.ActionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseAbility", req)
	ret0, _ := ret[0].(*types.ActionResponse)
	return ret0
}

// UseAbility indicates an expected call of UseAbility.
func (mr *MockRoleMockRecorder) UseAbility(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseAbility", reflect.TypeOf((*MockRole)(nil).UseAbility), req)
}
