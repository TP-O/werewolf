// Code generated by MockGen. DO NOT EDIT.
// Source: game/contract/role.go

// Package mock_game is a generated GoMock package.
package mock_game

import (
	reflect "reflect"
	types "uwwolf/game/types"

	gomock "github.com/golang/mock/gomock"
)

// MockRole is a mock of Role interface.
type MockRole struct {
	ctrl     *gomock.Controller
	recorder *MockRoleMockRecorder
}

// MockRoleMockRecorder is the mock recorder for MockRole.
type MockRoleMockRecorder struct {
	mock *MockRole
}

// NewMockRole creates a new mock instance.
func NewMockRole(ctrl *gomock.Controller) *MockRole {
	mock := &MockRole{ctrl: ctrl}
	mock.recorder = &MockRoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRole) EXPECT() *MockRoleMockRecorder {
	return m.recorder
}

// ActivateAbility mocks base method.
func (m *MockRole) ActivateAbility(req *types.ActivateAbilityRequest) *types.ActionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateAbility", req)
	ret0, _ := ret[0].(*types.ActionResponse)
	return ret0
}

// ActivateAbility indicates an expected call of ActivateAbility.
func (mr *MockRoleMockRecorder) ActivateAbility(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateAbility", reflect.TypeOf((*MockRole)(nil).ActivateAbility), req)
}

// ActiveTimes mocks base method.
func (m *MockRole) ActiveTimes(index int) types.Times {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveTimes", index)
	ret0, _ := ret[0].(types.Times)
	return ret0
}

// ActiveTimes indicates an expected call of ActiveTimes.
func (mr *MockRoleMockRecorder) ActiveTimes(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveTimes", reflect.TypeOf((*MockRole)(nil).ActiveTimes), index)
}

// FactionID mocks base method.
func (m *MockRole) FactionID() types.FactionID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FactionID")
	ret0, _ := ret[0].(types.FactionID)
	return ret0
}

// FactionID indicates an expected call of FactionID.
func (mr *MockRoleMockRecorder) FactionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FactionID", reflect.TypeOf((*MockRole)(nil).FactionID))
}

// ID mocks base method.
func (m *MockRole) ID() types.RoleID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(types.RoleID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockRoleMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRole)(nil).ID))
}

// OnAfterDeath mocks base method.
func (m *MockRole) OnAfterDeath() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAfterDeath")
}

// OnAfterDeath indicates an expected call of OnAfterDeath.
func (mr *MockRoleMockRecorder) OnAfterDeath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAfterDeath", reflect.TypeOf((*MockRole)(nil).OnAfterDeath))
}

// OnAssign mocks base method.
func (m *MockRole) OnAssign() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAssign")
}

// OnAssign indicates an expected call of OnAssign.
func (mr *MockRoleMockRecorder) OnAssign() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAssign", reflect.TypeOf((*MockRole)(nil).OnAssign))
}

// OnBeforeDeath mocks base method.
func (m *MockRole) OnBeforeDeath() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnBeforeDeath")
	ret0, _ := ret[0].(bool)
	return ret0
}

// OnBeforeDeath indicates an expected call of OnBeforeDeath.
func (mr *MockRoleMockRecorder) OnBeforeDeath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnBeforeDeath", reflect.TypeOf((*MockRole)(nil).OnBeforeDeath))
}

// OnRevoke mocks base method.
func (m *MockRole) OnRevoke() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnRevoke")
}

// OnRevoke indicates an expected call of OnRevoke.
func (mr *MockRoleMockRecorder) OnRevoke() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRevoke", reflect.TypeOf((*MockRole)(nil).OnRevoke))
}
