// Code generated by MockGen. DO NOT EDIT.
// Source: game/contract/role.go

// Package gamemock is a generated GoMock package.
package gamemock

import (
	reflect "reflect"
	types "uwwolf/game/types"

	gomock "github.com/golang/mock/gomock"
)

// MockRole is a mock of Role interface.
type MockRole struct {
	ctrl     *gomock.Controller
	recorder *MockRoleMockRecorder
}

// MockRoleMockRecorder is the mock recorder for MockRole.
type MockRoleMockRecorder struct {
	mock *MockRole
}

// NewMockRole creates a new mock instance.
func NewMockRole(ctrl *gomock.Controller) *MockRole {
	mock := &MockRole{ctrl: ctrl}
	mock.recorder = &MockRoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRole) EXPECT() *MockRoleMockRecorder {
	return m.recorder
}

// ActivateAbility mocks base method.
func (m *MockRole) ActivateAbility(req *types.ActivateAbilityRequest) *types.ActionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateAbility", req)
	ret0, _ := ret[0].(*types.ActionResponse)
	return ret0
}

// ActivateAbility indicates an expected call of ActivateAbility.
func (mr *MockRoleMockRecorder) ActivateAbility(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateAbility", reflect.TypeOf((*MockRole)(nil).ActivateAbility), req)
}

// ActiveTimes mocks base method.
func (m *MockRole) ActiveTimes(index int) types.Times {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveTimes", index)
	ret0, _ := ret[0].(types.Times)
	return ret0
}

// ActiveTimes indicates an expected call of ActiveTimes.
func (mr *MockRoleMockRecorder) ActiveTimes(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveTimes", reflect.TypeOf((*MockRole)(nil).ActiveTimes), index)
}

// AfterDeath mocks base method.
func (m *MockRole) AfterDeath() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterDeath")
}

// AfterDeath indicates an expected call of AfterDeath.
func (mr *MockRoleMockRecorder) AfterDeath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterDeath", reflect.TypeOf((*MockRole)(nil).AfterDeath))
}

// BeforeDeath mocks base method.
func (m *MockRole) BeforeDeath() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeDeath")
	ret0, _ := ret[0].(bool)
	return ret0
}

// BeforeDeath indicates an expected call of BeforeDeath.
func (mr *MockRoleMockRecorder) BeforeDeath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeDeath", reflect.TypeOf((*MockRole)(nil).BeforeDeath))
}

// FactionID mocks base method.
func (m *MockRole) FactionID() types.FactionID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FactionID")
	ret0, _ := ret[0].(types.FactionID)
	return ret0
}

// FactionID indicates an expected call of FactionID.
func (mr *MockRoleMockRecorder) FactionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FactionID", reflect.TypeOf((*MockRole)(nil).FactionID))
}

// ID mocks base method.
func (m *MockRole) ID() types.RoleID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(types.RoleID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockRoleMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRole)(nil).ID))
}

// RegisterSlot mocks base method.
func (m *MockRole) RegisterSlot() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterSlot")
}

// RegisterSlot indicates an expected call of RegisterSlot.
func (mr *MockRoleMockRecorder) RegisterSlot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSlot", reflect.TypeOf((*MockRole)(nil).RegisterSlot))
}

// UnregisterSlot mocks base method.
func (m *MockRole) UnregisterSlot() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnregisterSlot")
}

// UnregisterSlot indicates an expected call of UnregisterSlot.
func (mr *MockRoleMockRecorder) UnregisterSlot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterSlot", reflect.TypeOf((*MockRole)(nil).UnregisterSlot))
}
