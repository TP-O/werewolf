// Code generated by MockGen. DO NOT EDIT.
// Source: game/contract/scheduler.go

// Package gamemock is a generated GoMock package.
package gamemock

import (
	reflect "reflect"
	enum "uwwolf/game/enum"
	types "uwwolf/game/types"

	gomock "github.com/golang/mock/gomock"
)

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// AddTurn mocks base method.
func (m *MockScheduler) AddTurn(setting *types.TurnSetting) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTurn", setting)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddTurn indicates an expected call of AddTurn.
func (mr *MockSchedulerMockRecorder) AddTurn(setting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTurn", reflect.TypeOf((*MockScheduler)(nil).AddTurn), setting)
}

// FreezeTurn mocks base method.
func (m *MockScheduler) FreezeTurn(roleID enum.RoleID, limit enum.Limit) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreezeTurn", roleID, limit)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FreezeTurn indicates an expected call of FreezeTurn.
func (mr *MockSchedulerMockRecorder) FreezeTurn(roleID, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreezeTurn", reflect.TypeOf((*MockScheduler)(nil).FreezeTurn), roleID, limit)
}

// IsEmpty mocks base method.
func (m *MockScheduler) IsEmpty(phaseID enum.PhaseID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty", phaseID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockSchedulerMockRecorder) IsEmpty(phaseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockScheduler)(nil).IsEmpty), phaseID)
}

// NextTurn mocks base method.
func (m *MockScheduler) NextTurn(isRemoved bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextTurn", isRemoved)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NextTurn indicates an expected call of NextTurn.
func (mr *MockSchedulerMockRecorder) NextTurn(isRemoved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextTurn", reflect.TypeOf((*MockScheduler)(nil).NextTurn), isRemoved)
}

// Phase mocks base method.
func (m *MockScheduler) Phase() []*types.Turn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Phase")
	ret0, _ := ret[0].([]*types.Turn)
	return ret0
}

// Phase indicates an expected call of Phase.
func (mr *MockSchedulerMockRecorder) Phase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Phase", reflect.TypeOf((*MockScheduler)(nil).Phase))
}

// PhaseID mocks base method.
func (m *MockScheduler) PhaseID() enum.PhaseID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhaseID")
	ret0, _ := ret[0].(enum.PhaseID)
	return ret0
}

// PhaseID indicates an expected call of PhaseID.
func (mr *MockSchedulerMockRecorder) PhaseID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhaseID", reflect.TypeOf((*MockScheduler)(nil).PhaseID))
}

// RemoveTurn mocks base method.
func (m *MockScheduler) RemoveTurn(roleID enum.RoleID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTurn", roleID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RemoveTurn indicates an expected call of RemoveTurn.
func (mr *MockSchedulerMockRecorder) RemoveTurn(roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTurn", reflect.TypeOf((*MockScheduler)(nil).RemoveTurn), roleID)
}

// Round mocks base method.
func (m *MockScheduler) Round() enum.Round {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Round")
	ret0, _ := ret[0].(enum.Round)
	return ret0
}

// Round indicates an expected call of Round.
func (mr *MockSchedulerMockRecorder) Round() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Round", reflect.TypeOf((*MockScheduler)(nil).Round))
}

// Turn mocks base method.
func (m *MockScheduler) Turn() *types.Turn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Turn")
	ret0, _ := ret[0].(*types.Turn)
	return ret0
}

// Turn indicates an expected call of Turn.
func (mr *MockSchedulerMockRecorder) Turn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Turn", reflect.TypeOf((*MockScheduler)(nil).Turn))
}
