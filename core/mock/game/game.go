// Code generated by MockGen. DO NOT EDIT.
// Source: game/contract/game.go

// Package gamemock is a generated GoMock package.
package gamemock

import (
	reflect "reflect"
	contract "uwwolf/game/contract"
	enum "uwwolf/game/enum"
	types "uwwolf/game/types"

	gomock "github.com/golang/mock/gomock"
)

// MockGame is a mock of Game interface.
type MockGame struct {
	ctrl     *gomock.Controller
	recorder *MockGameMockRecorder
}

// MockGameMockRecorder is the mock recorder for MockGame.
type MockGameMockRecorder struct {
	mock *MockGame
}

// NewMockGame creates a new mock instance.
func NewMockGame(ctrl *gomock.Controller) *MockGame {
	mock := &MockGame{ctrl: ctrl}
	mock.recorder = &MockGameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGame) EXPECT() *MockGameMockRecorder {
	return m.recorder
}

// AlivePlayerIDs mocks base method.
func (m *MockGame) AlivePlayerIDs(roleID enum.RoleID) []enum.PlayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlivePlayerIDs", roleID)
	ret0, _ := ret[0].([]enum.PlayerID)
	return ret0
}

// AlivePlayerIDs indicates an expected call of AlivePlayerIDs.
func (mr *MockGameMockRecorder) AlivePlayerIDs(roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlivePlayerIDs", reflect.TypeOf((*MockGame)(nil).AlivePlayerIDs), roleID)
}

// ConnectPlayer mocks base method.
func (m *MockGame) ConnectPlayer(playerID enum.PlayerID, isConnected bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectPlayer", playerID, isConnected)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ConnectPlayer indicates an expected call of ConnectPlayer.
func (mr *MockGameMockRecorder) ConnectPlayer(playerID, isConnected interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectPlayer", reflect.TypeOf((*MockGame)(nil).ConnectPlayer), playerID, isConnected)
}

// ExitPlayer mocks base method.
func (m *MockGame) ExitPlayer(playerID enum.PlayerID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitPlayer", playerID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExitPlayer indicates an expected call of ExitPlayer.
func (mr *MockGameMockRecorder) ExitPlayer(playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitPlayer", reflect.TypeOf((*MockGame)(nil).ExitPlayer), playerID)
}

// Finish mocks base method.
func (m *MockGame) Finish() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finish")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Finish indicates an expected call of Finish.
func (mr *MockGameMockRecorder) Finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockGame)(nil).Finish))
}

// ID mocks base method.
func (m *MockGame) ID() enum.GameID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(enum.GameID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockGameMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockGame)(nil).ID))
}

// KillPlayer mocks base method.
func (m *MockGame) KillPlayer(playerID enum.PlayerID, isExited bool) contract.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillPlayer", playerID, isExited)
	ret0, _ := ret[0].(contract.Player)
	return ret0
}

// KillPlayer indicates an expected call of KillPlayer.
func (mr *MockGameMockRecorder) KillPlayer(playerID, isExited interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillPlayer", reflect.TypeOf((*MockGame)(nil).KillPlayer), playerID, isExited)
}

// NonWerewolfPlayerIDs mocks base method.
func (m *MockGame) NonWerewolfPlayerIDs() []enum.PlayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NonWerewolfPlayerIDs")
	ret0, _ := ret[0].([]enum.PlayerID)
	return ret0
}

// NonWerewolfPlayerIDs indicates an expected call of NonWerewolfPlayerIDs.
func (mr *MockGameMockRecorder) NonWerewolfPlayerIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NonWerewolfPlayerIDs", reflect.TypeOf((*MockGame)(nil).NonWerewolfPlayerIDs))
}

// Player mocks base method.
func (m *MockGame) Player(playerID enum.PlayerID) contract.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Player", playerID)
	ret0, _ := ret[0].(contract.Player)
	return ret0
}

// Player indicates an expected call of Player.
func (mr *MockGameMockRecorder) Player(playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Player", reflect.TypeOf((*MockGame)(nil).Player), playerID)
}

// PlayerIDsByFactionID mocks base method.
func (m *MockGame) PlayerIDsByFactionID(factionID enum.FactionID) []enum.PlayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayerIDsByFactionID", factionID)
	ret0, _ := ret[0].([]enum.PlayerID)
	return ret0
}

// PlayerIDsByFactionID indicates an expected call of PlayerIDsByFactionID.
func (mr *MockGameMockRecorder) PlayerIDsByFactionID(factionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayerIDsByFactionID", reflect.TypeOf((*MockGame)(nil).PlayerIDsByFactionID), factionID)
}

// PlayerIDsByRoleID mocks base method.
func (m *MockGame) PlayerIDsByRoleID(roleID enum.RoleID) []enum.PlayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayerIDsByRoleID", roleID)
	ret0, _ := ret[0].([]enum.PlayerID)
	return ret0
}

// PlayerIDsByRoleID indicates an expected call of PlayerIDsByRoleID.
func (mr *MockGameMockRecorder) PlayerIDsByRoleID(roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayerIDsByRoleID", reflect.TypeOf((*MockGame)(nil).PlayerIDsByRoleID), roleID)
}

// Poll mocks base method.
func (m *MockGame) Poll(factionID enum.FactionID) contract.Poll {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poll", factionID)
	ret0, _ := ret[0].(contract.Poll)
	return ret0
}

// Poll indicates an expected call of Poll.
func (mr *MockGameMockRecorder) Poll(factionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockGame)(nil).Poll), factionID)
}

// Scheduler mocks base method.
func (m *MockGame) Scheduler() contract.Scheduler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheduler")
	ret0, _ := ret[0].(contract.Scheduler)
	return ret0
}

// Scheduler indicates an expected call of Scheduler.
func (mr *MockGameMockRecorder) Scheduler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheduler", reflect.TypeOf((*MockGame)(nil).Scheduler))
}

// Start mocks base method.
func (m *MockGame) Start() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockGameMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockGame)(nil).Start))
}

// UsePlayerRole mocks base method.
func (m *MockGame) UsePlayerRole(playerID enum.PlayerID, req *types.UseRoleRequest) *types.ActionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsePlayerRole", playerID, req)
	ret0, _ := ret[0].(*types.ActionResponse)
	return ret0
}

// UsePlayerRole indicates an expected call of UsePlayerRole.
func (mr *MockGameMockRecorder) UsePlayerRole(playerID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsePlayerRole", reflect.TypeOf((*MockGame)(nil).UsePlayerRole), playerID, req)
}

// WerewolfPlayerIDs mocks base method.
func (m *MockGame) WerewolfPlayerIDs() []enum.PlayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WerewolfPlayerIDs")
	ret0, _ := ret[0].([]enum.PlayerID)
	return ret0
}

// WerewolfPlayerIDs indicates an expected call of WerewolfPlayerIDs.
func (mr *MockGameMockRecorder) WerewolfPlayerIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WerewolfPlayerIDs", reflect.TypeOf((*MockGame)(nil).WerewolfPlayerIDs))
}
