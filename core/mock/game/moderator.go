// Code generated by MockGen. DO NOT EDIT.
// Source: game/contract/moderator.go

// Package mock_game is a generated GoMock package.
package mock_game

import (
	reflect "reflect"
	types "uwwolf/game/types"

	gomock "github.com/golang/mock/gomock"
)

// MockModerator is a mock of Moderator interface.
type MockModerator struct {
	ctrl     *gomock.Controller
	recorder *MockModeratorMockRecorder
}

// MockModeratorMockRecorder is the mock recorder for MockModerator.
type MockModeratorMockRecorder struct {
	mock *MockModerator
}

// NewMockModerator creates a new mock instance.
func NewMockModerator(ctrl *gomock.Controller) *MockModerator {
	mock := &MockModerator{ctrl: ctrl}
	mock.recorder = &MockModeratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModerator) EXPECT() *MockModeratorMockRecorder {
	return m.recorder
}

// FinishGame mocks base method.
func (m *MockModerator) FinishGame() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishGame")
	ret0, _ := ret[0].(bool)
	return ret0
}

// FinishGame indicates an expected call of FinishGame.
func (mr *MockModeratorMockRecorder) FinishGame() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishGame", reflect.TypeOf((*MockModerator)(nil).FinishGame))
}

// RequestPlay mocks base method.
func (m *MockModerator) RequestPlay(playerID types.PlayerID, req *types.ActivateAbilityRequest) *types.ActionResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPlay", playerID, req)
	ret0, _ := ret[0].(*types.ActionResponse)
	return ret0
}

// RequestPlay indicates an expected call of RequestPlay.
func (mr *MockModeratorMockRecorder) RequestPlay(playerID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPlay", reflect.TypeOf((*MockModerator)(nil).RequestPlay), playerID, req)
}

// StartGame mocks base method.
func (m *MockModerator) StartGame() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartGame")
	ret0, _ := ret[0].(int64)
	return ret0
}

// StartGame indicates an expected call of StartGame.
func (mr *MockModeratorMockRecorder) StartGame() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGame", reflect.TypeOf((*MockModerator)(nil).StartGame))
}
