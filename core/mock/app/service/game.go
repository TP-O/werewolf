// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/game.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	data "uwwolf/app/data"
	dto "uwwolf/app/dto"
	contract "uwwolf/game/contract"
	types "uwwolf/game/types"

	gomock "github.com/golang/mock/gomock"
)

// MockGameService is a mock of GameService interface.
type MockGameService struct {
	ctrl     *gomock.Controller
	recorder *MockGameServiceMockRecorder
}

// MockGameServiceMockRecorder is the mock recorder for MockGameService.
type MockGameServiceMockRecorder struct {
	mock *MockGameService
}

// NewMockGameService creates a new mock instance.
func NewMockGameService(ctrl *gomock.Controller) *MockGameService {
	mock := &MockGameService{ctrl: ctrl}
	mock.recorder = &MockGameServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameService) EXPECT() *MockGameServiceMockRecorder {
	return m.recorder
}

// CheckBeforeRegistration mocks base method.
func (m *MockGameService) CheckBeforeRegistration(room data.WaitingRoom, cfg data.GameConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBeforeRegistration", room, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckBeforeRegistration indicates an expected call of CheckBeforeRegistration.
func (mr *MockGameServiceMockRecorder) CheckBeforeRegistration(room, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBeforeRegistration", reflect.TypeOf((*MockGameService)(nil).CheckBeforeRegistration), room, cfg)
}

// GameConfig mocks base method.
func (m *MockGameService) GameConfig(roomID string) data.GameConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GameConfig", roomID)
	ret0, _ := ret[0].(data.GameConfig)
	return ret0
}

// GameConfig indicates an expected call of GameConfig.
func (mr *MockGameServiceMockRecorder) GameConfig(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GameConfig", reflect.TypeOf((*MockGameService)(nil).GameConfig), roomID)
}

// RegisterGame mocks base method.
func (m *MockGameService) RegisterGame(config data.GameConfig, playerIDs []types.PlayerID) (contract.Moderator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterGame", config, playerIDs)
	ret0, _ := ret[0].(contract.Moderator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterGame indicates an expected call of RegisterGame.
func (mr *MockGameServiceMockRecorder) RegisterGame(config, playerIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterGame", reflect.TypeOf((*MockGameService)(nil).RegisterGame), config, playerIDs)
}

// UpdateGameConfig mocks base method.
func (m *MockGameService) UpdateGameConfig(roomID string, config dto.ReplaceGameConfigDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameConfig", roomID, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGameConfig indicates an expected call of UpdateGameConfig.
func (mr *MockGameServiceMockRecorder) UpdateGameConfig(roomID, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameConfig", reflect.TypeOf((*MockGameService)(nil).UpdateGameConfig), roomID, config)
}
