// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/game/logic/contract/poll.go

// Package mock_game_logic is a generated GoMock package.
package mock_game_logic

import (
	reflect "reflect"
	types "uwwolf/internal/app/game/logic/types"

	gomock "github.com/golang/mock/gomock"
)

// MockPoll is a mock of Poll interface.
type MockPoll struct {
	ctrl     *gomock.Controller
	recorder *MockPollMockRecorder
}

// MockPollMockRecorder is the mock recorder for MockPoll.
type MockPollMockRecorder struct {
	mock *MockPoll
}

// NewMockPoll creates a new mock instance.
func NewMockPoll(ctrl *gomock.Controller) *MockPoll {
	mock := &MockPoll{ctrl: ctrl}
	mock.recorder = &MockPollMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoll) EXPECT() *MockPollMockRecorder {
	return m.recorder
}

// AddCandidates mocks base method.
func (m *MockPoll) AddCandidates(candidateIds ...types.PlayerId) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range candidateIds {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddCandidates", varargs...)
}

// AddCandidates indicates an expected call of AddCandidates.
func (mr *MockPollMockRecorder) AddCandidates(candidateIds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCandidates", reflect.TypeOf((*MockPoll)(nil).AddCandidates), candidateIds...)
}

// AddElectors mocks base method.
func (m *MockPoll) AddElectors(electorIds ...types.PlayerId) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range electorIds {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddElectors", varargs...)
}

// AddElectors indicates an expected call of AddElectors.
func (mr *MockPollMockRecorder) AddElectors(electorIds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddElectors", reflect.TypeOf((*MockPoll)(nil).AddElectors), electorIds...)
}

// CanVote mocks base method.
func (m *MockPoll) CanVote(electorId types.PlayerId) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanVote", electorId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanVote indicates an expected call of CanVote.
func (mr *MockPollMockRecorder) CanVote(electorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanVote", reflect.TypeOf((*MockPoll)(nil).CanVote), electorId)
}

// Close mocks base method.
func (m *MockPoll) Close() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPollMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPoll)(nil).Close))
}

// IsOpen mocks base method.
func (m *MockPoll) IsOpen() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpen indicates an expected call of IsOpen.
func (mr *MockPollMockRecorder) IsOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOpen", reflect.TypeOf((*MockPoll)(nil).IsOpen))
}

// Open mocks base method.
func (m *MockPoll) Open() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockPollMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockPoll)(nil).Open))
}

// Record mocks base method.
func (m *MockPoll) Record(round types.Round) *types.PollRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Record", round)
	ret0, _ := ret[0].(*types.PollRecord)
	return ret0
}

// Record indicates an expected call of Record.
func (mr *MockPollMockRecorder) Record(round interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockPoll)(nil).Record), round)
}

// RemoveCandidate mocks base method.
func (m *MockPoll) RemoveCandidate(candidateId types.PlayerId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCandidate", candidateId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RemoveCandidate indicates an expected call of RemoveCandidate.
func (mr *MockPollMockRecorder) RemoveCandidate(candidateId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCandidate", reflect.TypeOf((*MockPoll)(nil).RemoveCandidate), candidateId)
}

// RemoveElector mocks base method.
func (m *MockPoll) RemoveElector(electorId types.PlayerId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveElector", electorId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RemoveElector indicates an expected call of RemoveElector.
func (mr *MockPollMockRecorder) RemoveElector(electorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveElector", reflect.TypeOf((*MockPoll)(nil).RemoveElector), electorId)
}

// SetWeight mocks base method.
func (m *MockPoll) SetWeight(electorId types.PlayerId, weight uint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWeight", electorId, weight)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetWeight indicates an expected call of SetWeight.
func (mr *MockPollMockRecorder) SetWeight(electorId, weight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWeight", reflect.TypeOf((*MockPoll)(nil).SetWeight), electorId, weight)
}

// Vote mocks base method.
func (m *MockPoll) Vote(electorId, candidateId types.PlayerId) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vote", electorId, candidateId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vote indicates an expected call of Vote.
func (mr *MockPollMockRecorder) Vote(electorId, candidateId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockPoll)(nil).Vote), electorId, candidateId)
}
