// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/game/logic/contract/role.go

// Package mock_game_logic is a generated GoMock package.
package mock_game_logic

import (
	reflect "reflect"
	contract "uwwolf/internal/app/game/logic/contract"
	types "uwwolf/internal/app/game/logic/types"

	gomock "github.com/golang/mock/gomock"
)

// MockRole is a mock of Role interface.
type MockRole struct {
	ctrl     *gomock.Controller
	recorder *MockRoleMockRecorder
}

// MockRoleMockRecorder is the mock recorder for MockRole.
type MockRoleMockRecorder struct {
	mock *MockRole
}

// NewMockRole creates a new mock instance.
func NewMockRole(ctrl *gomock.Controller) *MockRole {
	mock := &MockRole{ctrl: ctrl}
	mock.recorder = &MockRoleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRole) EXPECT() *MockRoleMockRecorder {
	return m.recorder
}

// ActiveTimes mocks base method.
func (m *MockRole) ActiveTimes(index int) types.Times {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveTimes", index)
	ret0, _ := ret[0].(types.Times)
	return ret0
}

// ActiveTimes indicates an expected call of ActiveTimes.
func (mr *MockRoleMockRecorder) ActiveTimes(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveTimes", reflect.TypeOf((*MockRole)(nil).ActiveTimes), index)
}

// FactionId mocks base method.
func (m *MockRole) FactionId() types.FactionId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FactionId")
	ret0, _ := ret[0].(types.FactionId)
	return ret0
}

// FactionId indicates an expected call of FactionId.
func (mr *MockRoleMockRecorder) FactionId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FactionId", reflect.TypeOf((*MockRole)(nil).FactionId))
}

// Id mocks base method.
func (m *MockRole) Id() types.RoleId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(types.RoleId)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockRoleMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockRole)(nil).Id))
}

// OnAfterAssign mocks base method.
func (m *MockRole) OnAfterAssign() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAfterAssign")
}

// OnAfterAssign indicates an expected call of OnAfterAssign.
func (mr *MockRoleMockRecorder) OnAfterAssign() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAfterAssign", reflect.TypeOf((*MockRole)(nil).OnAfterAssign))
}

// OnAfterDeath mocks base method.
func (m *MockRole) OnAfterDeath() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAfterDeath")
}

// OnAfterDeath indicates an expected call of OnAfterDeath.
func (mr *MockRoleMockRecorder) OnAfterDeath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAfterDeath", reflect.TypeOf((*MockRole)(nil).OnAfterDeath))
}

// OnAfterRevoke mocks base method.
func (m *MockRole) OnAfterRevoke() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAfterRevoke")
}

// OnAfterRevoke indicates an expected call of OnAfterRevoke.
func (mr *MockRoleMockRecorder) OnAfterRevoke() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAfterRevoke", reflect.TypeOf((*MockRole)(nil).OnAfterRevoke))
}

// OnBeforeDeath mocks base method.
func (m *MockRole) OnBeforeDeath() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnBeforeDeath")
	ret0, _ := ret[0].(bool)
	return ret0
}

// OnBeforeDeath indicates an expected call of OnBeforeDeath.
func (mr *MockRoleMockRecorder) OnBeforeDeath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnBeforeDeath", reflect.TypeOf((*MockRole)(nil).OnBeforeDeath))
}

// Use mocks base method.
func (m *MockRole) Use(req types.RoleRequest) types.RoleResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use", req)
	ret0, _ := ret[0].(types.RoleResponse)
	return ret0
}

// Use indicates an expected call of Use.
func (mr *MockRoleMockRecorder) Use(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockRole)(nil).Use), req)
}

// MockRoleFactory is a mock of RoleFactory interface.
type MockRoleFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRoleFactoryMockRecorder
}

// MockRoleFactoryMockRecorder is the mock recorder for MockRoleFactory.
type MockRoleFactoryMockRecorder struct {
	mock *MockRoleFactory
}

// NewMockRoleFactory creates a new mock instance.
func NewMockRoleFactory(ctrl *gomock.Controller) *MockRoleFactory {
	mock := &MockRoleFactory{ctrl: ctrl}
	mock.recorder = &MockRoleFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleFactory) EXPECT() *MockRoleFactoryMockRecorder {
	return m.recorder
}

// CreateById mocks base method.
func (m *MockRoleFactory) CreateById(id types.RoleId, moderator contract.Moderator, playerID types.PlayerId) (contract.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateById", id, moderator, playerID)
	ret0, _ := ret[0].(contract.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateById indicates an expected call of CreateById.
func (mr *MockRoleFactoryMockRecorder) CreateById(id, moderator, playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateById", reflect.TypeOf((*MockRoleFactory)(nil).CreateById), id, moderator, playerID)
}
