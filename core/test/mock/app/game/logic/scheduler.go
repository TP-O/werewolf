// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/game/logic/contract/scheduler.go

// Package mock_game_logic is a generated GoMock package.
package mock_game_logic

import (
	reflect "reflect"
	types "uwwolf/internal/app/game/logic/types"

	gomock "github.com/golang/mock/gomock"
)

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// AddSlot mocks base method.
func (m *MockScheduler) AddSlot(newSlot types.AddTurnSlot) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSlot", newSlot)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddSlot indicates an expected call of AddSlot.
func (mr *MockSchedulerMockRecorder) AddSlot(newSlot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlot", reflect.TypeOf((*MockScheduler)(nil).AddSlot), newSlot)
}

// CanPlay mocks base method.
func (m *MockScheduler) CanPlay(playerId types.PlayerId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanPlay", playerId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanPlay indicates an expected call of CanPlay.
func (mr *MockSchedulerMockRecorder) CanPlay(playerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanPlay", reflect.TypeOf((*MockScheduler)(nil).CanPlay), playerId)
}

// FreezeSlot mocks base method.
func (m *MockScheduler) FreezeSlot(frozenSlot types.FreezeTurnSlot) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreezeSlot", frozenSlot)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FreezeSlot indicates an expected call of FreezeSlot.
func (mr *MockSchedulerMockRecorder) FreezeSlot(frozenSlot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreezeSlot", reflect.TypeOf((*MockScheduler)(nil).FreezeSlot), frozenSlot)
}

// IsEmpty mocks base method.
func (m *MockScheduler) IsEmpty(phaseId types.PhaseId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty", phaseId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockSchedulerMockRecorder) IsEmpty(phaseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockScheduler)(nil).IsEmpty), phaseId)
}

// NextTurn mocks base method.
func (m *MockScheduler) NextTurn() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextTurn")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NextTurn indicates an expected call of NextTurn.
func (mr *MockSchedulerMockRecorder) NextTurn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextTurn", reflect.TypeOf((*MockScheduler)(nil).NextTurn))
}

// Phase mocks base method.
func (m *MockScheduler) Phase() map[types.Turn]types.TurnSlots {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Phase")
	ret0, _ := ret[0].(map[types.Turn]types.TurnSlots)
	return ret0
}

// Phase indicates an expected call of Phase.
func (mr *MockSchedulerMockRecorder) Phase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Phase", reflect.TypeOf((*MockScheduler)(nil).Phase))
}

// PhaseId mocks base method.
func (m *MockScheduler) PhaseId() types.PhaseId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhaseId")
	ret0, _ := ret[0].(types.PhaseId)
	return ret0
}

// PhaseId indicates an expected call of PhaseId.
func (mr *MockSchedulerMockRecorder) PhaseId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhaseId", reflect.TypeOf((*MockScheduler)(nil).PhaseId))
}

// PlayablePlayerIds mocks base method.
func (m *MockScheduler) PlayablePlayerIds() []types.PlayerId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayablePlayerIds")
	ret0, _ := ret[0].([]types.PlayerId)
	return ret0
}

// PlayablePlayerIds indicates an expected call of PlayablePlayerIds.
func (mr *MockSchedulerMockRecorder) PlayablePlayerIds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayablePlayerIds", reflect.TypeOf((*MockScheduler)(nil).PlayablePlayerIds))
}

// RemoveSlot mocks base method.
func (m *MockScheduler) RemoveSlot(removeSlot types.RemoveTurnSlot) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSlot", removeSlot)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RemoveSlot indicates an expected call of RemoveSlot.
func (mr *MockSchedulerMockRecorder) RemoveSlot(removeSlot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSlot", reflect.TypeOf((*MockScheduler)(nil).RemoveSlot), removeSlot)
}

// Round mocks base method.
func (m *MockScheduler) Round() types.Round {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Round")
	ret0, _ := ret[0].(types.Round)
	return ret0
}

// Round indicates an expected call of Round.
func (mr *MockSchedulerMockRecorder) Round() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Round", reflect.TypeOf((*MockScheduler)(nil).Round))
}

// Turn mocks base method.
func (m *MockScheduler) Turn() types.Turn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Turn")
	ret0, _ := ret[0].(types.Turn)
	return ret0
}

// Turn indicates an expected call of Turn.
func (mr *MockSchedulerMockRecorder) Turn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Turn", reflect.TypeOf((*MockScheduler)(nil).Turn))
}

// TurnSlots mocks base method.
func (m *MockScheduler) TurnSlots() types.TurnSlots {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TurnSlots")
	ret0, _ := ret[0].(types.TurnSlots)
	return ret0
}

// TurnSlots indicates an expected call of TurnSlots.
func (mr *MockSchedulerMockRecorder) TurnSlots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TurnSlots", reflect.TypeOf((*MockScheduler)(nil).TurnSlots))
}
