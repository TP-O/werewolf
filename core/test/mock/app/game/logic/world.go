// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/game/logic/contract/world.go

// Package mock_game_logic is a generated GoMock package.
package mock_game_logic

import (
	reflect "reflect"
	contract "uwwolf/internal/app/game/logic/contract"
	types "uwwolf/internal/app/game/logic/types"

	gomock "github.com/golang/mock/gomock"
)

// MockWorld is a mock of World interface.
type MockWorld struct {
	ctrl     *gomock.Controller
	recorder *MockWorldMockRecorder
}

// MockWorldMockRecorder is the mock recorder for MockWorld.
type MockWorldMockRecorder struct {
	mock *MockWorld
}

// NewMockWorld creates a new mock instance.
func NewMockWorld(ctrl *gomock.Controller) *MockWorld {
	mock := &MockWorld{ctrl: ctrl}
	mock.recorder = &MockWorldMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorld) EXPECT() *MockWorldMockRecorder {
	return m.recorder
}

// AlivePlayerIdsWithFactionId mocks base method.
func (m *MockWorld) AlivePlayerIdsWithFactionId(factionId types.FactionId) []types.PlayerId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlivePlayerIdsWithFactionId", factionId)
	ret0, _ := ret[0].([]types.PlayerId)
	return ret0
}

// AlivePlayerIdsWithFactionId indicates an expected call of AlivePlayerIdsWithFactionId.
func (mr *MockWorldMockRecorder) AlivePlayerIdsWithFactionId(factionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlivePlayerIdsWithFactionId", reflect.TypeOf((*MockWorld)(nil).AlivePlayerIdsWithFactionId), factionId)
}

// AlivePlayerIdsWithRoleId mocks base method.
func (m *MockWorld) AlivePlayerIdsWithRoleId(roleId types.RoleId) []types.PlayerId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlivePlayerIdsWithRoleId", roleId)
	ret0, _ := ret[0].([]types.PlayerId)
	return ret0
}

// AlivePlayerIdsWithRoleId indicates an expected call of AlivePlayerIdsWithRoleId.
func (mr *MockWorldMockRecorder) AlivePlayerIdsWithRoleId(roleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlivePlayerIdsWithRoleId", reflect.TypeOf((*MockWorld)(nil).AlivePlayerIdsWithRoleId), roleId)
}

// AlivePlayerIdsWithoutFactionId mocks base method.
func (m *MockWorld) AlivePlayerIdsWithoutFactionId(factionId types.FactionId) []types.PlayerId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlivePlayerIdsWithoutFactionId", factionId)
	ret0, _ := ret[0].([]types.PlayerId)
	return ret0
}

// AlivePlayerIdsWithoutFactionId indicates an expected call of AlivePlayerIdsWithoutFactionId.
func (mr *MockWorldMockRecorder) AlivePlayerIdsWithoutFactionId(factionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlivePlayerIdsWithoutFactionId", reflect.TypeOf((*MockWorld)(nil).AlivePlayerIdsWithoutFactionId), factionId)
}

// Load mocks base method.
func (m *MockWorld) Load() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockWorldMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockWorld)(nil).Load))
}

// Map mocks base method.
func (m *MockWorld) Map() contract.Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(contract.Map)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockWorldMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockWorld)(nil).Map))
}

// Player mocks base method.
func (m *MockWorld) Player(playerID types.PlayerId) contract.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Player", playerID)
	ret0, _ := ret[0].(contract.Player)
	return ret0
}

// Player indicates an expected call of Player.
func (mr *MockWorldMockRecorder) Player(playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Player", reflect.TypeOf((*MockWorld)(nil).Player), playerID)
}

// Players mocks base method.
func (m *MockWorld) Players() map[types.PlayerId]contract.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Players")
	ret0, _ := ret[0].(map[types.PlayerId]contract.Player)
	return ret0
}

// Players indicates an expected call of Players.
func (mr *MockWorldMockRecorder) Players() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Players", reflect.TypeOf((*MockWorld)(nil).Players))
}

// Poll mocks base method.
func (m *MockWorld) Poll(factionId types.FactionId) contract.Poll {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poll", factionId)
	ret0, _ := ret[0].(contract.Poll)
	return ret0
}

// Poll indicates an expected call of Poll.
func (mr *MockWorldMockRecorder) Poll(factionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockWorld)(nil).Poll), factionId)
}

// Scheduler mocks base method.
func (m *MockWorld) Scheduler() contract.Scheduler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheduler")
	ret0, _ := ret[0].(contract.Scheduler)
	return ret0
}

// Scheduler indicates an expected call of Scheduler.
func (mr *MockWorldMockRecorder) Scheduler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheduler", reflect.TypeOf((*MockWorld)(nil).Scheduler))
}
