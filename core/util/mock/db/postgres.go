// Code generated by MockGen. DO NOT EDIT.
// Source: db/store.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"
	db "uwwolf/db"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AssignGameRoles mocks base method.
func (m *MockStore) AssignGameRoles(ctx context.Context, arg db.AssignGameRolesParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignGameRoles", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignGameRoles indicates an expected call of AssignGameRoles.
func (mr *MockStoreMockRecorder) AssignGameRoles(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignGameRoles", reflect.TypeOf((*MockStore)(nil).AssignGameRoles), ctx, arg)
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// CreateGame mocks base method.
func (m *MockStore) CreateGame(ctx context.Context) (db.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGame", ctx)
	ret0, _ := ret[0].(db.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGame indicates an expected call of CreateGame.
func (mr *MockStoreMockRecorder) CreateGame(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGame", reflect.TypeOf((*MockStore)(nil).CreateGame), ctx)
}

// CreateGameLogs mocks base method.
func (m *MockStore) CreateGameLogs(ctx context.Context, arg db.CreateGameLogsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGameLogs", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGameLogs indicates an expected call of CreateGameLogs.
func (mr *MockStoreMockRecorder) CreateGameLogs(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGameLogs", reflect.TypeOf((*MockStore)(nil).CreateGameLogs), ctx, arg)
}

// FinishGame mocks base method.
func (m *MockStore) FinishGame(ctx context.Context, arg db.FinishGameParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishGame", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishGame indicates an expected call of FinishGame.
func (mr *MockStoreMockRecorder) FinishGame(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishGame", reflect.TypeOf((*MockStore)(nil).FinishGame), ctx, arg)
}

// StoreGame mocks base method.
func (m *MockStore) StoreGame(ctx context.Context, params *db.StoreGameParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreGame", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreGame indicates an expected call of StoreGame.
func (mr *MockStoreMockRecorder) StoreGame(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreGame", reflect.TypeOf((*MockStore)(nil).StoreGame), ctx, params)
}
