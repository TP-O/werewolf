// Code generated by MockGen. DO NOT EDIT.
// Source: game/mechanism/contract/world.go

// Package mock_game is a generated GoMock package.
package mock_game

import (
	reflect "reflect"
	contract "uwwolf/game/mechanism/contract"
	tool "uwwolf/game/tool"
	types "uwwolf/game/types"

	gomock "github.com/golang/mock/gomock"
)

// MockWorld is a mock of World interface.
type MockWorld struct {
	ctrl     *gomock.Controller
	recorder *MockWorldMockRecorder
}

// MockWorldMockRecorder is the mock recorder for MockWorld.
type MockWorldMockRecorder struct {
	mock *MockWorld
}

// NewMockWorld creates a new mock instance.
func NewMockWorld(ctrl *gomock.Controller) *MockWorld {
	mock := &MockWorld{ctrl: ctrl}
	mock.recorder = &MockWorldMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorld) EXPECT() *MockWorldMockRecorder {
	return m.recorder
}

// AlivePlayerIDsWithFactionID mocks base method.
func (m *MockWorld) AlivePlayerIDsWithFactionID(factionID types.FactionID) []types.PlayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlivePlayerIDsWithFactionID", factionID)
	ret0, _ := ret[0].([]types.PlayerID)
	return ret0
}

// AlivePlayerIDsWithFactionID indicates an expected call of AlivePlayerIDsWithFactionID.
func (mr *MockWorldMockRecorder) AlivePlayerIDsWithFactionID(factionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlivePlayerIDsWithFactionID", reflect.TypeOf((*MockWorld)(nil).AlivePlayerIDsWithFactionID), factionID)
}

// AlivePlayerIDsWithRoleID mocks base method.
func (m *MockWorld) AlivePlayerIDsWithRoleID(roleID types.RoleID) []types.PlayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlivePlayerIDsWithRoleID", roleID)
	ret0, _ := ret[0].([]types.PlayerID)
	return ret0
}

// AlivePlayerIDsWithRoleID indicates an expected call of AlivePlayerIDsWithRoleID.
func (mr *MockWorldMockRecorder) AlivePlayerIDsWithRoleID(roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlivePlayerIDsWithRoleID", reflect.TypeOf((*MockWorld)(nil).AlivePlayerIDsWithRoleID), roleID)
}

// AlivePlayerIDsWithoutFactionID mocks base method.
func (m *MockWorld) AlivePlayerIDsWithoutFactionID(factionID types.FactionID) []types.PlayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlivePlayerIDsWithoutFactionID", factionID)
	ret0, _ := ret[0].([]types.PlayerID)
	return ret0
}

// AlivePlayerIDsWithoutFactionID indicates an expected call of AlivePlayerIDsWithoutFactionID.
func (mr *MockWorldMockRecorder) AlivePlayerIDsWithoutFactionID(factionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlivePlayerIDsWithoutFactionID", reflect.TypeOf((*MockWorld)(nil).AlivePlayerIDsWithoutFactionID), factionID)
}

// Load mocks base method.
func (m *MockWorld) Load() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockWorldMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockWorld)(nil).Load))
}

// Map mocks base method.
func (m *MockWorld) Map() tool.Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map")
	ret0, _ := ret[0].(tool.Map)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockWorldMockRecorder) Map() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockWorld)(nil).Map))
}

// Player mocks base method.
func (m *MockWorld) Player(playerID types.PlayerID) contract.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Player", playerID)
	ret0, _ := ret[0].(contract.Player)
	return ret0
}

// Player indicates an expected call of Player.
func (mr *MockWorldMockRecorder) Player(playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Player", reflect.TypeOf((*MockWorld)(nil).Player), playerID)
}

// Players mocks base method.
func (m *MockWorld) Players() map[types.PlayerID]contract.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Players")
	ret0, _ := ret[0].(map[types.PlayerID]contract.Player)
	return ret0
}

// Players indicates an expected call of Players.
func (mr *MockWorldMockRecorder) Players() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Players", reflect.TypeOf((*MockWorld)(nil).Players))
}

// Poll mocks base method.
func (m *MockWorld) Poll(factionID types.FactionID) tool.Poll {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poll", factionID)
	ret0, _ := ret[0].(tool.Poll)
	return ret0
}

// Poll indicates an expected call of Poll.
func (mr *MockWorldMockRecorder) Poll(factionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockWorld)(nil).Poll), factionID)
}

// Scheduler mocks base method.
func (m *MockWorld) Scheduler() tool.Scheduler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheduler")
	ret0, _ := ret[0].(tool.Scheduler)
	return ret0
}

// Scheduler indicates an expected call of Scheduler.
func (mr *MockWorldMockRecorder) Scheduler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheduler", reflect.TypeOf((*MockWorld)(nil).Scheduler))
}
