// Code generated by MockGen. DO NOT EDIT.
// Source: server/service/room.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	types "uwwolf/game/types"
	data "uwwolf/server/data"

	gomock "github.com/golang/mock/gomock"
)

// MockRoomService is a mock of RoomService interface.
type MockRoomService struct {
	ctrl     *gomock.Controller
	recorder *MockRoomServiceMockRecorder
}

// MockRoomServiceMockRecorder is the mock recorder for MockRoomService.
type MockRoomServiceMockRecorder struct {
	mock *MockRoomService
}

// NewMockRoomService creates a new mock instance.
func NewMockRoomService(ctrl *gomock.Controller) *MockRoomService {
	mock := &MockRoomService{ctrl: ctrl}
	mock.recorder = &MockRoomServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomService) EXPECT() *MockRoomServiceMockRecorder {
	return m.recorder
}

// PlayerWaitingRoom mocks base method.
func (m *MockRoomService) PlayerWaitingRoom(playerID types.PlayerID) (data.WaitingRoom, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayerWaitingRoom", playerID)
	ret0, _ := ret[0].(data.WaitingRoom)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// PlayerWaitingRoom indicates an expected call of PlayerWaitingRoom.
func (mr *MockRoomServiceMockRecorder) PlayerWaitingRoom(playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayerWaitingRoom", reflect.TypeOf((*MockRoomService)(nil).PlayerWaitingRoom), playerID)
}
