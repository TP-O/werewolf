var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddToRoomDto.html",[0,0.177,1,2.485]],["body/classes/AddToRoomDto.html",[0,0.278,1,3.899,2,1.023,3,0.302,4,0.335,5,0.27,6,5.319,7,2.127,8,0.335,9,1.155,10,3.622,11,2.609,12,0.466,13,0.021,14,2.004,15,1.09,16,3.622,17,3.305,18,3.406,19,3.084,20,0.648,21,3.837,22,1.367,23,1.776,24,3.837,25,0.335,26,3.303,27,1.896,28,2.004,29,3.084,30,1.274,31,0.335,32,2.38,33,3.084,34,0.016,35,0.016]],["title/classes/AllExceptionFilter.html",[0,0.177,36,2.485]],["body/classes/AllExceptionFilter.html",[0,0.14,2,0.651,3,0.192,4,0.213,5,0.172,8,0.213,9,0.849,12,0.444,13,0.021,15,0.549,20,0.618,25,0.474,31,0.213,34,0.012,35,0.012,36,2.864,37,4.919,38,2.168,39,1.649,40,4.208,41,2.888,42,2.866,43,4.559,44,1.249,45,3.718,46,4.171,47,4.171,48,3.382,49,2.442,50,3.163,51,5.633,52,4.589,53,5.001,54,2.858,55,1.474,56,1.396,57,1.474,58,4.106,59,1.557,60,3.382,61,4.171,62,2.858,63,4.171,64,2.858,65,0.688,66,1.963,67,2.442,68,1.799,69,2.427,70,1.444,71,1.799,72,1.963,73,2.858,74,1.799,75,1.546,76,1.799,77,1.799,78,2.442,79,2.168,80,1.963,81,2.858,82,2.858,83,4.925,84,4.171,85,2.858,86,4.925,87,4.171,88,2.858,89,2.858,90,2.858,91,1.947,92,1.354,93,2.442,94,4.171,95,2.858,96,2.864,97,4.171,98,2.858,99,2.168,100,1.546,101,1.975,102,2.626,103,2.626,104,1.963,105,2.442,106,2.168,107,2.858,108,2.858,109,2.858,110,2.858,111,2.858,112,2.442,113,2.858]],["title/modules/AppModule.html",[114,1.61,115,2.485]],["body/modules/AppModule.html",[0,0.196,3,0.269,4,0.299,5,0.241,13,0.021,25,0.508,31,0.299,34,0.015,35,0.015,65,0.964,114,2.347,115,4.969,116,2.024,117,2.664,118,3.422,119,3.422,120,3.422,121,3.888,122,3.888,123,3.616,124,3.888,125,4.207,126,3.068,127,2.33,128,1.679,129,4.005,130,3.319,131,3.621,132,4.005,133,3.037,134,4.005,135,4.005,136,4.005,137,4.005,138,4.005,139,4.005]],["title/guards/AuthGuard.html",[140,2.744,141,2.485]],["body/guards/AuthGuard.html",[0,0.205,3,0.282,4,0.313,5,0.253,8,0.313,12,0.446,13,0.021,20,0.621,25,0.406,31,0.313,32,1.761,34,0.016,35,0.016,39,1.661,44,1.629,55,1.629,56,1.543,57,1.629,59,1.329,65,1.011,91,2.385,106,3.187,141,3.736,142,4.202,143,3.59,144,2.385,145,6.381,146,1.87,147,4.202,148,3.663,149,4.202,150,5.44,151,4.839,152,4.202,153,3.187,154,3.736,155,1.383,156,4.202,157,2.273,158,4.202,159,3.59,160,4.202,161,2.577,162,1.87,163,4.202,164,4.202,165,1.99]],["title/injectables/AuthService.html",[148,1.958,155,0.92]],["body/injectables/AuthService.html",[0,0.139,3,0.191,4,0.211,5,0.17,8,0.211,9,0.843,12,0.442,13,0.021,15,0.544,20,0.616,22,1.49,25,0.402,31,0.211,34,0.012,35,0.012,41,2.668,42,2.852,44,1.241,45,1.946,55,1.467,56,1.39,57,1.467,59,1.705,65,0.682,80,3.703,91,1.938,102,2.61,103,2.61,144,2.37,146,1.262,148,2.243,155,1.054,157,1.533,159,5.699,161,2.718,162,2.181,165,1.963,166,1.262,167,2.422,168,5.994,169,4.146,170,4.146,171,2.15,172,2.512,173,4.146,174,4.146,175,2.834,176,4.146,177,4.146,178,4.352,179,5.121,180,4.146,181,2.554,182,4.607,183,4.146,184,2.834,185,4.146,186,4.146,187,4.146,188,1.784,189,3.717,190,4.146,191,2.834,192,2.834,193,2.15,194,2.834,195,2.412,196,6.192,197,2.422,198,2.834,199,2.834,200,2.834,201,2.834,202,2.412,203,2.834,204,2.834,205,2.422,206,2.422,207,2.422,208,2.15,209,2.422]],["title/classes/BookRoomDto.html",[0,0.177,210,2.485]],["body/classes/BookRoomDto.html",[0,0.297,2,1.139,3,0.336,4,0.373,5,0.301,7,2.368,8,0.373,9,1.234,12,0.41,13,0.021,15,0.96,20,0.571,25,0.373,27,2.027,30,1.418,31,0.373,34,0.017,35,0.017,210,4.167,211,5.184,212,4.112,213,3.283,214,5.001,215,2.91,216,3.82]],["title/injectables/CommunicationGateway.html",[155,0.92,217,2.105]],["body/injectables/CommunicationGateway.html",[0,0.061,3,0.084,4,0.093,5,0.075,8,0.093,9,0.438,12,0.453,13,0.021,15,0.977,20,0.631,25,0.391,31,0.093,34,0.006,35,0.006,36,1.479,39,0.495,41,0.959,42,1.65,44,0.645,55,1.615,56,1.529,57,1.615,59,1.66,65,0.301,69,4.11,70,0.633,72,0.86,75,0.677,76,0.788,77,0.788,92,3.377,101,1.595,128,0.903,144,2.637,146,0.557,155,0.548,157,0.677,161,1.595,162,2.337,166,0.557,188,3.305,195,3.568,202,3.279,210,2.313,217,1.253,218,1.069,219,2.61,220,2.835,221,2.154,222,2.154,223,2.835,224,2.835,225,2.835,226,2.835,227,2.835,228,2.835,229,2.835,230,2.422,231,1.252,232,2.847,233,2.154,234,1.252,235,5.912,236,4.902,237,3.494,238,1.252,239,1.252,240,1.84,241,2.059,242,2.154,243,1.252,244,1.633,245,2.877,246,2.154,247,1.84,248,2.154,249,1.252,250,1.356,251,2.154,252,1.252,253,2.313,254,1.252,255,1.252,256,1.633,257,2.154,258,1.252,259,2.313,260,1.252,261,1.252,262,1.633,263,1.252,264,2.313,265,1.252,266,1.252,267,1.633,268,3.368,269,1.252,270,2.313,271,1.252,272,1.252,273,1.479,274,1.252,275,2.313,276,1.252,277,1.252,278,1.84,279,1.84,280,1.252,281,2.12,282,1.252,283,1.252,284,2.554,285,1.252,286,2.313,287,1.252,288,1.252,289,1.84,290,1.84,291,2.154,292,1.252,293,2.12,294,1.252,295,1.252,296,2.835,297,1.252,298,5.088,299,1.252,300,1.252,301,5.088,302,1.252,303,5.088,304,2.154,305,2.154,306,1.252,307,2.154,308,0.949,309,1.633,310,0.949,311,0.949,312,1.479,313,1.252,314,3.494,315,1.252,316,1.252,317,1.069,318,1.252,319,1.252,320,1.252,321,1.252,322,1.252,323,1.252,324,1.252,325,1.252,326,1.252,327,1.252,328,1.252,329,3.368,330,1.252,331,1.252,332,1.252,333,1.252,334,1.252,335,1.252,336,1.252,337,1.252,338,1.252,339,1.252,340,1.252,341,1.252,342,1.252,343,1.252,344,1.252,345,1.252,346,1.252,347,1.252,348,1.252,349,1.252,350,1.252,351,1.252,352,1.252,353,1.252]],["title/modules/CommunicationModule.html",[114,1.61,121,2.105]],["body/modules/CommunicationModule.html",[0,0.179,3,0.247,4,0.274,5,0.221,13,0.021,25,0.505,31,0.274,34,0.014,35,0.014,65,0.884,114,2.214,116,1.855,117,2.514,121,4.243,122,3.792,123,3.526,124,3.792,126,2.895,127,2.136,128,1.539,130,3.132,131,3.417,148,3.526,172,2.732,217,4.111,232,4.476,317,3.137,354,3.137,355,3.672,356,3.137,357,3.137,358,3.672,359,3.417,360,3.672,361,3.137,362,3.137,363,2.136,364,3.672,365,3.672]],["title/classes/CreatePersistentRoomDto.html",[0,0.177,366,2.485]],["body/classes/CreatePersistentRoomDto.html",[0,0.275,2,0.709,3,0.209,4,0.232,5,0.187,8,0.232,9,0.902,10,3.006,12,0.544,13,0.021,14,2.401,15,0.852,16,3.277,17,2.846,19,2.137,20,0.757,22,1.067,23,1.23,25,0.385,26,2.58,27,1.481,28,1.566,30,0.882,31,0.232,32,2.495,34,0.013,35,0.013,39,1.753,181,2.447,212,3.252,213,2.399,241,1.824,366,4.088,367,4.23,368,4.23,369,1.811,370,3.867,371,3.548,372,3.548,373,3.548,374,3.548,375,3.548,376,3.112,377,2.658,378,4.271,379,3.545,380,2.792,381,3.112,382,3.112,383,3.112,384,3.112,385,3.112,386,2.658,387,3.112,388,3.112,389,1.959,390,1.959,391,3.045,392,3.006,393,3.045,394,1.959,395,1.959,396,1.959,397,2.658,398,2.658,399,1.684]],["title/classes/CreatePersistentRoomsDto.html",[0,0.177,395,2.278]],["body/classes/CreatePersistentRoomsDto.html",[0,0.298,2,0.854,3,0.252,4,0.28,5,0.225,8,0.28,9,1.027,10,2.183,12,0.501,13,0.021,14,2.366,15,0.969,16,3.32,17,2.883,20,0.577,22,0.903,25,0.425,26,2.938,27,1.686,28,1.782,30,1.064,31,0.28,32,2.558,34,0.014,35,0.014,39,1.483,181,1.777,212,2.362,213,2.03,241,1.782,366,4.374,367,3.592,368,3.592,369,2.183,370,4.191,371,2.577,372,2.577,373,2.577,374,2.577,375,2.577,380,2.362,389,2.362,390,2.362,391,3.467,392,3.32,393,3.467,394,2.362,395,3.178,396,2.362,397,3.206,398,3.206,399,3.087,400,3.752,401,3.752,402,3.752,403,3.752,404,3.206,405,3.752]],["title/classes/CreateRoomDto.html",[0,0.177,406,2.485]],["body/classes/CreateRoomDto.html",[0,0.269,2,0.673,3,0.199,4,0.22,5,0.178,8,0.22,9,0.87,10,3.396,12,0.545,13,0.021,14,2.31,15,1.056,16,2.922,17,2.949,18,2.243,19,2.031,20,0.747,22,1.029,25,0.374,26,2.487,29,2.031,30,0.838,31,0.22,32,2.105,33,2.031,34,0.012,35,0.012,39,1.69,101,2.025,181,2.378,212,3.161,213,2.976,216,3.674,241,1.773,367,4.183,369,1.72,370,3.448,371,3.448,372,3.448,373,3.448,374,3.448,375,3.448,377,2.526,378,4.172,379,3.463,380,2.691,386,2.526,389,1.861,390,1.861,391,2.936,393,2.936,394,1.861,396,1.861,399,1.6,406,4.008,407,4.183,408,2.313,409,2.957,410,2.957,411,2.957,412,2.957,413,2.957,414,3.652,415,3.652,416,3.652,417,3.652,418,3.652,419,2.957,420,2.957,421,2.526,422,2.526,423,2.526,424,1.861]],["title/classes/CreateTemporaryRoomsDto.html",[0,0.177,424,2.278]],["body/classes/CreateTemporaryRoomsDto.html",[0,0.301,2,0.874,3,0.258,4,0.286,5,0.231,8,0.286,9,1.042,10,2.982,12,0.473,13,0.021,14,2.174,15,0.737,16,2.982,17,2.916,20,0.438,22,0.923,25,0.43,26,2.982,29,2.634,30,1.088,31,0.286,32,2.418,33,2.634,34,0.015,35,0.015,39,1.517,101,1.817,181,1.817,212,2.415,213,2.772,216,3.632,241,1.809,367,3.226,369,2.232,370,2.634,371,2.634,372,2.634,373,2.634,374,2.634,375,2.634,380,2.415,389,2.415,390,2.415,391,3.519,393,3.519,394,2.415,396,2.415,399,3.122,404,3.278,406,4.407,407,3.226,408,2.076,414,3.278,415,3.278,416,3.278,417,3.278,418,3.278,421,3.278,422,3.278,423,3.278,424,3.226,425,3.836,426,3.836]],["title/injectables/CronService.html",[125,2.278,155,0.92]],["body/injectables/CronService.html",[0,0.203,3,0.279,4,0.309,5,0.249,8,0.309,12,0.341,13,0.021,15,1.036,20,0.685,25,0.473,31,0.309,34,0.015,35,0.015,44,1.616,55,1.243,56,1.177,57,1.243,59,1.707,65,0.999,71,2.613,72,2.85,125,3.398,133,3.148,144,2.668,146,1.847,155,1.372,157,2.246,162,2.402,166,1.847,427,3.546,428,6.351,429,6.351,430,4.151,431,3.927,432,4.151,433,5.398,434,4.151,435,4.151,436,4.151,437,4.151,438,4.151,439,4.151,440,4.151,441,4.151,442,4.151,443,4.151]],["title/injectables/EventNameBindingInterceptor.html",[155,0.92,237,2.485]],["body/injectables/EventNameBindingInterceptor.html",[0,0.196,3,0.269,4,0.299,5,0.241,8,0.299,12,0.433,13,0.021,20,0.602,25,0.467,31,0.299,34,0.015,35,0.015,39,1.583,42,2.33,44,1.579,55,1.579,56,1.845,57,1.579,59,1.266,65,0.964,69,3.068,70,2.024,75,2.167,91,1.583,92,1.897,96,2.75,144,2.33,146,1.782,151,4.75,153,3.999,154,3.621,155,1.341,157,2.167,165,1.897,166,1.782,237,3.621,311,4.75,444,5.036,445,3.037,446,5.036,447,4.005,448,4.005,449,5.273,450,3.422,451,4.47,452,5.351,453,4.005,454,4.505,455,3.422,456,3.037,457,3.422,458,4.005,459,3.422]],["title/classes/HttpExceptionFilter.html",[0,0.177,460,2.744]],["body/classes/HttpExceptionFilter.html",[0,0.202,2,0.94,3,0.277,4,0.308,5,0.248,8,0.308,12,0.338,13,0.021,20,0.471,25,0.446,31,0.308,34,0.015,35,0.015,38,3.129,39,2.125,40,5.109,44,1.61,45,4.107,49,3.525,50,4.077,52,4.107,53,4.805,55,1.235,56,1.17,57,1.235,58,4.077,59,1.304,60,2.833,65,0.993,66,2.833,68,2.597,77,2.597,91,2.125,101,3.001,104,2.833,105,3.525,112,3.525,460,4.077,461,4.593,462,5.413,463,3.692,464,4.077,465,4.126,466,4.077,467,4.126,468,3.525,469,3.525,470,3.525,471,3.525,472,4.126]],["title/classes/InviteToRoomDto.html",[0,0.177,253,2.485]],["body/classes/InviteToRoomDto.html",[0,0.286,2,1.072,3,0.317,4,0.351,5,0.283,7,2.23,8,0.351,9,1.19,11,2.666,12,0.48,13,0.021,14,2.064,15,1.123,20,0.668,22,1.407,23,1.861,25,0.351,27,1.953,28,2.064,30,1.335,31,0.351,34,0.017,35,0.017,215,2.739,253,4.016,392,3.402,473,5.434,474,6.361,475,3.233,476,4.022,477,4.016]],["title/classes/JoinRoomDto.html",[0,0.177,259,2.485]],["body/classes/JoinRoomDto.html",[0,0.297,2,1.139,3,0.336,4,0.373,5,0.301,7,2.368,8,0.373,9,1.234,11,2.738,12,0.41,13,0.021,15,0.96,20,0.571,22,1.461,23,1.977,25,0.373,27,2.027,28,2.142,30,1.418,31,0.373,34,0.017,35,0.017,215,2.91,259,4.167,478,5.184]],["title/classes/KickOutOfRoomDto.html",[0,0.177,264,2.485]],["body/classes/KickOutOfRoomDto.html",[0,0.284,2,1.061,3,0.313,4,0.347,5,0.28,7,2.207,8,0.347,9,1.182,11,2.654,12,0.477,13,0.021,14,2.051,15,1.116,20,0.664,22,1.398,23,1.842,25,0.347,27,1.941,28,2.051,30,1.321,31,0.347,34,0.017,35,0.017,128,2.654,215,2.711,264,3.99,392,3.381,475,3.2,476,3.981,477,3.99,479,5.409,480,6.331]],["title/classes/LeaveRoomDto.html",[0,0.177,270,2.485]],["body/classes/LeaveRoomDto.html",[0,0.297,2,1.139,3,0.336,4,0.373,5,0.301,7,2.368,8,0.373,9,1.234,11,2.738,12,0.41,13,0.021,15,0.96,20,0.571,22,1.461,23,1.977,25,0.373,27,2.027,28,2.142,30,1.418,31,0.373,34,0.017,35,0.017,215,2.91,270,4.167,481,5.184]],["title/modules/MessageModule.html",[114,1.61,122,2.105]],["body/modules/MessageModule.html",[0,0.202,3,0.278,4,0.308,5,0.249,13,0.021,25,0.49,31,0.308,34,0.015,35,0.015,65,0.996,114,2.398,116,2.091,117,2.722,122,4.209,126,3.134,127,2.408,128,1.734,130,3.391,172,2.826,359,3.699,363,2.408,431,4.187,482,3.535,483,3.535,484,3.535,485,3.923,486,3.194,487,4.138,488,3.535,489,3.535,490,4.138]],["title/injectables/MessageService.html",[155,0.92,431,2.105]],["body/injectables/MessageService.html",[0,0.123,3,0.169,4,0.187,5,0.151,8,0.187,11,1.051,12,0.447,13,0.022,14,2.321,17,1.267,20,0.622,25,0.406,31,0.187,34,0.011,35,0.011,41,2.55,44,1.133,55,1.632,56,1.545,57,1.632,59,1.936,65,0.603,80,1.722,101,2.901,102,1.578,144,1.802,146,1.684,155,0.962,162,1.116,165,2.405,166,1.116,171,1.901,172,2.402,188,2.382,195,3.334,202,3.171,241,1.793,244,3.851,250,3.196,281,3.196,284,1.901,293,3.196,363,1.459,431,2.202,463,2.599,486,2.818,489,2.142,491,2.142,492,4.558,493,3.784,494,3.784,495,3.784,496,2.507,497,2.507,498,5.45,499,2.507,500,6.124,501,3.784,502,5.078,503,2.507,504,3.784,505,2.507,506,5.232,507,4.656,508,5.078,509,5.078,510,4.338,511,3.784,512,2.507,513,3.233,514,2.142,515,2.507,516,2.507,517,2.142,518,2.507,519,2.599,520,2.507,521,2.507,522,1.901,523,2.507,524,2.507,525,3.784,526,3.784,527,3.784,528,3.784,529,2.507]],["title/classes/MuteRoomDto.html",[0,0.177,530,2.485]],["body/classes/MuteRoomDto.html",[0,0.287,2,1.08,3,0.319,4,0.353,5,0.285,7,2.245,8,0.353,9,1.195,11,2.674,12,0.482,13,0.021,15,1.128,20,0.671,22,1.413,23,1.874,25,0.353,27,1.961,28,2.073,30,1.344,31,0.353,34,0.017,35,0.017,213,3.177,215,2.758,216,4.016,530,4.033,531,5.451,532,4.381,533,4.741]],["title/injectables/ParseIdPipe.html",[155,0.92,534,2.744]],["body/injectables/ParseIdPipe.html",[0,0.227,3,0.312,4,0.346,5,0.279,8,0.346,12,0.381,13,0.021,20,0.53,25,0.346,31,0.346,34,0.017,35,0.017,39,1.836,44,1.736,55,1.39,56,1.317,57,1.39,59,1.468,65,1.118,80,3.189,155,1.474,161,2.2,165,2.2,166,2.067,181,2.2,202,2.702,379,4.167,408,2.513,463,3.189,534,4.397,535,4.953,536,3.968,537,5.798,538,5.798,539,4.644,540,5.798,541,4.644,542,3.522,543,4.644]],["title/injectables/PrismaService.html",[155,0.92,172,1.516]],["body/injectables/PrismaService.html",[0,0.177,3,0.243,4,0.269,5,0.217,8,0.269,12,0.296,13,0.022,20,0.639,25,0.417,31,0.269,34,0.014,35,0.014,39,1.429,44,1.473,48,2.481,55,1.082,56,1.025,57,1.082,59,1.556,65,0.87,71,2.275,72,2.481,79,3.732,100,1.955,144,2.671,146,2.491,155,1.251,162,2.19,166,1.608,172,2.063,451,3.732,544,3.087,545,3.732,546,4.245,547,4.922,548,6.487,549,3.613,550,4.922,551,6.009,552,3.613,553,3.087,554,3.613,555,2.74,556,4.922,557,3.613,558,3.087,559,3.613,560,3.613,561,4.922,562,4.922,563,4.922,564,4.922,565,4.922,566,6.009,567,4.922,568,4.922,569,3.613,570,3.613,571,3.613,572,3.613,573,3.613,574,3.613]],["title/classes/RedisIoAdapter.html",[0,0.177,575,2.744]],["body/classes/RedisIoAdapter.html",[0,0.179,2,0.834,3,0.246,4,0.273,5,0.22,8,0.273,9,1.01,12,0.462,13,0.021,14,1.989,15,0.703,20,0.69,25,0.471,31,0.273,34,0.014,35,0.014,41,2.899,42,3.279,44,1.487,55,1.096,56,1.038,57,1.096,59,1.57,70,2.51,91,2.228,144,2.228,154,3.41,165,1.734,193,2.777,219,3.126,545,3.766,575,3.766,576,3.128,577,5.635,578,5.635,579,4.472,580,6.043,581,4.966,582,4.966,583,3.662,584,3.87,585,3.662,586,3.662,587,4.966,588,6.043,589,6.043,590,3.662,591,3.128,592,3.662,593,3.128,594,2.777,595,3.662,596,3.128,597,3.128,598,3.662,599,3.662,600,4.966,601,3.662,602,3.662,603,3.662,604,3.662,605,3.662]],["title/classes/RemoveFromRoomDto.html",[0,0.177,606,2.485]],["body/classes/RemoveFromRoomDto.html",[0,0.278,2,1.023,3,0.302,4,0.335,5,0.27,7,2.127,8,0.335,9,1.155,10,3.622,11,2.609,12,0.466,13,0.021,14,2.004,15,1.09,16,3.622,17,3.305,18,3.406,19,3.084,20,0.648,21,3.837,22,1.367,23,1.776,24,3.837,25,0.335,26,3.303,27,1.896,28,2.004,29,3.084,30,1.274,31,0.335,32,2.38,33,3.084,34,0.016,35,0.016,606,3.899,607,4.721]],["title/classes/RemoveRoomsDto.html",[0,0.177,608,2.485]],["body/classes/RemoveRoomsDto.html",[0,0.29,2,1.099,3,0.324,4,0.36,5,0.29,8,0.36,9,1.208,12,0.396,13,0.021,15,0.926,17,3,20,0.551,22,1.429,25,0.36,27,1.983,28,2.096,30,1.368,31,0.36,32,2.488,34,0.017,35,0.017,369,2.807,390,3.037,396,3.037,607,4.502,608,4.077,609,5.494,610,4.825,611,4.825,612,4.825,613,4.825]],["title/classes/RespondRoomInvitationDto.html",[0,0.177,275,2.485]],["body/classes/RespondRoomInvitationDto.html",[0,0.285,2,1.068,3,0.315,4,0.35,5,0.282,8,0.35,9,1.187,11,2.662,12,0.479,13,0.021,15,1.12,20,0.666,22,1.404,23,1.855,25,0.35,27,1.949,28,2.06,30,1.33,31,0.35,34,0.017,35,0.017,213,3.157,216,3.998,241,2.242,275,4.007,614,5.426,615,4.009,616,6.351,617,4.692,618,4.692]],["title/controllers/RoomController.html",[619,2.278,620,2.485]],["body/controllers/RoomController.html",[0,0.077,1,2.679,3,0.106,4,0.117,5,0.094,8,0.117,12,0.425,13,0.022,14,1.649,15,0.897,20,0.592,22,1.124,25,0.386,31,0.117,32,0.658,34,0.007,35,0.007,41,2.306,44,0.782,55,1.551,56,1.469,57,1.551,59,1.638,60,1.793,65,0.378,66,4.393,68,0.989,74,0.989,75,0.85,91,1.846,100,1.812,104,4.528,144,2.506,146,0.699,162,2.079,195,3.607,217,1.949,235,5.358,241,2.39,250,2.94,368,1.643,394,0.989,395,2.455,399,3.518,407,1.643,424,2.455,485,1.949,514,1.342,519,3.207,530,2.679,532,1.793,606,2.679,608,2.679,619,0.989,620,1.793,621,0.989,622,1.342,623,1.342,624,3.349,625,3.349,626,3.349,627,3.349,628,3.349,629,3.349,630,1.571,631,2.61,632,1.571,633,2.23,634,5.546,635,4.427,636,1.571,637,2.61,638,1.571,639,2.958,640,4.67,641,1.571,642,2.61,643,1.571,644,1.571,645,2.61,646,1.571,647,1.571,648,3.901,649,1.571,650,3.333,651,2.61,652,5.378,653,1.571,654,4.67,655,1.571,656,2.61,657,1.571,658,2.861,659,1.571,660,1.571,661,2.61,662,1.571,663,4.329,664,1.342,665,4.228,666,1.342,667,1.571,668,1.571,669,1.571,670,1.342,671,1.571,672,2.61,673,1.571,674,3.349,675,2.61,676,3.349,677,1.571,678,3.349,679,1.571,680,2.61,681,1.571,682,1.571,683,1.571,684,3.901,685,1.571,686,2.61,687,3.349,688,1.571,689,1.571,690,1.571,691,1.571,692,2.861,693,2.61,694,1.571,695,2.61,696,3.901,697,1.571,698,1.571,699,1.571,700,1.571,701,1.571,702,1.571,703,1.571,704,1.571]],["title/modules/RoomModule.html",[114,1.61,123,1.958]],["body/modules/RoomModule.html",[0,0.207,3,0.284,4,0.315,5,0.254,13,0.021,25,0.494,31,0.315,34,0.016,35,0.016,65,1.018,114,2.431,116,2.136,117,2.76,121,3.178,123,3.823,126,3.178,127,2.46,128,1.772,130,3.438,131,2.903,172,2.843,359,3.751,363,2.46,485,4.2,620,4.155,621,3.438,670,3.612,705,3.612,706,3.612,707,4.228,708,4.228,709,5.462,710,4.228,711,4.228]],["title/classes/SendPrivateMessageDto.html",[0,0.177,293,2.278]],["body/classes/SendPrivateMessageDto.html",[0,0.284,2,1.061,3,0.313,4,0.347,5,0.28,8,0.347,9,1.182,12,0.477,13,0.021,14,2.051,15,1.116,20,0.664,22,1.398,23,1.842,25,0.347,27,1.941,28,2.051,30,1.321,31,0.347,34,0.017,35,0.017,41,2.818,293,3.657,392,3.381,475,3.2,477,3.99,522,4.801,712,4.801,713,3.534,714,6.331,715,3.981,716,3.981]],["title/classes/SendRoomMessageDto.html",[0,0.177,281,2.278]],["body/classes/SendRoomMessageDto.html",[0,0.285,2,1.065,3,0.314,4,0.349,5,0.281,8,0.349,9,1.185,11,2.658,12,0.478,13,0.021,15,1.118,20,0.665,22,1.597,23,1.849,25,0.349,27,1.945,28,2.238,30,1.326,31,0.349,34,0.017,35,0.017,241,2.238,281,3.665,522,4.809,712,4.809,713,3.546,715,3.995,716,3.995,717,4.676,718,4.676,719,4.676]],["title/injectables/SocketUserIdBindingInterceptor.html",[155,0.92,314,2.485]],["body/injectables/SocketUserIdBindingInterceptor.html",[0,0.177,3,0.244,4,0.27,5,0.218,8,0.27,12,0.404,13,0.021,20,0.563,25,0.484,31,0.27,34,0.014,35,0.014,39,1.432,44,1.476,55,1.476,56,1.398,57,1.476,59,1.145,65,0.872,69,2.869,70,1.831,74,2.281,75,1.96,76,2.281,77,2.281,91,1.949,92,1.716,96,2.488,99,2.748,100,1.96,101,1.716,144,2.216,146,1.612,151,4.562,153,3.739,154,3.386,155,1.254,157,1.96,161,2.654,162,1.612,165,1.716,166,1.612,181,2.654,197,3.095,207,3.095,209,3.095,314,3.386,408,1.96,445,2.748,446,4.788,450,3.095,451,4.25,452,5.14,454,4.212,455,3.095,456,2.748,457,3.095,459,3.095,486,3.075,720,4.788,721,3.623,722,3.623,723,3.623,724,3.623,725,4.788,726,3.623,727,3.623,728,3.623,729,3.623,730,3.623,731,3.623,732,3.623]],["title/classes/TransferOwnershipDto.html",[0,0.177,286,2.485]],["body/classes/TransferOwnershipDto.html",[0,0.286,2,1.072,3,0.317,4,0.351,5,0.283,8,0.351,9,1.19,11,2.666,12,0.48,13,0.021,14,2.064,15,1.123,20,0.668,22,1.407,23,1.861,25,0.351,27,1.953,28,2.064,30,1.335,31,0.351,34,0.017,35,0.017,286,4.016,392,3.402,475,3.233,477,4.016,733,5.434,734,4.022,735,6.361,736,4.708,737,4.708]],["title/controllers/UserController.html",[619,2.278,738,2.485]],["body/controllers/UserController.html",[0,0.194,3,0.266,4,0.295,5,0.238,8,0.295,12,0.325,13,0.021,15,0.76,20,0.452,25,0.465,31,0.295,34,0.015,35,0.015,44,1.566,55,1.185,56,1.122,57,1.185,59,1.252,65,0.953,66,4.282,67,5.327,68,2.492,91,1.565,104,4.282,106,4.445,141,2.718,144,2.317,157,2.142,161,2.478,162,1.762,195,3.044,486,2.776,519,2.718,619,2.492,621,2.492,623,3.382,665,4.47,692,3.382,738,3.593,739,3.382,740,3.002,741,5.007,742,3.959,743,5.232,744,3.959,745,3.968,746,3.968,747,5.232,748,5.232,749,3.959,750,3.959,751,3.382,752,3.959,753,3.959,754,4.47,755,3.959]],["title/modules/UserModule.html",[114,1.61,124,2.105]],["body/modules/UserModule.html",[0,0.195,3,0.268,4,0.298,5,0.24,13,0.021,25,0.498,31,0.298,34,0.015,35,0.015,65,0.961,114,2.342,116,2.018,117,2.659,123,3.613,124,4.188,126,3.062,127,2.323,128,1.674,130,3.313,131,3.614,148,3.613,172,2.799,359,3.614,361,3.412,362,3.412,363,2.323,486,3.39,621,3.313,738,4.042,751,3.412,756,3.412,757,3.993,758,3.993,759,3.412,760,3.993,761,3.993]],["title/injectables/UserService.html",[155,0.92,486,1.714]],["body/injectables/UserService.html",[0,0.062,3,0.085,4,0.094,5,0.076,8,0.094,9,0.442,12,0.455,13,0.022,14,2.246,15,0.243,20,0.633,22,1.186,25,0.333,31,0.094,32,0.53,34,0.006,35,0.006,41,1.701,42,1.663,44,0.651,55,1.621,56,1.535,57,1.621,59,1.963,65,0.305,69,3.404,75,0.685,91,2.277,102,3.319,144,2.642,146,0.968,155,0.553,161,3.231,162,2.642,165,2.679,166,0.563,171,0.96,172,1.748,181,3.123,188,0.797,193,0.96,195,3.225,205,1.081,206,3.264,208,1.649,241,0.768,273,1.493,363,0.736,399,1.836,408,1.176,466,2.573,485,2.598,486,1.03,488,1.081,517,2.898,519,1.493,542,1.649,555,0.96,579,2.865,584,1.963,594,0.96,609,2.898,725,5.137,740,1.649,741,1.858,745,1.649,746,3.164,754,1.858,762,1.081,763,2.175,764,2.175,765,2.175,766,2.175,767,2.175,768,2.175,769,2.175,770,2.175,771,2.175,772,2.175,773,2.175,774,4.172,775,1.266,776,2.175,777,2.175,778,3.393,779,2.175,780,5.272,781,1.266,782,3.393,783,2.898,784,2.175,785,2.175,786,3.393,787,2.175,788,1.266,789,2.175,790,1.858,791,3.393,792,1.858,793,2.175,794,1.266,795,2.175,796,1.266,797,2.175,798,1.266,799,4.172,800,2.175,801,1.266,802,2.175,803,1.266,804,2.175,805,1.266,806,2.175,807,1.266,808,2.175,809,1.266,810,2.175,811,1.081,812,1.081,813,2.175,814,1.266,815,1.266,816,1.266,817,1.266,818,1.266,819,1.266,820,2.175,821,1.266,822,2.175,823,1.266,824,1.266,825,0.96,826,1.266,827,2.175,828,1.266,829,2.175,830,3.393,831,2.175,832,3.393,833,2.859,834,1.266,835,2.175,836,1.266,837,1.266,838,2.175,839,1.266,840,2.175,841,1.266,842,3.393,843,1.266,844,2.175,845,2.859,846,2.175,847,2.175,848,1.266,849,1.266,850,1.858,851,2.175,852,1.266,853,2.175,854,1.266,855,1.266,856,1.266,857,1.266]],["title/classes/WsExceptionsFilter.html",[0,0.177,312,2.485]],["body/classes/WsExceptionsFilter.html",[0,0.195,2,0.909,3,0.268,4,0.298,5,0.24,8,0.298,12,0.328,13,0.021,20,0.456,25,0.485,31,0.298,34,0.015,35,0.015,44,1.576,45,4.042,50,3.991,52,4.042,53,4.745,55,1.196,56,1.132,57,1.196,58,3.991,59,1.263,60,2.742,65,0.961,69,3.062,70,2.018,74,2.514,75,2.16,76,2.514,77,2.514,91,1.579,92,1.891,93,3.412,96,2.742,99,3.028,100,2.16,101,3.08,103,3.705,308,3.028,312,3.614,462,4.496,463,3.614,464,3.991,468,3.412,469,3.412,470,3.412,471,3.412,545,3.991,858,4.496,859,3.412,860,5.886,861,3.993,862,3.993,863,3.993]],["title/coverage.html",[864,4.208]],["body/coverage.html",[0,0.34,1,1.615,5,0.141,6,2.009,7,2.843,12,0.193,13,0.021,34,0.01,35,0.01,36,1.615,37,2.009,38,2.734,41,1.047,43,1.784,48,1.615,56,0.667,71,1.48,92,1.707,125,1.48,128,0.986,140,1.784,141,1.615,143,2.009,148,1.272,155,1.625,161,1.114,167,2.009,172,0.986,181,1.114,189,1.784,202,1.368,210,1.615,211,2.009,217,1.368,218,2.009,232,1.615,237,1.615,241,1.273,253,1.615,259,1.615,264,1.615,270,1.615,275,1.615,281,1.48,286,1.615,293,1.48,309,1.784,310,1.784,312,1.615,314,1.615,366,1.615,367,3.093,368,2.269,369,3.083,395,1.48,406,1.615,407,2.269,408,3.959,424,1.48,427,2.009,431,1.368,444,2.009,445,2.734,460,1.784,461,2.009,473,2.009,478,2.009,479,2.009,481,2.009,485,1.368,486,1.114,491,2.009,530,1.615,531,2.009,534,1.784,535,2.009,536,2.009,544,2.009,575,1.784,576,2.009,584,1.615,606,1.615,607,2.734,608,1.615,614,2.009,615,2.009,619,2.269,620,1.615,622,2.009,712,2.734,713,2.734,720,2.009,733,2.009,734,2.009,738,1.615,739,2.009,762,2.009,858,2.009,859,2.009,864,2.009,865,2.009,866,2.352,867,2.352,868,2.734,869,5.298,870,2.009,871,6.696,872,6.282,873,2.009,874,2.009,875,2.009,876,2.009,877,2.009,878,2.009,879,2.009,880,3.605,881,2.009,882,2.009,883,3.08,884,3.08,885,6.003,886,6.563,887,2.352,888,2.352,889,3.605,890,2.009,891,2.009,892,2.009,893,2.009,894,2.009,895,2.009,896,2.009,897,3.605,898,3.605,899,2.352,900,2.352,901,2.352,902,2.352,903,2.352,904,3.605,905,2.352,906,2.352,907,2.352,908,2.352,909,2.352,910,2.352,911,2.352,912,2.352,913,2.352]],["title/dependencies.html",[117,2.197,914,2.586]],["body/dependencies.html",[0,0.276,13,0.021,30,1.261,34,0.016,35,0.016,65,1.071,68,3.552,70,2.851,78,3.8,117,2.248,133,3.373,178,3.373,308,3.373,389,2.8,456,3.373,513,3.8,555,3.373,593,4.821,594,3.373,596,3.8,597,3.8,915,6.197,916,4.448,917,6.197,918,4.448,919,5.643,920,5.643,921,4.448,922,4.448,923,4.448,924,4.448,925,4.448,926,4.448,927,4.448,928,3.8,929,4.448,930,4.448,931,4.448,932,4.448,933,4.448,934,4.448,935,4.448,936,4.448]],["title/miscellaneous/enumerations.html",[937,1.53,938,3.715]],["body/miscellaneous/enumerations.html",[8,0.253,13,0.021,34,0.013,35,0.013,74,2.965,103,2.965,208,3.572,230,2.896,241,1.663,250,2.134,256,2.57,262,2.57,267,2.57,273,2.328,311,3.572,379,4.675,510,2.896,532,2.328,639,2.57,666,4.024,783,2.896,790,2.896,811,4.024,812,4.024,825,4.105,937,1.713,938,2.896,939,3.389,940,4.024,941,3.389,942,3.389,943,5.412,944,4.71,945,3.389,946,3.389,947,3.389,948,4.024,949,3.389,950,4.024,951,4.71,952,3.389,953,3.389,954,3.389,955,3.389,956,3.389,957,3.389,958,3.389,959,3.389,960,4.71,961,3.389,962,3.389,963,3.389,964,3.389,965,3.389,966,3.389,967,3.389,968,3.389,969,3.389,970,3.389,971,3.389,972,3.389,973,3.389,974,3.389,975,3.389,976,3.389,977,3.389,978,3.389,979,3.389,980,3.389,981,3.389,982,3.389,983,3.389,984,3.389,985,3.389,986,3.389,987,3.389,988,3.389,989,3.389,990,3.389,991,2.896,992,3.389,993,3.389,994,3.389,995,3.389,996,3.389,997,3.389,998,3.389]],["title/miscellaneous/functions.html",[937,1.53,999,3.715]],["body/miscellaneous/functions.html",[8,0.351,12,0.522,13,0.02,34,0.017,35,0.017,55,1.904,56,1.804,57,1.904,92,3.012,546,5.288,868,3.571,870,5.434,873,4.022,874,4.996,875,4.996,876,4.022,877,4.996,878,4.022,879,4.996,895,4.022,896,5.434,937,2.379,999,4.022,1000,4.708,1001,4.022,1002,4.708,1003,4.708,1004,4.708,1005,4.708,1006,4.708,1007,4.708]],["title/index.html",[8,0.226,1008,2.586,1009,2.586]],["body/index.html",[5,0.19,13,0.019,34,0.013,35,0.013,41,1.411,70,1.602,92,1.501,100,1.715,101,2.689,128,1.328,161,2.839,178,3.407,179,3.838,219,2.828,240,2.708,241,2.486,244,2.404,245,2.708,250,3.286,256,2.404,262,2.404,267,2.404,273,2.176,278,2.708,279,2.708,284,3.407,289,2.708,290,2.708,368,3.286,399,2.431,407,1.995,466,2.404,506,2.708,507,3.838,532,2.176,553,3.838,579,3.085,633,3.838,635,3.838,639,3.407,650,2.708,658,2.708,740,2.404,745,4.307,746,2.404,792,2.708,850,3.838,928,4.459,950,2.708,1010,2.404,1011,4.493,1012,2.708,1013,3.17,1014,3.17,1015,4.493,1016,3.17,1017,2.708,1018,3.17,1019,3.17,1020,3.17,1021,3.17,1022,3.17,1023,3.17,1024,3.17,1025,3.17,1026,3.17,1027,3.17,1028,3.17,1029,3.17,1030,4.493,1031,3.17,1032,3.17,1033,5.679,1034,3.17,1035,3.17,1036,3.17,1037,3.17,1038,4.493,1039,3.17,1040,3.17,1041,3.17,1042,3.17,1043,3.17,1044,6.542,1045,5.995,1046,3.17,1047,3.17,1048,3.17,1049,3.17,1050,3.17,1051,5.22,1052,3.17,1053,3.17,1054,3.17,1055,3.17,1056,3.17,1057,3.17,1058,3.17,1059,3.17,1060,3.17,1061,2.404,1062,3.17,1063,3.17,1064,3.17,1065,3.17,1066,2.708,1067,4.493,1068,4.493,1069,4.493,1070,4.493,1071,3.17,1072,4.493,1073,4.493,1074,3.17,1075,3.17,1076,3.17,1077,3.17,1078,2.708,1079,2.404,1080,2.708,1081,2.708,1082,2.708,1083,2.708]],["title/license.html",[1008,2.586,1009,2.586,1079,2.296]],["body/license.html",[13,0.015,34,0.015,35,0.015,100,2.239,128,1.734,182,3.535,247,3.535,865,3.535,1078,3.535,1079,3.138,1080,5.117,1083,3.535,1084,4.138,1085,4.138,1086,4.138,1087,4.138,1088,5.387,1089,4.138,1090,4.138,1091,4.138,1092,4.138,1093,4.138,1094,4.138,1095,5.387,1096,7.039,1097,4.138,1098,4.138,1099,4.138,1100,5.989,1101,4.138,1102,5.387,1103,4.138,1104,4.138,1105,5.387,1106,4.138,1107,4.138,1108,4.138,1109,4.138,1110,4.138,1111,4.138,1112,4.138,1113,5.387,1114,4.138,1115,4.138,1116,4.138,1117,4.138,1118,4.138,1119,4.138,1120,4.138,1121,5.387,1122,5.387,1123,4.138,1124,4.138,1125,4.138,1126,4.138,1127,4.138,1128,4.138,1129,4.138,1130,4.138,1131,4.138,1132,4.138,1133,4.138,1134,4.138,1135,4.138,1136,4.138,1137,4.138,1138,4.138,1139,4.138,1140,4.138,1141,4.138,1142,4.138,1143,4.138,1144,4.138,1145,4.138,1146,4.138,1147,4.138,1148,4.138,1149,4.138]],["title/modules.html",[116,2.489]],["body/modules.html",[13,0.018,34,0.018,35,0.018,115,3.578,116,2.633,121,3.032,122,3.032,123,2.819,124,3.032,1150,7.038,1151,7.038,1152,7.038,1153,7.038]],["title/overview.html",[1010,3.736]],["body/overview.html",[2,0.77,13,0.021,34,0.013,35,0.013,115,4.786,116,1.709,117,2.376,118,2.889,119,2.889,120,2.889,121,4.19,122,4.086,123,3.7,124,4.086,125,3.402,126,2.736,127,1.967,128,1.417,140,2.564,148,3.161,166,1.505,172,2.664,217,3.794,232,3.712,354,2.889,356,2.889,357,2.889,431,3.794,482,2.889,483,2.889,484,2.889,485,3.869,486,3.149,621,2.128,705,2.889,706,2.889,756,2.889,759,2.889,825,2.564,948,2.889,991,2.889,1010,2.564,1154,3.381,1155,3.381]],["title/properties.html",[9,0.885,914,2.586]],["body/properties.html",[9,1.111,13,0.02,34,0.018,35,0.018,188,3.437,219,3.437,1012,4.665,1017,4.665,1061,4.141,1081,4.665,1082,4.665,1156,5.46,1157,5.46,1158,5.46]],["title/miscellaneous/typealiases.html",[937,1.53,1159,4.348]],["body/miscellaneous/typealiases.html",[8,0.339,12,0.592,13,0.018,22,1.378,34,0.016,35,0.016,51,4.891,76,3.604,241,2.021,464,4.342,937,2.3,1160,4.552,1161,7.018,1162,6.573,1163,5.725,1164,5.725,1165,5.725,1166,5.725,1167,5.725,1168,4.552,1169,5.725,1170,5.725,1171,5.725,1172,4.552,1173,7.161,1174,4.552,1175,4.552]],["title/miscellaneous/variables.html",[937,1.53,1176,3.715]],["body/miscellaneous/variables.html",[3,0.195,8,0.216,12,0.238,13,0.022,22,1.195,32,2.285,34,0.012,35,0.012,43,3.767,44,0.868,48,2.895,52,1.992,71,2.654,79,2.2,91,1.147,92,2.743,102,3.126,103,1.826,165,1.374,189,3.197,202,3.37,219,1.826,309,3.197,310,3.197,378,5.018,379,4.165,380,1.826,408,1.569,542,3.767,546,2.2,558,4.658,579,2.895,584,2.895,591,3.602,664,2.478,868,2.2,881,2.478,882,3.602,883,2.478,884,2.478,890,2.478,891,2.478,892,2.478,893,3.602,894,2.478,937,1.466,940,2.478,1001,2.478,1061,2.2,1066,2.478,1176,2.478,1177,2.901,1178,4.216,1179,2.901,1180,2.901,1181,4.216,1182,2.901,1183,2.901,1184,4.967,1185,4.967,1186,2.901,1187,2.901,1188,2.901,1189,2.901,1190,4.216,1191,2.901,1192,2.901,1193,4.967,1194,4.967,1195,4.967,1196,4.967,1197,2.901,1198,2.901,1199,2.901,1200,2.901,1201,2.901,1202,2.901,1203,2.901,1204,2.901,1205,2.901,1206,2.901,1207,2.901,1208,2.901,1209,2.901,1210,2.901,1211,4.967,1212,4.967,1213,2.901,1214,2.901,1215,2.901,1216,2.901,1217,2.901,1218,4.216,1219,4.216,1220,2.901,1221,2.901,1222,2.901,1223,2.901,1224,2.901,1225,2.901,1226,2.901,1227,2.901,1228,2.901]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"injectables/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/MuteRoomDto.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":408,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/ParseIdPipe.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1157,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":871,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":885,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":886,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":889,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":880,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":825,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["1/2",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":542,"title":{},"body":{"injectables/ParseIdPipe.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["11",{"_index":1154,"title":{},"body":{"overview.html":{}}}],["11.0.1",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["11/14",{"_index":898,"title":{},"body":{"coverage.html":{}}}],["14/16",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["19/22",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":948,"title":{},"body":{"miscellaneous/enumerations.html":{},"overview.html":{}}}],["2.1.0",{"_index":918,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["2/5",{"_index":888,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":1083,"title":{},"body":{"index.html":{},"license.html":{}}}],["21",{"_index":1155,"title":{},"body":{"overview.html":{}}}],["3",{"_index":988,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3.0.2",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["3.8.2",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":990,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["4.3.1",{"_index":919,"title":{},"body":{"dependencies.html":{}}}],["4.5.2",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["4.5.3",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["4/6",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":887,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":991,"title":{},"body":{"miscellaneous/enumerations.html":{},"overview.html":{}}}],["5.2.3",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":910,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":113,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["6",{"_index":992,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["6379",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["66",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":993,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["7.2.0",{"_index":920,"title":{},"body":{"dependencies.html":{}}}],["7/9",{"_index":906,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":905,"title":{},"body":{"coverage.html":{}}}],["78",{"_index":897,"title":{},"body":{"coverage.html":{}}}],["86",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":915,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":917,"title":{},"body":{"dependencies.html":{}}}],["above",{"_index":1120,"title":{},"body":{"license.html":{}}}],["acceptedfriends",{"_index":829,"title":{},"body":{"injectables/UserService.html":{}}}],["acceptorid",{"_index":830,"title":{},"body":{"injectables/UserService.html":{}}}],["access",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":1144,"title":{},"body":{"license.html":{}}}],["activestatus",{"_index":811,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["activestatus.online",{"_index":843,"title":{},"body":{"injectables/UserService.html":{}}}],["actorids",{"_index":678,"title":{},"body":{"controllers/RoomController.html":{}}}],["adapter",{"_index":597,"title":{},"body":{"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["adapterconstructor",{"_index":578,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["add",{"_index":633,"title":{},"body":{"controllers/RoomController.html":{},"index.html":{}}}],["addmembers",{"_index":624,"title":{},"body":{"controllers/RoomController.html":{}}}],["addmembers(payload",{"_index":630,"title":{},"body":{"controllers/RoomController.html":{}}}],["addtoroomdto",{"_index":1,"title":{"classes/AddToRoomDto.html":{}},"body":{"classes/AddToRoomDto.html":{},"controllers/RoomController.html":{},"coverage.html":{}}}],["admin",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["admin/auth",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminer",{"_index":1043,"title":{},"body":{"index.html":{}}}],["again",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["aliases",{"_index":1160,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allexceptionfilter",{"_index":36,"title":{"classes/AllExceptionFilter.html":{}},"body":{"classes/AllExceptionFilter.html":{},"injectables/CommunicationGateway.html":{},"coverage.html":{}}}],["and/or",{"_index":1111,"title":{},"body":{"license.html":{}}}],["another",{"_index":291,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["anywhere",{"_index":1025,"title":{},"body":{"index.html":{}}}],["api",{"_index":1033,"title":{},"body":{"index.html":{}}}],["app",{"_index":553,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":574,"title":{},"body":{"injectables/PrismaService.html":{}}}],["appconfig",{"_index":71,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/CronService.html":{},"injectables/PrismaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appconfig.debug",{"_index":79,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["appconfig.messagemanagment.private.maxold",{"_index":440,"title":{},"body":{"injectables/CronService.html":{}}}],["appconfig.messagemanagment.room.maxold",{"_index":443,"title":{},"body":{"injectables/CronService.html":{}}}],["appenv",{"_index":940,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["appenv.development",{"_index":1189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":1053,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":115,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["architecture",{"_index":1047,"title":{},"body":{"index.html":{}}}],["archived",{"_index":1024,"title":{},"body":{"index.html":{}}}],["arefriends",{"_index":763,"title":{},"body":{"injectables/UserService.html":{}}}],["arefriends(stuserid",{"_index":773,"title":{},"body":{"injectables/UserService.html":{}}}],["argumentshost",{"_index":53,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["arising",{"_index":1148,"title":{},"body":{"license.html":{}}}],["arrayminsize",{"_index":390,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/RemoveRoomsDto.html":{}}}],["arrayminsize(1",{"_index":396,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/RemoveRoomsDto.html":{}}}],["arrayunique",{"_index":26,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/RemoveFromRoomDto.html":{}}}],["arrayunique((value",{"_index":397,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{}}}],["associated",{"_index":1097,"title":{},"body":{"license.html":{}}}],["async",{"_index":144,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"controllers/RoomController.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.decorator.ts",{"_index":882,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["authentication",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["authguard",{"_index":141,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["author",{"_index":1158,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1137,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":148,"title":{"injectables/AuthService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"modules/CommunicationModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["automatically",{"_index":1034,"title":{},"body":{"index.html":{}}}],["await",{"_index":162,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/CronService.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["badrequestexception",{"_index":463,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"classes/WsExceptionsFilter.html":{}}}],["badrequestexception('invalid",{"_index":543,"title":{},"body":{"injectables/ParseIdPipe.html":{}}}],["basewsexceptionfilter",{"_index":860,"title":{},"body":{"classes/WsExceptionsFilter.html":{}}}],["basic",{"_index":1013,"title":{},"body":{"index.html":{}}}],["before",{"_index":246,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["bind",{"_index":784,"title":{},"body":{"injectables/UserService.html":{}}}],["binding.interceptor.ts",{"_index":445,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"coverage.html":{}}}],["binding.interceptor.ts:12",{"_index":448,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{}}}],["binding.interceptor.ts:14",{"_index":722,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["binding.interceptor.ts:15",{"_index":453,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{}}}],["binding.interceptor.ts:17",{"_index":723,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["body",{"_index":663,"title":{},"body":{"controllers/RoomController.html":{}}}],["book",{"_index":240,"title":{},"body":{"injectables/CommunicationGateway.html":{},"index.html":{}}}],["book_room",{"_index":975,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bookroom",{"_index":974,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bookroomdto",{"_index":210,"title":{"classes/BookRoomDto.html":{}},"body":{"classes/BookRoomDto.html":{},"injectables/CommunicationGateway.html":{},"coverage.html":{}}}],["boolean",{"_index":213,"title":{},"body":{"classes/BookRoomDto.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/MuteRoomDto.html":{},"classes/RespondRoomInvitationDto.html":{}}}],["bootstrap",{"_index":896,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["break",{"_index":86,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["browse",{"_index":1153,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1150,"title":{},"body":{"modules.html":{}}}],["busy",{"_index":947,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["c",{"_index":1084,"title":{},"body":{"license.html":{}}}],["cachenamespace",{"_index":812,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["cachenamespace.uid2rids}${userid",{"_index":824,"title":{},"body":{"injectables/UserService.html":{}}}],["cachenamespace.uid2sid}${uid",{"_index":819,"title":{},"body":{"injectables/UserService.html":{}}}],["callhandler",{"_index":452,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["canactivate",{"_index":145,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{}}}],["candidateid",{"_index":735,"title":{},"body":{"classes/TransferOwnershipDto.html":{}}}],["case",{"_index":83,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["catch",{"_index":45,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["catch(exception",{"_index":50,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["catch(httpexception",{"_index":465,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(wsexception",{"_index":863,"title":{},"body":{"classes/WsExceptionsFilter.html":{}}}],["cd",{"_index":1060,"title":{},"body":{"index.html":{}}}],["change",{"_index":782,"title":{},"body":{"injectables/UserService.html":{}}}],["changes",{"_index":1030,"title":{},"body":{"index.html":{}}}],["charge",{"_index":1092,"title":{},"body":{"license.html":{}}}],["chat",{"_index":1020,"title":{},"body":{"index.html":{}}}],["check",{"_index":776,"title":{},"body":{"injectables/UserService.html":{}}}],["claim",{"_index":1140,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"classes/BookRoomDto.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/MuteRoomDto.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"classes/TransferOwnershipDto.html":{},"classes/WsExceptionsFilter.html":{}},"body":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"injectables/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/MuteRoomDto.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"classes/BookRoomDto.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/MuteRoomDto.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"classes/TransferOwnershipDto.html":{},"classes/WsExceptionsFilter.html":{},"overview.html":{}}}],["clearprivatemessage",{"_index":428,"title":{},"body":{"injectables/CronService.html":{}}}],["clearroommessage",{"_index":429,"title":{},"body":{"injectables/CronService.html":{}}}],["client",{"_index":92,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/CommunicationGateway.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["client.disconnect",{"_index":732,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["client.emit(emitevent.error",{"_index":99,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{}}}],["client.eventname",{"_index":96,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{}}}],["client.userid",{"_index":727,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["clone",{"_index":1056,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_communicationmodule",{"_index":354,"title":{},"body":{"modules/CommunicationModule.html":{},"overview.html":{}}}],["cluster_communicationmodule_exports",{"_index":356,"title":{},"body":{"modules/CommunicationModule.html":{},"overview.html":{}}}],["cluster_communicationmodule_imports",{"_index":355,"title":{},"body":{"modules/CommunicationModule.html":{}}}],["cluster_communicationmodule_providers",{"_index":357,"title":{},"body":{"modules/CommunicationModule.html":{},"overview.html":{}}}],["cluster_messagemodule",{"_index":482,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_messagemodule_exports",{"_index":483,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_messagemodule_providers",{"_index":484,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_roommodule",{"_index":705,"title":{},"body":{"modules/RoomModule.html":{},"overview.html":{}}}],["cluster_roommodule_exports",{"_index":706,"title":{},"body":{"modules/RoomModule.html":{},"overview.html":{}}}],["cluster_roommodule_providers",{"_index":707,"title":{},"body":{"modules/RoomModule.html":{}}}],["cluster_usermodule",{"_index":756,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":759,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":757,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":758,"title":{},"body":{"modules/UserModule.html":{}}}],["commander",{"_index":1041,"title":{},"body":{"index.html":{}}}],["comment",{"_index":567,"title":{},"body":{"injectables/PrismaService.html":{}}}],["common/service/cron.service",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["communicate",{"_index":1016,"title":{},"body":{"index.html":{}}}],["communication",{"_index":1061,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["communication.gateway",{"_index":365,"title":{},"body":{"modules/CommunicationModule.html":{}}}],["communication.service",{"_index":317,"title":{},"body":{"injectables/CommunicationGateway.html":{},"modules/CommunicationModule.html":{}}}],["communication/communication.gateway",{"_index":667,"title":{},"body":{"controllers/RoomController.html":{}}}],["communication/communication.module",{"_index":710,"title":{},"body":{"modules/RoomModule.html":{}}}],["communicationgateway",{"_index":217,"title":{"injectables/CommunicationGateway.html":{}},"body":{"injectables/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"controllers/RoomController.html":{},"coverage.html":{},"overview.html":{}}}],["communicationmodule",{"_index":121,"title":{"modules/CommunicationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/RoomModule.html":{},"modules.html":{},"overview.html":{}}}],["communicationservice",{"_index":232,"title":{},"body":{"injectables/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"coverage.html":{},"overview.html":{}}}],["compose",{"_index":1045,"title":{},"body":{"index.html":{}}}],["compose.demo.yml",{"_index":1073,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1119,"title":{},"body":{"license.html":{}}}],["connect",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["connect(user",{"_index":779,"title":{},"body":{"injectables/UserService.html":{}}}],["connected",{"_index":1023,"title":{},"body":{"index.html":{}}}],["connectedsocket",{"_index":301,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["connection",{"_index":247,"title":{},"body":{"injectables/CommunicationGateway.html":{},"license.html":{}}}],["connecttoredis",{"_index":580,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["conntected",{"_index":785,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`${e.query",{"_index":571,"title":{},"body":{"injectables/PrismaService.html":{}}}],["const",{"_index":91,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"controllers/RoomController.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":146,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(communicationservice",{"_index":231,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["constructor(eventname",{"_index":447,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{}}}],["constructor(messageservice",{"_index":430,"title":{},"body":{"injectables/CronService.html":{}}}],["constructor(prismaservice",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{}}}],["constructor(userservice",{"_index":721,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["contained",{"_index":418,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["content",{"_index":522,"title":{},"body":{"injectables/MessageService.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{}}}],["context",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":158,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtows().getclient",{"_index":457,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["contract",{"_index":1145,"title":{},"body":{"license.html":{}}}],["controller",{"_index":619,"title":{"controllers/RoomController.html":{},"controllers/UserController.html":{}},"body":{"controllers/RoomController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('rooms",{"_index":671,"title":{},"body":{"controllers/RoomController.html":{}}}],["controller('users",{"_index":752,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":621,"title":{},"body":{"controllers/RoomController.html":{},"modules/RoomModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["copies",{"_index":1113,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1095,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1080,"title":{},"body":{"index.html":{},"license.html":{}}}],["corresponding",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["cors",{"_index":323,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["corsconfig",{"_index":309,"title":{},"body":{"injectables/CommunicationGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["corsoptions",{"_index":1197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":864,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":1062,"title":{},"body":{"index.html":{}}}],["create",{"_index":639,"title":{},"body":{"controllers/RoomController.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["createadapter",{"_index":595,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createadapter(pubclient",{"_index":603,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createdat",{"_index":525,"title":{},"body":{"injectables/MessageService.html":{}}}],["createioserver",{"_index":581,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createioserver(port",{"_index":587,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createlogger",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpersistently",{"_index":625,"title":{},"body":{"controllers/RoomController.html":{}}}],["createpersistently(payload",{"_index":636,"title":{},"body":{"controllers/RoomController.html":{}}}],["createpersistentroomdto",{"_index":366,"title":{"classes/CreatePersistentRoomDto.html":{}},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"coverage.html":{}}}],["createpersistentroomsdto",{"_index":395,"title":{"classes/CreatePersistentRoomsDto.html":{}},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"controllers/RoomController.html":{},"coverage.html":{}}}],["createprivatemessage",{"_index":492,"title":{},"body":{"injectables/MessageService.html":{}}}],["createprivatemessage(senderid",{"_index":497,"title":{},"body":{"injectables/MessageService.html":{}}}],["createroomdto",{"_index":406,"title":{"classes/CreateRoomDto.html":{}},"body":{"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"coverage.html":{}}}],["createroommessage",{"_index":493,"title":{},"body":{"injectables/MessageService.html":{}}}],["createroommessage(senderid",{"_index":501,"title":{},"body":{"injectables/MessageService.html":{}}}],["createtemporarily",{"_index":626,"title":{},"body":{"controllers/RoomController.html":{}}}],["createtemporarily(payload",{"_index":641,"title":{},"body":{"controllers/RoomController.html":{}}}],["createtemporaryroomsdto",{"_index":424,"title":{"classes/CreateTemporaryRoomsDto.html":{}},"body":{"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"controllers/RoomController.html":{},"coverage.html":{}}}],["credentials",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cron",{"_index":436,"title":{},"body":{"injectables/CronService.html":{}}}],["cron(appconfig.messagemanagment.private.crontime",{"_index":438,"title":{},"body":{"injectables/CronService.html":{}}}],["cron(appconfig.messagemanagment.room.crontime",{"_index":441,"title":{},"body":{"injectables/CronService.html":{}}}],["cron(undefined.crontime",{"_index":433,"title":{},"body":{"injectables/CronService.html":{}}}],["cronservice",{"_index":125,"title":{"injectables/CronService.html":{}},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"coverage.html":{},"overview.html":{}}}],["d",{"_index":1068,"title":{},"body":{"index.html":{}}}],["damages",{"_index":1141,"title":{},"body":{"license.html":{}}}],["data",{"_index":519,"title":{},"body":{"injectables/MessageService.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["database",{"_index":1048,"title":{},"body":{"index.html":{}}}],["day",{"_index":997,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["deal",{"_index":1099,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1149,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decodedtoken",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodedtoken.uid",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":15,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"injectables/CommunicationGateway.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/CronService.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/MuteRoomDto.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"controllers/RoomController.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["default",{"_index":378,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreateRoomDto.html":{},"miscellaneous/variables.html":{}}}],["defaultmeta",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":20,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"injectables/CommunicationGateway.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"injectables/MessageService.html":{},"classes/MuteRoomDto.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"controllers/RoomController.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{}}}],["del(`${cachenamespace.sid2uid}${sid",{"_index":855,"title":{},"body":{"injectables/UserService.html":{}}}],["del(`${cachenamespace.uid2sid}${user.id",{"_index":856,"title":{},"body":{"injectables/UserService.html":{}}}],["delete",{"_index":658,"title":{},"body":{"controllers/RoomController.html":{},"index.html":{}}}],["delete('members",{"_index":661,"title":{},"body":{"controllers/RoomController.html":{}}}],["dependencies",{"_index":117,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploylicense",{"_index":1074,"title":{},"body":{"index.html":{}}}],["description",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["design",{"_index":1049,"title":{},"body":{"index.html":{}}}],["details",{"_index":1046,"title":{},"body":{"index.html":{}}}],["devdemo",{"_index":1071,"title":{},"body":{"index.html":{}}}],["development",{"_index":950,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["differences",{"_index":1018,"title":{},"body":{"index.html":{}}}],["disable",{"_index":562,"title":{},"body":{"injectables/PrismaService.html":{}}}],["disconnect",{"_index":764,"title":{},"body":{"injectables/UserService.html":{}}}],["disconnect(user",{"_index":787,"title":{},"body":{"injectables/UserService.html":{}}}],["disconnectedid",{"_index":857,"title":{},"body":{"injectables/UserService.html":{}}}],["disconnection",{"_index":251,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["distribute",{"_index":1109,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":1076,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1044,"title":{},"body":{"index.html":{}}}],["documentaions",{"_index":1050,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":865,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["driven",{"_index":1052,"title":{},"body":{"index.html":{}}}],["dto",{"_index":514,"title":{},"body":{"injectables/MessageService.html":{},"controllers/RoomController.html":{}}}],["dto.memberids?.includes(v",{"_index":423,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["dto/mute",{"_index":668,"title":{},"body":{"controllers/RoomController.html":{}}}],["e",{"_index":570,"title":{},"body":{"injectables/PrismaService.html":{}}}],["e.params",{"_index":572,"title":{},"body":{"injectables/PrismaService.html":{}}}],["each",{"_index":17,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/MessageService.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{}}}],["emit",{"_index":557,"title":{},"body":{"injectables/PrismaService.html":{}}}],["emit(emitevent.receiveroomchanges",{"_index":676,"title":{},"body":{"controllers/RoomController.html":{}}}],["emitevent",{"_index":74,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/RoomController.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/enumerations.html":{}}}],["emitevents",{"_index":76,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/CommunicationGateway.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/typealiases.html":{}}}],["enable",{"_index":1026,"title":{},"body":{"index.html":{}}}],["enabledebugmessages",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enableshutdownhooks",{"_index":547,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":550,"title":{},"body":{"injectables/PrismaService.html":{}}}],["entered",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["enumerations",{"_index":938,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":1066,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["env.app_debug",{"_index":1191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env.app_env",{"_index":1188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env.example",{"_index":1063,"title":{},"body":{"index.html":{}}}],["env.redis_host",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env.redis_password",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["envthen",{"_index":1064,"title":{},"body":{"index.html":{}}}],["equals",{"_index":421,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["equals(undefined",{"_index":416,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["error",{"_index":103,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["error).message",{"_index":470,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["errormessage",{"_index":464,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/typealiases.html":{}}}],["eslint",{"_index":561,"title":{},"body":{"injectables/PrismaService.html":{}}}],["eslint/ban",{"_index":565,"title":{},"body":{"injectables/PrismaService.html":{}}}],["event",{"_index":100,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{},"index.html":{},"license.html":{}}}],["eventname",{"_index":449,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{}}}],["eventnamebindinginterceptor",{"_index":237,"title":{"injectables/EventNameBindingInterceptor.html":{}},"body":{"injectables/CommunicationGateway.html":{},"injectables/EventNameBindingInterceptor.html":{},"coverage.html":{}}}],["eventnamebindinginterceptor(listenevent.bookroom",{"_index":333,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.invitetoroom",{"_index":348,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.joinroom",{"_index":336,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.kickoutofroom",{"_index":342,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.leaveroom",{"_index":339,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.respondroominvitation",{"_index":351,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.sendprivatemessage",{"_index":326,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.sendroommessage",{"_index":330,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.transerownership",{"_index":345,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["exception",{"_index":58,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["exception.event",{"_index":95,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":38,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:13",{"_index":49,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:15",{"_index":54,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.filter.ts:36",{"_index":64,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.filter.ts:49",{"_index":62,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.getresponse",{"_index":469,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":467,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.hosttype",{"_index":94,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.message",{"_index":471,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["exception.payload",{"_index":97,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.url",{"_index":108,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exceptionfilter",{"_index":40,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exceptions.filter.ts",{"_index":859,"title":{},"body":{"classes/WsExceptionsFilter.html":{},"coverage.html":{}}}],["exceptions.filter.ts:14",{"_index":861,"title":{},"body":{"classes/WsExceptionsFilter.html":{}}}],["exec",{"_index":850,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["executioncontext",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["export",{"_index":31,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"injectables/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/MuteRoomDto.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{}}}],["exports",{"_index":359,"title":{},"body":{"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":1128,"title":{},"body":{"license.html":{}}}],["extends",{"_index":545,"title":{},"body":{"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/WsExceptionsFilter.html":{}}}],["f",{"_index":1072,"title":{},"body":{"index.html":{}}}],["failed",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":380,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"miscellaneous/variables.html":{}}}],["fastify",{"_index":68,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["fastifyreply",{"_index":66,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{}}}],["fastifyrequest",{"_index":67,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/UserController.html":{}}}],["features",{"_index":1028,"title":{},"body":{"index.html":{}}}],["fid",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"injectables/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/MuteRoomDto.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"index.html":{}}}],["filename",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":1098,"title":{},"body":{"license.html":{}}}],["fill",{"_index":1065,"title":{},"body":{"index.html":{}}}],["firebase",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{},"index.html":{}}}],["firebaseauth",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fitness",{"_index":1133,"title":{},"body":{"license.html":{}}}],["following",{"_index":1118,"title":{},"body":{"license.html":{}}}],["forever",{"_index":998,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["format",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.combine",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.errors",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.prettyprint",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.timestamp",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forwardref",{"_index":709,"title":{},"body":{"modules/RoomModule.html":{}}}],["free",{"_index":1091,"title":{},"body":{"license.html":{}}}],["friend",{"_index":745,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["friend.id",{"_index":837,"title":{},"body":{"injectables/UserService.html":{}}}],["friendlist",{"_index":754,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["friends",{"_index":517,"title":{},"body":{"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["function",{"_index":869,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":1031,"title":{},"body":{"index.html":{}}}],["functions",{"_index":999,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1116,"title":{},"body":{"license.html":{}}}],["game",{"_index":1017,"title":{},"body":{"index.html":{},"properties.html":{}}}],["gameid",{"_index":370,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["gatewaymetadata",{"_index":302,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["generated",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('friends",{"_index":743,"title":{},"body":{"controllers/UserController.html":{}}}],["getauth(getapp",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getbyid",{"_index":765,"title":{},"body":{"injectables/UserService.html":{}}}],["getbyid(userid",{"_index":793,"title":{},"body":{"injectables/UserService.html":{}}}],["getbysocketid",{"_index":766,"title":{},"body":{"injectables/UserService.html":{}}}],["getbysocketid(socketid",{"_index":795,"title":{},"body":{"injectables/UserService.html":{}}}],["getfirebaseuserid",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["getfirebaseuserid(token",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["getfriendlist",{"_index":741,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getfriendlist(request",{"_index":742,"title":{},"body":{"controllers/UserController.html":{}}}],["getfriendlist(userid",{"_index":797,"title":{},"body":{"injectables/UserService.html":{}}}],["getidbysocketid",{"_index":767,"title":{},"body":{"injectables/UserService.html":{}}}],["getidbysocketid(socketid",{"_index":800,"title":{},"body":{"injectables/UserService.html":{}}}],["getjoinedroomids",{"_index":768,"title":{},"body":{"injectables/UserService.html":{}}}],["getjoinedroomids(userid",{"_index":802,"title":{},"body":{"injectables/UserService.html":{}}}],["getonlinefriendssocketids",{"_index":769,"title":{},"body":{"injectables/UserService.html":{}}}],["getonlinefriendssocketids(userid",{"_index":804,"title":{},"body":{"injectables/UserService.html":{}}}],["getsocketidbyuserid",{"_index":770,"title":{},"body":{"injectables/UserService.html":{}}}],["getsocketidbyuserid(userid",{"_index":806,"title":{},"body":{"injectables/UserService.html":{}}}],["getsocketidsbyuserids",{"_index":771,"title":{},"body":{"injectables/UserService.html":{}}}],["getsocketidsbyuserids(userids",{"_index":808,"title":{},"body":{"injectables/UserService.html":{}}}],["getting",{"_index":1008,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuser",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuser(token",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["git",{"_index":1055,"title":{},"body":{"index.html":{}}}],["git@github.com:tp",{"_index":1057,"title":{},"body":{"index.html":{}}}],["granted",{"_index":1090,"title":{},"body":{"license.html":{}}}],["group",{"_index":1015,"title":{},"body":{"index.html":{}}}],["guard",{"_index":140,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":142,"title":{},"body":{"guards/AuthGuard.html":{}}}],["guest",{"_index":257,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["guestid",{"_index":474,"title":{},"body":{"classes/InviteToRoomDto.html":{}}}],["handlebookroom",{"_index":220,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handlebookroom(client",{"_index":234,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handleconnection",{"_index":221,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handleconnection(client",{"_index":242,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handledisconnect",{"_index":222,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handledisconnect(client",{"_index":248,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handlehttpexception",{"_index":46,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["handlehttpexception(exception",{"_index":61,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["handleinvitetoroom",{"_index":223,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handleinvitetoroom(client",{"_index":252,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handlejoinroom",{"_index":224,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handlejoinroom(client",{"_index":258,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handlekickoutofroom",{"_index":225,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handlekickoutofroom(client",{"_index":263,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handleleaveroom",{"_index":226,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handleleaveroom(client",{"_index":269,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handlerespondinvitation",{"_index":227,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handlerespondinvitation(client",{"_index":274,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handlesendroommesage",{"_index":228,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handlesendroommesage(client",{"_index":280,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handletransferownership",{"_index":229,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handletransferownership(client",{"_index":285,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["handlewsexception",{"_index":47,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["handlewsexception(exception",{"_index":63,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["here",{"_index":1051,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1089,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1138,"title":{},"body":{"license.html":{}}}],["host",{"_index":52,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["host.gettype",{"_index":82,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["host.switchtohttp().getrequest",{"_index":107,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["host.switchtohttp().getresponse",{"_index":105,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtows().getclient",{"_index":93,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["host.switchtows().getdata",{"_index":98,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["hour",{"_index":996,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["http",{"_index":87,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httperrorresponse",{"_index":1163,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["httpexception",{"_index":462,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["httpexceptionfilter",{"_index":460,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["id",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/ParseIdPipe.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["id.pipe.ts",{"_index":536,"title":{},"body":{"injectables/ParseIdPipe.html":{},"coverage.html":{}}}],["id.pipe.ts:5",{"_index":539,"title":{},"body":{"injectables/ParseIdPipe.html":{}}}],["identifier",{"_index":866,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":609,"title":{},"body":{"classes/RemoveRoomsDto.html":{},"injectables/UserService.html":{}}}],["ignore",{"_index":568,"title":{},"body":{"injectables/PrismaService.html":{}}}],["implements",{"_index":39,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/CommunicationGateway.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["implied",{"_index":1129,"title":{},"body":{"license.html":{}}}],["import",{"_index":25,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"injectables/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/MuteRoomDto.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{}}}],["imports",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}}}],["included",{"_index":1123,"title":{},"body":{"license.html":{}}}],["including",{"_index":1102,"title":{},"body":{"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"injectables/CommunicationGateway.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"injectables/MessageService.html":{},"classes/MuteRoomDto.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"controllers/RoomController.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":551,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"injectables/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/MuteRoomDto.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["injectable",{"_index":155,"title":{"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["instanceof",{"_index":468,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["intercept",{"_index":446,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["intercept(context",{"_index":450,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["internalservererrorexception",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["invitation",{"_index":279,"title":{},"body":{"injectables/CommunicationGateway.html":{},"index.html":{}}}],["invitation.dto.ts",{"_index":615,"title":{},"body":{"classes/RespondRoomInvitationDto.html":{},"coverage.html":{}}}],["invitation.dto.ts:6",{"_index":618,"title":{},"body":{"classes/RespondRoomInvitationDto.html":{}}}],["invitation.dto.ts:9",{"_index":617,"title":{},"body":{"classes/RespondRoomInvitationDto.html":{}}}],["invite",{"_index":256,"title":{},"body":{"injectables/CommunicationGateway.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["invite_to_room",{"_index":981,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["invitedfriends",{"_index":831,"title":{},"body":{"injectables/UserService.html":{}}}],["inviterid",{"_index":832,"title":{},"body":{"injectables/UserService.html":{}}}],["invitetoroom",{"_index":980,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["invitetoroomdto",{"_index":253,"title":{"classes/InviteToRoomDto.html":{}},"body":{"injectables/CommunicationGateway.html":{},"classes/InviteToRoomDto.html":{},"coverage.html":{}}}],["ioadapter",{"_index":577,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["ioredis",{"_index":594,"title":{},"body":{"classes/RedisIoAdapter.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["isaccpeted",{"_index":616,"title":{},"body":{"classes/RespondRoomInvitationDto.html":{}}}],["isarray",{"_index":391,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["isarray()@arrayminsize(1)@arrayunique(value",{"_index":402,"title":{},"body":{"classes/CreatePersistentRoomsDto.html":{}}}],["isarray()@arrayminsize(1)@validatenested({each",{"_index":425,"title":{},"body":{"classes/CreateTemporaryRoomsDto.html":{}}}],["isboolean",{"_index":216,"title":{},"body":{"classes/BookRoomDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/MuteRoomDto.html":{},"classes/RespondRoomInvitationDto.html":{}}}],["isboolean()@isnotempty",{"_index":214,"title":{},"body":{"classes/BookRoomDto.html":{}}}],["isint",{"_index":477,"title":{},"body":{"classes/InviteToRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["isint()@ispositive",{"_index":475,"title":{},"body":{"classes/InviteToRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["ismuted",{"_index":371,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["isnotempty",{"_index":27,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/BookRoomDto.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/MuteRoomDto.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["isnumber",{"_index":16,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/RemoveFromRoomDto.html":{}}}],["isnumber()@ispositive",{"_index":400,"title":{},"body":{"classes/CreatePersistentRoomsDto.html":{}}}],["ispersistent",{"_index":372,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["ispositive",{"_index":392,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/InviteToRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["ispublic",{"_index":212,"title":{},"body":{"classes/BookRoomDto.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["isstring",{"_index":28,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/MuteRoomDto.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["isstring()@isnotempty",{"_index":23,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/MuteRoomDto.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RespondRoomInvitationDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["isstring()@minlength(13",{"_index":717,"title":{},"body":{"classes/SendRoomMessageDto.html":{}}}],["isstring({each",{"_index":610,"title":{},"body":{"classes/RemoveRoomsDto.html":{}}}],["join",{"_index":262,"title":{},"body":{"injectables/CommunicationGateway.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["join_room",{"_index":977,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["joined",{"_index":791,"title":{},"body":{"injectables/UserService.html":{}}}],["joineridslist",{"_index":684,"title":{},"body":{"controllers/RoomController.html":{}}}],["joineridslst",{"_index":648,"title":{},"body":{"controllers/RoomController.html":{}}}],["joineridslst[i",{"_index":679,"title":{},"body":{"controllers/RoomController.html":{}}}],["joinroom",{"_index":976,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["joinroomdto",{"_index":259,"title":{"classes/JoinRoomDto.html":{}},"body":{"injectables/CommunicationGateway.html":{},"classes/JoinRoomDto.html":{},"coverage.html":{}}}],["joins",{"_index":651,"title":{},"body":{"controllers/RoomController.html":{}}}],["kick",{"_index":267,"title":{},"body":{"injectables/CommunicationGateway.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["kick_out_of_room",{"_index":985,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["kickoutofroom",{"_index":984,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["kickoutofroomdto",{"_index":264,"title":{"classes/KickOutOfRoomDto.html":{}},"body":{"injectables/CommunicationGateway.html":{},"classes/KickOutOfRoomDto.html":{},"coverage.html":{}}}],["kind",{"_index":1127,"title":{},"body":{"license.html":{}}}],["le",{"_index":1085,"title":{},"body":{"license.html":{}}}],["leave",{"_index":273,"title":{},"body":{"injectables/CommunicationGateway.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["leave_room",{"_index":979,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["leaveridslist",{"_index":654,"title":{},"body":{"controllers/RoomController.html":{}}}],["leaveridslist[i",{"_index":683,"title":{},"body":{"controllers/RoomController.html":{}}}],["leaveroom",{"_index":978,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["leaveroomdto",{"_index":270,"title":{"classes/LeaveRoomDto.html":{}},"body":{"injectables/CommunicationGateway.html":{},"classes/LeaveRoomDto.html":{},"coverage.html":{}}}],["leaves",{"_index":656,"title":{},"body":{"controllers/RoomController.html":{}}}],["left",{"_index":792,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["leftrooms",{"_index":853,"title":{},"body":{"injectables/UserService.html":{}}}],["level",{"_index":558,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["liability",{"_index":1142,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1139,"title":{},"body":{"license.html":{}}}],["license",{"_index":1079,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limitation",{"_index":1103,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1130,"title":{},"body":{"license.html":{}}}],["line",{"_index":563,"title":{},"body":{"injectables/PrismaService.html":{}}}],["list",{"_index":746,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["listenevent",{"_index":311,"title":{},"body":{"injectables/CommunicationGateway.html":{},"injectables/EventNameBindingInterceptor.html":{},"miscellaneous/enumerations.html":{}}}],["literal",{"_index":1173,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["log",{"_index":48,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/PrismaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["log/error.log",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log/info.log",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log/warn.log",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logged",{"_index":747,"title":{},"body":{"controllers/UserController.html":{}}}],["loggederror",{"_index":51,"title":{},"body":{"classes/AllExceptionFilter.html":{},"miscellaneous/typealiases.html":{}}}],["logger",{"_index":43,"title":{},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":731,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["lost",{"_index":1022,"title":{},"body":{"index.html":{}}}],["lt",{"_index":526,"title":{},"body":{"injectables/MessageService.html":{}}}],["main",{"_index":870,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["many",{"_index":634,"title":{},"body":{"controllers/RoomController.html":{}}}],["matching",{"_index":35,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"injectables/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/MuteRoomDto.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":509,"title":{},"body":{"injectables/MessageService.html":{}}}],["maxold",{"_index":508,"title":{},"body":{"injectables/MessageService.html":{}}}],["mechanisms",{"_index":1027,"title":{},"body":{"index.html":{}}}],["member",{"_index":268,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["memberid",{"_index":480,"title":{},"body":{"classes/KickOutOfRoomDto.html":{}}}],["memberids",{"_index":10,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/RemoveFromRoomDto.html":{}}}],["members",{"_index":635,"title":{},"body":{"controllers/RoomController.html":{},"index.html":{}}}],["merchantability",{"_index":1132,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1107,"title":{},"body":{"license.html":{}}}],["message",{"_index":101,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/CommunicationGateway.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/MessageService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{},"index.html":{}}}],["message.dto.ts",{"_index":713,"title":{},"body":{"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:10",{"_index":715,"title":{},"body":{"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{}}}],["message.dto.ts:6",{"_index":716,"title":{},"body":{"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{}}}],["message.service",{"_index":490,"title":{},"body":{"modules/MessageModule.html":{}}}],["message/dto",{"_index":318,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["message/message.module",{"_index":364,"title":{},"body":{"modules/CommunicationModule.html":{}}}],["messagebody",{"_index":303,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["messagemodule",{"_index":122,"title":{"modules/MessageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules.html":{},"overview.html":{}}}],["messages",{"_index":507,"title":{},"body":{"injectables/MessageService.html":{},"index.html":{}}}],["messageservice",{"_index":431,"title":{"injectables/MessageService.html":{}},"body":{"injectables/CronService.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"coverage.html":{},"overview.html":{}}}],["metadata",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":44,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"controllers/RoomController.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["migrate",{"_index":1070,"title":{},"body":{"index.html":{}}}],["min",{"_index":29,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/RemoveFromRoomDto.html":{}}}],["min(1",{"_index":33,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/RemoveFromRoomDto.html":{}}}],["miniute",{"_index":995,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["minlength",{"_index":718,"title":{},"body":{"classes/SendRoomMessageDto.html":{}}}],["minlength(13",{"_index":719,"title":{},"body":{"classes/SendRoomMessageDto.html":{}}}],["miscellaneous",{"_index":937,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1078,"title":{},"body":{"index.html":{},"license.html":{}}}],["modify",{"_index":1106,"title":{},"body":{"license.html":{}}}],["module",{"_index":114,"title":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}}}],["module/communication/communication.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["module/message/message.module",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["module/room/room.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["module/user/user.module",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["modules",{"_index":116,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":513,"title":{},"body":{"injectables/MessageService.html":{},"dependencies.html":{}}}],["moment().subtract(maxold",{"_index":527,"title":{},"body":{"injectables/MessageService.html":{}}}],["mute",{"_index":532,"title":{},"body":{"classes/MuteRoomDto.html":{},"controllers/RoomController.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["mute(@body",{"_index":700,"title":{},"body":{"controllers/RoomController.html":{}}}],["mute(payload",{"_index":644,"title":{},"body":{"controllers/RoomController.html":{}}}],["muteroomdto",{"_index":530,"title":{"classes/MuteRoomDto.html":{}},"body":{"classes/MuteRoomDto.html":{},"controllers/RoomController.html":{},"coverage.html":{}}}],["name",{"_index":56,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"controllers/RoomController.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["namespace",{"_index":322,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["nduserid",{"_index":774,"title":{},"body":{"injectables/UserService.html":{}}}],["nestinterceptor",{"_index":454,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["nestjs",{"_index":1037,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":65,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":916,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":593,"title":{},"body":{"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"injectables/CronService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":308,"title":{},"body":{"injectables/CommunicationGateway.html":{},"classes/WsExceptionsFilter.html":{},"dependencies.html":{}}}],["new",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":451,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/PrismaService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["next.handle",{"_index":459,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["nginx",{"_index":1039,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1136,"title":{},"body":{"license.html":{}}}],["normal",{"_index":1019,"title":{},"body":{"index.html":{}}}],["notice",{"_index":1121,"title":{},"body":{"license.html":{}}}],["notify",{"_index":650,"title":{},"body":{"controllers/RoomController.html":{},"index.html":{}}}],["notifyroomjoins",{"_index":627,"title":{},"body":{"controllers/RoomController.html":{}}}],["notifyroomjoins(socketidslist",{"_index":647,"title":{},"body":{"controllers/RoomController.html":{}}}],["notifyroomleaves",{"_index":628,"title":{},"body":{"controllers/RoomController.html":{}}}],["notifyroomleaves(socketidslist",{"_index":653,"title":{},"body":{"controllers/RoomController.html":{}}}],["npx",{"_index":1069,"title":{},"body":{"index.html":{}}}],["null",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["number",{"_index":14,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/InviteToRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"injectables/MessageService.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"controllers/RoomController.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{},"injectables/UserService.html":{}}}],["o",{"_index":1082,"title":{},"body":{"index.html":{},"properties.html":{}}}],["object.freeze",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.values(appenv).includes(env.app_env",{"_index":1187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":455,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["obtaining",{"_index":1094,"title":{},"body":{"license.html":{}}}],["offline",{"_index":790,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["og/communication",{"_index":1058,"title":{},"body":{"index.html":{}}}],["old",{"_index":506,"title":{},"body":{"injectables/MessageService.html":{},"index.html":{}}}],["once",{"_index":640,"title":{},"body":{"controllers/RoomController.html":{}}}],["ongatewayconnection",{"_index":304,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["ongatewaydisconnect",{"_index":305,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["online",{"_index":783,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["onlinefriends",{"_index":826,"title":{},"body":{"injectables/UserService.html":{}}}],["onlinefriends.length",{"_index":834,"title":{},"body":{"injectables/UserService.html":{}}}],["onlinefriends.map((friend",{"_index":836,"title":{},"body":{"injectables/UserService.html":{}}}],["onlinefriendsids",{"_index":835,"title":{},"body":{"injectables/UserService.html":{}}}],["onlinefriendssids",{"_index":838,"title":{},"body":{"injectables/UserService.html":{}}}],["onmoduleinit",{"_index":548,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":57,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"controllers/RoomController.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":588,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["origin",{"_index":1198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":1147,"title":{},"body":{"license.html":{}}}],["out",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"classes/KickOutOfRoomDto.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1010,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["owner",{"_index":989,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ownerid",{"_index":373,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["ownership",{"_index":290,"title":{},"body":{"injectables/CommunicationGateway.html":{},"index.html":{}}}],["ownership.dto.ts",{"_index":734,"title":{},"body":{"classes/TransferOwnershipDto.html":{},"coverage.html":{}}}],["ownership.dto.ts:10",{"_index":736,"title":{},"body":{"classes/TransferOwnershipDto.html":{}}}],["ownership.dto.ts:6",{"_index":737,"title":{},"body":{"classes/TransferOwnershipDto.html":{}}}],["package",{"_index":914,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/MessageService.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":55,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"controllers/RoomController.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/functions.html":{}}}],["parsedport",{"_index":1185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseidpipe",{"_index":534,"title":{"injectables/ParseIdPipe.html":{}},"body":{"injectables/ParseIdPipe.html":{},"coverage.html":{}}}],["parseint(env.app_port",{"_index":1186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(env.redis_port",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(userid",{"_index":815,"title":{},"body":{"injectables/UserService.html":{}}}],["parseint(value",{"_index":541,"title":{},"body":{"injectables/ParseIdPipe.html":{}}}],["particular",{"_index":1134,"title":{},"body":{"license.html":{}}}],["password",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":235,"title":{},"body":{"injectables/CommunicationGateway.html":{},"controllers/RoomController.html":{}}}],["payload.memberids",{"_index":696,"title":{},"body":{"controllers/RoomController.html":{}}}],["payload.mute",{"_index":702,"title":{},"body":{"controllers/RoomController.html":{}}}],["payload.roomid",{"_index":695,"title":{},"body":{"controllers/RoomController.html":{}}}],["permission",{"_index":1088,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1114,"title":{},"body":{"license.html":{}}}],["persistent",{"_index":368,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"controllers/RoomController.html":{},"coverage.html":{},"index.html":{}}}],["person",{"_index":1093,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1115,"title":{},"body":{"license.html":{}}}],["phong",{"_index":1087,"title":{},"body":{"license.html":{}}}],["pipeline",{"_index":847,"title":{},"body":{"injectables/UserService.html":{}}}],["pipetransform",{"_index":540,"title":{},"body":{"injectables/ParseIdPipe.html":{}}}],["platform",{"_index":1021,"title":{},"body":{"index.html":{}}}],["please",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["port",{"_index":591,"title":{},"body":{"classes/RedisIoAdapter.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":1125,"title":{},"body":{"license.html":{}}}],["post",{"_index":664,"title":{},"body":{"controllers/RoomController.html":{},"miscellaneous/variables.html":{}}}],["post('members",{"_index":631,"title":{},"body":{"controllers/RoomController.html":{}}}],["post('mute",{"_index":645,"title":{},"body":{"controllers/RoomController.html":{}}}],["post('persistent",{"_index":637,"title":{},"body":{"controllers/RoomController.html":{}}}],["post('temporary",{"_index":642,"title":{},"body":{"controllers/RoomController.html":{}}}],["postgresql",{"_index":1042,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":623,"title":{},"body":{"controllers/RoomController.html":{},"controllers/UserController.html":{}}}],["prisma",{"_index":928,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["prisma.service",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["prisma/.../database.seeder.ts",{"_index":1001,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma/.../friend",{"_index":1002,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma/.../status.seeder.ts",{"_index":1003,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma/.../user.seeder.ts",{"_index":1004,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma/client",{"_index":555,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/seeders/database.seeder.ts",{"_index":868,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma/seeders/friend",{"_index":873,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["prisma/seeders/status.seeder.ts",{"_index":876,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["prisma/seeders/user.seeder.ts",{"_index":878,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["prismaclient",{"_index":546,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prismaservice",{"_index":172,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":41,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/MessageService.html":{},"classes/RedisIoAdapter.html":{},"controllers/RoomController.html":{},"classes/SendPrivateMessageDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["privatemessagedto",{"_index":498,"title":{},"body":{"injectables/MessageService.html":{}}}],["privatemessagedto.receiverid",{"_index":516,"title":{},"body":{"injectables/MessageService.html":{}}}],["production",{"_index":951,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["project",{"_index":1075,"title":{},"body":{"index.html":{}}}],["promise",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/RedisIoAdapter.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"injectables/CommunicationGateway.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/MuteRoomDto.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"classes/TransferOwnershipDto.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["property",{"_index":417,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["propertykey",{"_index":1194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"license.html":{}}}],["providers",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}}}],["pubclient",{"_index":598,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["pubclient.duplicate",{"_index":601,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["publish",{"_index":1108,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1135,"title":{},"body":{"license.html":{}}}],["query",{"_index":559,"title":{},"body":{"injectables/PrismaService.html":{}}}],["readonly",{"_index":42,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/RedisIoAdapter.html":{},"injectables/UserService.html":{}}}],["receive",{"_index":1029,"title":{},"body":{"index.html":{}}}],["receive_private_message",{"_index":964,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receive_room_changes",{"_index":970,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receive_room_invitation",{"_index":968,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receive_room_message",{"_index":966,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receiveprivatemessage",{"_index":963,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receiveprivatemessagedata",{"_index":1164,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["receiverid",{"_index":714,"title":{},"body":{"classes/SendPrivateMessageDto.html":{}}}],["receiveroomchanges",{"_index":969,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receiveroomchangesdata",{"_index":1165,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["receiveroominvitation",{"_index":967,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receiveroominvitationdata",{"_index":1166,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["receiveroommessage",{"_index":965,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receiveroommessagedata",{"_index":1167,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["redis",{"_index":579,"title":{},"body":{"classes/RedisIoAdapter.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["redis(redisconfig",{"_index":1192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redis://${env.redis_host",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redisclient",{"_index":584,"title":{},"body":{"classes/RedisIoAdapter.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["redisconfig",{"_index":893,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["redisioadapter",{"_index":575,"title":{"classes/RedisIoAdapter.html":{}},"body":{"classes/RedisIoAdapter.html":{},"coverage.html":{}}}],["reflect",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["refusedids",{"_index":374,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["relationship",{"_index":840,"title":{},"body":{"injectables/UserService.html":{}}}],["relationship.seeder.ts",{"_index":874,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["remove",{"_index":250,"title":{},"body":{"injectables/CommunicationGateway.html":{},"injectables/MessageService.html":{},"controllers/RoomController.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["remove(@body",{"_index":689,"title":{},"body":{"controllers/RoomController.html":{}}}],["remove(payload",{"_index":657,"title":{},"body":{"controllers/RoomController.html":{}}}],["removefromroomdto",{"_index":606,"title":{"classes/RemoveFromRoomDto.html":{}},"body":{"classes/RemoveFromRoomDto.html":{},"controllers/RoomController.html":{},"coverage.html":{}}}],["removemembers",{"_index":629,"title":{},"body":{"controllers/RoomController.html":{}}}],["removemembers(payload",{"_index":660,"title":{},"body":{"controllers/RoomController.html":{}}}],["removeoldprivatemessage",{"_index":494,"title":{},"body":{"injectables/MessageService.html":{}}}],["removeoldprivatemessage(maxold",{"_index":504,"title":{},"body":{"injectables/MessageService.html":{}}}],["removeoldroommessage",{"_index":495,"title":{},"body":{"injectables/MessageService.html":{}}}],["removeoldroommessage(maxold",{"_index":511,"title":{},"body":{"injectables/MessageService.html":{}}}],["removeroomsdto",{"_index":608,"title":{"classes/RemoveRoomsDto.html":{}},"body":{"classes/RemoveRoomsDto.html":{},"controllers/RoomController.html":{},"coverage.html":{}}}],["req",{"_index":748,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":106,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"controllers/UserController.html":{}}}],["request.body",{"_index":110,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.url",{"_index":109,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.user",{"_index":164,"title":{},"body":{"guards/AuthGuard.html":{}}}],["res",{"_index":665,"title":{},"body":{"controllers/RoomController.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["respond",{"_index":278,"title":{},"body":{"injectables/CommunicationGateway.html":{},"index.html":{}}}],["respond_room_invitation",{"_index":983,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["respondroominvitation",{"_index":982,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["respondroominvitationdto",{"_index":275,"title":{"classes/RespondRoomInvitationDto.html":{}},"body":{"injectables/CommunicationGateway.html":{},"classes/RespondRoomInvitationDto.html":{},"coverage.html":{}}}],["response",{"_index":104,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"controllers/RoomController.html":{},"controllers/UserController.html":{}}}],["response.code(200).send",{"_index":692,"title":{},"body":{"controllers/RoomController.html":{},"controllers/UserController.html":{}}}],["response.code(201).send",{"_index":687,"title":{},"body":{"controllers/RoomController.html":{}}}],["response.code(500).send",{"_index":111,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["response.code(status).send",{"_index":472,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["restful",{"_index":1038,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":1101,"title":{},"body":{"license.html":{}}}],["results",{"_index":34,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"injectables/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/MuteRoomDto.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":165,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"classes/RedisIoAdapter.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":59,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"controllers/RoomController.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{}}}],["returntype",{"_index":582,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["rights",{"_index":1104,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["room",{"_index":241,"title":{},"body":{"injectables/CommunicationGateway.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/MessageService.html":{},"classes/RespondRoomInvitationDto.html":{},"controllers/RoomController.html":{},"classes/SendRoomMessageDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["room.controller",{"_index":711,"title":{},"body":{"modules/RoomModule.html":{}}}],["room.dto",{"_index":669,"title":{},"body":{"controllers/RoomController.html":{}}}],["room.dto.ts",{"_index":7,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/BookRoomDto.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/MuteRoomDto.html":{},"classes/RemoveFromRoomDto.html":{},"coverage.html":{}}}],["room.dto.ts:10",{"_index":476,"title":{},"body":{"classes/InviteToRoomDto.html":{},"classes/KickOutOfRoomDto.html":{}}}],["room.dto.ts:12",{"_index":24,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/RemoveFromRoomDto.html":{}}}],["room.dto.ts:17",{"_index":21,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/RemoveFromRoomDto.html":{}}}],["room.dto.ts:6",{"_index":215,"title":{},"body":{"classes/BookRoomDto.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/MuteRoomDto.html":{}}}],["room.dto.ts:9",{"_index":533,"title":{},"body":{"classes/MuteRoomDto.html":{}}}],["room.service",{"_index":670,"title":{},"body":{"controllers/RoomController.html":{},"modules/RoomModule.html":{}}}],["room.type",{"_index":394,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"controllers/RoomController.html":{}}}],["room/dto",{"_index":316,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["room/room.module",{"_index":361,"title":{},"body":{"modules/CommunicationModule.html":{},"modules/UserModule.html":{}}}],["room/room.service",{"_index":488,"title":{},"body":{"modules/MessageModule.html":{},"injectables/UserService.html":{}}}],["roomcontroller",{"_index":620,"title":{"controllers/RoomController.html":{}},"body":{"controllers/RoomController.html":{},"modules/RoomModule.html":{},"coverage.html":{}}}],["roomevent",{"_index":666,"title":{},"body":{"controllers/RoomController.html":{},"miscellaneous/enumerations.html":{}}}],["roomevent.join",{"_index":677,"title":{},"body":{"controllers/RoomController.html":{}}}],["roomevent.leave",{"_index":682,"title":{},"body":{"controllers/RoomController.html":{}}}],["roomevent.mute",{"_index":704,"title":{},"body":{"controllers/RoomController.html":{}}}],["roomid",{"_index":11,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"injectables/MessageService.html":{},"classes/MuteRoomDto.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RespondRoomInvitationDto.html":{},"classes/SendRoomMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["roomids",{"_index":822,"title":{},"body":{"injectables/UserService.html":{}}}],["roommessagedto",{"_index":502,"title":{},"body":{"injectables/MessageService.html":{}}}],["roommessagedto.content",{"_index":523,"title":{},"body":{"injectables/MessageService.html":{}}}],["roommessagedto.roomid",{"_index":521,"title":{},"body":{"injectables/MessageService.html":{}}}],["roommodule",{"_index":123,"title":{"modules/RoomModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["rooms",{"_index":399,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"controllers/RoomController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["rooms.dto.ts",{"_index":369,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/RemoveRoomsDto.html":{},"coverage.html":{}}}],["rooms.dto.ts:17",{"_index":377,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreateRoomDto.html":{}}}],["rooms.dto.ts:20",{"_index":411,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["rooms.dto.ts:22",{"_index":385,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{}}}],["rooms.dto.ts:24",{"_index":386,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreateRoomDto.html":{}}}],["rooms.dto.ts:26",{"_index":376,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{}}}],["rooms.dto.ts:28",{"_index":383,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{}}}],["rooms.dto.ts:29",{"_index":413,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["rooms.dto.ts:30",{"_index":382,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{}}}],["rooms.dto.ts:31",{"_index":410,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["rooms.dto.ts:32",{"_index":381,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{}}}],["rooms.dto.ts:33",{"_index":412,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["rooms.dto.ts:34",{"_index":388,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{}}}],["rooms.dto.ts:35",{"_index":409,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["rooms.dto.ts:36",{"_index":387,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{}}}],["rooms.dto.ts:37",{"_index":420,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["rooms.dto.ts:39",{"_index":419,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["rooms.dto.ts:42",{"_index":401,"title":{},"body":{"classes/CreatePersistentRoomsDto.html":{}}}],["rooms.dto.ts:47",{"_index":426,"title":{},"body":{"classes/CreateTemporaryRoomsDto.html":{}}}],["rooms.dto.ts:49",{"_index":405,"title":{},"body":{"classes/CreatePersistentRoomsDto.html":{}}}],["rooms.dto.ts:7",{"_index":613,"title":{},"body":{"classes/RemoveRoomsDto.html":{}}}],["rooms[i",{"_index":680,"title":{},"body":{"controllers/RoomController.html":{}}}],["roomservice",{"_index":485,"title":{},"body":{"modules/MessageModule.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["rpc",{"_index":89,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["rxjs",{"_index":456,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"dependencies.html":{}}}],["schedulemodule",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["second",{"_index":510,"title":{},"body":{"injectables/MessageService.html":{},"miscellaneous/enumerations.html":{}}}],["seconds').todate",{"_index":528,"title":{},"body":{"injectables/MessageService.html":{}}}],["seedfriendrelationship",{"_index":875,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seedfriendrelationship(client",{"_index":1005,"title":{},"body":{"miscellaneous/functions.html":{}}}],["seedstatus",{"_index":877,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seedstatus(client",{"_index":1006,"title":{},"body":{"miscellaneous/functions.html":{}}}],["seeduser",{"_index":879,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeduser(client",{"_index":1007,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":828,"title":{},"body":{"injectables/UserService.html":{}}}],["sell",{"_index":1112,"title":{},"body":{"license.html":{}}}],["send",{"_index":284,"title":{},"body":{"injectables/CommunicationGateway.html":{},"injectables/MessageService.html":{},"index.html":{}}}],["send_private_message",{"_index":971,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["send_room_message",{"_index":973,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["senderid",{"_index":500,"title":{},"body":{"injectables/MessageService.html":{}}}],["sendprivatemessage",{"_index":230,"title":{},"body":{"injectables/CommunicationGateway.html":{},"miscellaneous/enumerations.html":{}}}],["sendprivatemessage(client",{"_index":292,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["sendprivatemessagedto",{"_index":293,"title":{"classes/SendPrivateMessageDto.html":{}},"body":{"injectables/CommunicationGateway.html":{},"injectables/MessageService.html":{},"classes/SendPrivateMessageDto.html":{},"coverage.html":{}}}],["sendroommessage",{"_index":972,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sendroommessagedto",{"_index":281,"title":{"classes/SendRoomMessageDto.html":{}},"body":{"injectables/CommunicationGateway.html":{},"injectables/MessageService.html":{},"classes/SendRoomMessageDto.html":{},"coverage.html":{}}}],["server",{"_index":219,"title":{},"body":{"injectables/CommunicationGateway.html":{},"classes/RedisIoAdapter.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["server.adapter(this.adapterconstructor",{"_index":605,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["server.git",{"_index":1059,"title":{},"body":{"index.html":{}}}],["serveroptions",{"_index":589,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["service",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["service/auth.service",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{}}}],["set(`${cachenamespace.sid2uid}${socketid",{"_index":848,"title":{},"body":{"injectables/UserService.html":{}}}],["set(`${cachenamespace.uid2sid}${user.id",{"_index":849,"title":{},"body":{"injectables/UserService.html":{}}}],["setup",{"_index":1054,"title":{},"body":{"index.html":{}}}],["shall",{"_index":1122,"title":{},"body":{"license.html":{}}}],["sid",{"_index":851,"title":{},"body":{"injectables/UserService.html":{}}}],["sid2uid",{"_index":953,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sid_to_uid",{"_index":954,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sidkeys",{"_index":817,"title":{},"body":{"injectables/UserService.html":{}}}],["sids",{"_index":820,"title":{},"body":{"injectables/UserService.html":{}}}],["socket",{"_index":69,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/CommunicationGateway.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{}}}],["socket.io",{"_index":70,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/CommunicationGateway.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/RedisIoAdapter.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{},"dependencies.html":{},"index.html":{}}}],["socket.io/redis",{"_index":596,"title":{},"body":{"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["socketid",{"_index":780,"title":{},"body":{"injectables/UserService.html":{}}}],["socketids",{"_index":693,"title":{},"body":{"controllers/RoomController.html":{}}}],["socketidslist",{"_index":652,"title":{},"body":{"controllers/RoomController.html":{}}}],["socketidslist.foreach((sids",{"_index":672,"title":{},"body":{"controllers/RoomController.html":{}}}],["socketuseridbindinginterceptor",{"_index":314,"title":{"injectables/SocketUserIdBindingInterceptor.html":{}},"body":{"injectables/CommunicationGateway.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"coverage.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.bookroom",{"_index":238,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.invitetoroom",{"_index":254,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.joinroom",{"_index":260,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.kickoutofroom",{"_index":265,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.leaveroom",{"_index":271,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.respondroominvitation",{"_index":276,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.sendprivatemessage",{"_index":294,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.sendroommessage",{"_index":282,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.transerownership",{"_index":287,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["software",{"_index":1096,"title":{},"body":{"license.html":{}}}],["something",{"_index":728,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"injectables/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/MuteRoomDto.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{}}}],["src/.../app.config.ts",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.enum.ts",{"_index":941,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../cache.enum.ts",{"_index":942,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../cors.config.ts",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../error.type.ts",{"_index":1162,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../event.enum.ts",{"_index":943,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../event.type.ts",{"_index":1161,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../firebase",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../log.decorator.ts",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1000,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../redis.config.ts",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../redis.decorator.ts",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../room.type.ts",{"_index":1168,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../time.enum.ts",{"_index":945,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.enum.ts",{"_index":939,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../validation.config.ts",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/adapter/redis.adapter.ts",{"_index":576,"title":{},"body":{"classes/RedisIoAdapter.html":{},"coverage.html":{}}}],["src/adapter/redis.adapter.ts:11",{"_index":583,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/adapter/redis.adapter.ts:13",{"_index":586,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/adapter/redis.adapter.ts:20",{"_index":590,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/adapter/redis.adapter.ts:9",{"_index":585,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/app.module.ts",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/decorator",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"classes/RedisIoAdapter.html":{},"injectables/UserService.html":{}}}],["src/common/decorator/firebase",{"_index":881,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorator/log.decorator",{"_index":73,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["src/common/decorator/log.decorator.ts",{"_index":883,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorator/redis.decorator.ts",{"_index":884,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/filter",{"_index":313,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["src/common/filter/all",{"_index":37,"title":{},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filter/http",{"_index":461,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filter/ws",{"_index":858,"title":{},"body":{"classes/WsExceptionsFilter.html":{},"coverage.html":{}}}],["src/common/guard",{"_index":750,"title":{},"body":{"controllers/UserController.html":{}}}],["src/common/guard/auth.guard.ts",{"_index":143,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/common/guard/auth.guard.ts:5",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/common/guard/auth.guard.ts:8",{"_index":152,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/common/interceptor",{"_index":315,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["src/common/interceptor/event",{"_index":444,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptor/socket",{"_index":720,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{},"coverage.html":{}}}],["src/common/pipe/parse",{"_index":535,"title":{},"body":{"injectables/ParseIdPipe.html":{},"coverage.html":{}}}],["src/common/service/auth.service",{"_index":362,"title":{},"body":{"modules/CommunicationModule.html":{},"modules/UserModule.html":{}}}],["src/common/service/auth.service.ts",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/common/service/auth.service.ts:13",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/service/auth.service.ts:24",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/service/auth.service.ts:44",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/service/cron.service.ts",{"_index":427,"title":{},"body":{"injectables/CronService.html":{},"coverage.html":{}}}],["src/common/service/cron.service.ts:11",{"_index":434,"title":{},"body":{"injectables/CronService.html":{}}}],["src/common/service/cron.service.ts:18",{"_index":435,"title":{},"body":{"injectables/CronService.html":{}}}],["src/common/service/cron.service.ts:7",{"_index":432,"title":{},"body":{"injectables/CronService.html":{}}}],["src/common/service/prisma.service",{"_index":363,"title":{},"body":{"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/common/service/prisma.service.ts",{"_index":544,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/common/service/prisma.service.ts:22",{"_index":554,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/service/prisma.service.ts:36",{"_index":552,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/service/prisma.service.ts:6",{"_index":549,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/config",{"_index":72,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/CommunicationGateway.html":{},"injectables/CronService.html":{},"injectables/PrismaService.html":{}}}],["src/config/app.config.ts",{"_index":890,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/cors.config.ts",{"_index":891,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/redis.config.ts",{"_index":892,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/validation.config.ts",{"_index":894,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/enum",{"_index":75,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/CommunicationGateway.html":{},"injectables/EventNameBindingInterceptor.html":{},"controllers/RoomController.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{}}}],["src/enum/app.enum.ts",{"_index":949,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/enum/cache.enum.ts",{"_index":952,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/enum/event.enum.ts",{"_index":959,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/enum/time.enum.ts",{"_index":994,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/enum/user.enum.ts",{"_index":946,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/main.ts",{"_index":895,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/module/communication/communication.gateway.ts",{"_index":218,"title":{},"body":{"injectables/CommunicationGateway.html":{},"coverage.html":{}}}],["src/module/communication/communication.gateway.ts:105",{"_index":283,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:127",{"_index":239,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:145",{"_index":261,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:163",{"_index":272,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:181",{"_index":266,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:199",{"_index":288,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:221",{"_index":255,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:239",{"_index":277,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:50",{"_index":233,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:59",{"_index":243,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:68",{"_index":249,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:83",{"_index":295,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["src/module/communication/communication.module.ts",{"_index":358,"title":{},"body":{"modules/CommunicationModule.html":{}}}],["src/module/communication/communication.service.ts",{"_index":899,"title":{},"body":{"coverage.html":{}}}],["src/module/message/dto/send",{"_index":712,"title":{},"body":{"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"coverage.html":{}}}],["src/module/message/message.module.ts",{"_index":487,"title":{},"body":{"modules/MessageModule.html":{}}}],["src/module/message/message.service",{"_index":437,"title":{},"body":{"injectables/CronService.html":{}}}],["src/module/message/message.service.ts",{"_index":491,"title":{},"body":{"injectables/MessageService.html":{},"coverage.html":{}}}],["src/module/message/message.service.ts:21",{"_index":499,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/module/message/message.service.ts:51",{"_index":503,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/module/message/message.service.ts:67",{"_index":505,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/module/message/message.service.ts:8",{"_index":496,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/module/message/message.service.ts:83",{"_index":512,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/module/room/dto/add",{"_index":6,"title":{},"body":{"classes/AddToRoomDto.html":{},"coverage.html":{}}}],["src/module/room/dto/book",{"_index":211,"title":{},"body":{"classes/BookRoomDto.html":{},"coverage.html":{}}}],["src/module/room/dto/create",{"_index":367,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"coverage.html":{}}}],["src/module/room/dto/invite",{"_index":473,"title":{},"body":{"classes/InviteToRoomDto.html":{},"coverage.html":{}}}],["src/module/room/dto/join",{"_index":478,"title":{},"body":{"classes/JoinRoomDto.html":{},"coverage.html":{}}}],["src/module/room/dto/kick",{"_index":479,"title":{},"body":{"classes/KickOutOfRoomDto.html":{},"coverage.html":{}}}],["src/module/room/dto/leave",{"_index":481,"title":{},"body":{"classes/LeaveRoomDto.html":{},"coverage.html":{}}}],["src/module/room/dto/mute",{"_index":531,"title":{},"body":{"classes/MuteRoomDto.html":{},"coverage.html":{}}}],["src/module/room/dto/remove",{"_index":607,"title":{},"body":{"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"coverage.html":{}}}],["src/module/room/dto/respond",{"_index":614,"title":{},"body":{"classes/RespondRoomInvitationDto.html":{},"coverage.html":{}}}],["src/module/room/dto/transer",{"_index":733,"title":{},"body":{"classes/TransferOwnershipDto.html":{},"coverage.html":{}}}],["src/module/room/room.controller.ts",{"_index":622,"title":{},"body":{"controllers/RoomController.html":{},"coverage.html":{}}}],["src/module/room/room.controller.ts:118",{"_index":659,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/module/room/room.controller.ts:135",{"_index":632,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/module/room/room.controller.ts:157",{"_index":662,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/module/room/room.controller.ts:173",{"_index":646,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/module/room/room.controller.ts:30",{"_index":649,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/module/room/room.controller.ts:54",{"_index":655,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/module/room/room.controller.ts:78",{"_index":643,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/module/room/room.controller.ts:98",{"_index":638,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/module/room/room.module.ts",{"_index":708,"title":{},"body":{"modules/RoomModule.html":{}}}],["src/module/room/room.service.ts",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["src/module/room/room.type.ts",{"_index":1175,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/module/user/user.controller.ts",{"_index":739,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/module/user/user.controller.ts:18",{"_index":744,"title":{},"body":{"controllers/UserController.html":{}}}],["src/module/user/user.module.ts",{"_index":760,"title":{},"body":{"modules/UserModule.html":{}}}],["src/module/user/user.service",{"_index":724,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["src/module/user/user.service.ts",{"_index":762,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/module/user/user.service.ts:110",{"_index":805,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:12",{"_index":772,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:156",{"_index":798,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:184",{"_index":775,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:205",{"_index":781,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:234",{"_index":788,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:25",{"_index":794,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:39",{"_index":796,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:57",{"_index":801,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:69",{"_index":807,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:81",{"_index":809,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:94",{"_index":803,"title":{},"body":{"injectables/UserService.html":{}}}],["src/type",{"_index":77,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/CommunicationGateway.html":{},"classes/HttpExceptionFilter.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{}}}],["src/type/error.type.ts",{"_index":1174,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/type/event.type.ts",{"_index":1172,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stack",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["started",{"_index":1009,"title":{"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":245,"title":{},"body":{"injectables/CommunicationGateway.html":{},"index.html":{}}}],["statements",{"_index":867,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":466,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/UserService.html":{},"index.html":{}}}],["statuscode",{"_index":112,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["statusid",{"_index":833,"title":{},"body":{"injectables/UserService.html":{}}}],["stopatfirsterror",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store",{"_index":244,"title":{},"body":{"injectables/CommunicationGateway.html":{},"injectables/MessageService.html":{},"index.html":{}}}],["string",{"_index":22,"title":{},"body":{"classes/AddToRoomDto.html":{},"injectables/AuthService.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/MuteRoomDto.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"controllers/RoomController.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"classes/TransferOwnershipDto.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string(request.headers.authorization).replace('bearer",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{}}}],["stuserid",{"_index":778,"title":{},"body":{"injectables/UserService.html":{}}}],["subclient",{"_index":600,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["subject",{"_index":1117,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1110,"title":{},"body":{"license.html":{}}}],["subscribemessage",{"_index":306,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.bookroom",{"_index":334,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.invitetoroom",{"_index":349,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.joinroom",{"_index":337,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.kickoutofroom",{"_index":343,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.leaveroom",{"_index":340,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.respondroominvitation",{"_index":352,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.sendprivatemessage",{"_index":327,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.sendroommessage",{"_index":331,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.transerownership",{"_index":346,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["substantial",{"_index":1124,"title":{},"body":{"license.html":{}}}],["success",{"_index":960,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["successresponse",{"_index":1169,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["super",{"_index":556,"title":{},"body":{"injectables/PrismaService.html":{}}}],["super.createioserver(port",{"_index":604,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["support",{"_index":1151,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":1012,"title":{},"body":{"index.html":{},"properties.html":{}}}],["svg",{"_index":1152,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":81,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["symbol",{"_index":1195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":1193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["target[propertykey",{"_index":1196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["technologies",{"_index":1036,"title":{},"body":{"index.html":{}}}],["template",{"_index":1011,"title":{},"body":{"index.html":{}}}],["temporary",{"_index":407,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"controllers/RoomController.html":{},"coverage.html":{},"index.html":{}}}],["things",{"_index":1014,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":560,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":573,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('query",{"_index":569,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.adapterconstructor",{"_index":602,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["this.auth.verifyidtoken(token",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.getuser(token",{"_index":163,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.communicationgateway.server",{"_index":674,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.communicationgateway.server.to(sids).socketsjoin(rooms[i].id",{"_index":673,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.communicationgateway.server.to(sids).socketsleave(rooms[i].id",{"_index":681,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.communicationservice.connect(this.server",{"_index":324,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["this.communicationservice.createtemporaryroom(client",{"_index":335,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["this.communicationservice.disconnect(this.server",{"_index":325,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["this.communicationservice.invitetoroom(this.server",{"_index":350,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["this.communicationservice.joinroom(this.server",{"_index":338,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["this.communicationservice.kickoutofroom(this.server",{"_index":344,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["this.communicationservice.leaveroom(this.server",{"_index":341,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["this.communicationservice.respondroominvitation",{"_index":353,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["this.communicationservice.sendprivatemessage",{"_index":328,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["this.communicationservice.sendroommessage",{"_index":332,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["this.communicationservice.transferroomownership",{"_index":347,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["this.eventname",{"_index":458,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{}}}],["this.getbyid(parseint(userid",{"_index":814,"title":{},"body":{"injectables/UserService.html":{}}}],["this.getfirebaseuserid(token",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getsocketidbyuserid(user.id",{"_index":852,"title":{},"body":{"injectables/UserService.html":{}}}],["this.getsocketidsbyuserids",{"_index":839,"title":{},"body":{"injectables/UserService.html":{}}}],["this.handlehttpexception(exception",{"_index":88,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["this.handlewsexception(exception",{"_index":85,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["this.logger.error(exception",{"_index":90,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["this.messageservice.removeoldprivatemessage",{"_index":439,"title":{},"body":{"injectables/CronService.html":{}}}],["this.messageservice.removeoldroommessage",{"_index":442,"title":{},"body":{"injectables/CronService.html":{}}}],["this.notifyroomjoins([socketids",{"_index":697,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.notifyroomjoins(socketidslist",{"_index":686,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.notifyroomleaves([socketids",{"_index":699,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.notifyroomleaves(socketidslist",{"_index":691,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.prismaservice.friendrelationship.findfirst",{"_index":841,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prismaservice.privatemessage.create",{"_index":518,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.prismaservice.privatemessage.deletemany",{"_index":524,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.prismaservice.roommessage.create",{"_index":520,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.prismaservice.roommessage.deletemany",{"_index":529,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.prismaservice.user.findmany",{"_index":827,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prismaservice.user.findunique",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.prismaservice.user.update",{"_index":844,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redis",{"_index":846,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redis.duplicate",{"_index":599,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["this.redis.get(`${cachenamespace.sid2uid}${socketid",{"_index":813,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redis.get(`${cachenamespace.uid2sid}${userid",{"_index":816,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redis.lrange",{"_index":823,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redis.mget(...sidkeys",{"_index":821,"title":{},"body":{"injectables/UserService.html":{}}}],["this.roomservice.addmembers",{"_index":694,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.allowchat(payload.roomid",{"_index":701,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.createpersistently(payload",{"_index":688,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.createtemporarily(payload",{"_index":685,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.leavemany(user.id",{"_index":854,"title":{},"body":{"injectables/UserService.html":{}}}],["this.roomservice.remove(payload.ids",{"_index":690,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.removemembers",{"_index":698,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.server",{"_index":329,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["this.userservice.arefriends",{"_index":515,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.userservice.getfriendlist(request.user.id",{"_index":755,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getidbysocketid(client.id",{"_index":726,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["throw",{"_index":80,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{}}}],["time",{"_index":944,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["time.forever",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["to(room.id",{"_index":703,"title":{},"body":{"controllers/RoomController.html":{}}}],["to(sids",{"_index":675,"title":{},"body":{"controllers/RoomController.html":{}}}],["token",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["tools",{"_index":1035,"title":{},"body":{"index.html":{}}}],["tort",{"_index":1146,"title":{},"body":{"license.html":{}}}],["tp",{"_index":1081,"title":{},"body":{"index.html":{},"properties.html":{}}}],["tran",{"_index":1086,"title":{},"body":{"license.html":{}}}],["transerownership",{"_index":986,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transfer",{"_index":289,"title":{},"body":{"injectables/CommunicationGateway.html":{},"index.html":{}}}],["transfer_ownership",{"_index":987,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transferownershipdto",{"_index":286,"title":{"classes/TransferOwnershipDto.html":{}},"body":{"injectables/CommunicationGateway.html":{},"classes/TransferOwnershipDto.html":{},"coverage.html":{}}}],["transform",{"_index":537,"title":{},"body":{"injectables/ParseIdPipe.html":{}}}],["transform(value",{"_index":538,"title":{},"body":{"injectables/ParseIdPipe.html":{}}}],["transformer",{"_index":389,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"dependencies.html":{}}}],["transports",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transports.file",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":32,"title":{},"body":{"classes/AddToRoomDto.html":{},"guards/AuthGuard.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"controllers/RoomController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["true})@arrayminsize(1",{"_index":612,"title":{},"body":{"classes/RemoveRoomsDto.html":{}}}],["true})@arrayunique",{"_index":19,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreateRoomDto.html":{},"classes/RemoveFromRoomDto.html":{}}}],["true})@isnotempty({each",{"_index":611,"title":{},"body":{"classes/RemoveRoomsDto.html":{}}}],["true})@ispositive({each",{"_index":384,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{}}}],["true})@min(1",{"_index":18,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/CreateRoomDto.html":{},"classes/RemoveFromRoomDto.html":{}}}],["true})@type(undefined",{"_index":404,"title":{},"body":{"classes/CreatePersistentRoomsDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["try",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["ts",{"_index":566,"title":{},"body":{"injectables/PrismaService.html":{}}}],["ttl",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["two",{"_index":777,"title":{},"body":{"injectables/UserService.html":{}}}],["type",{"_index":12,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"injectables/CommunicationGateway.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"injectables/CronService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"injectables/MessageService.html":{},"classes/MuteRoomDto.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"controllers/RoomController.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1159,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":564,"title":{},"body":{"injectables/PrismaService.html":{}}}],["uid",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["uid2rids",{"_index":957,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uid2sid",{"_index":955,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uid_to_rids",{"_index":958,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uid_to_sid",{"_index":956,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unauthorizedexception",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["unbind",{"_index":789,"title":{},"body":{"injectables/UserService.html":{}}}],["under",{"_index":1077,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":102,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":1067,"title":{},"body":{"index.html":{}}}],["update_friend_status",{"_index":962,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["updated",{"_index":786,"title":{},"body":{"injectables/UserService.html":{}}}],["updatefriendstatus",{"_index":961,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["updatefriendstatusdata",{"_index":1170,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["url",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":1105,"title":{},"body":{"license.html":{}}}],["usefilters",{"_index":297,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["usefilters(new",{"_index":319,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["useguards",{"_index":749,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(authguard",{"_index":753,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors",{"_index":298,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["useinterceptors(new",{"_index":236,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["usepipes",{"_index":299,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["usepipes(new",{"_index":320,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["user",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommunicationGateway.html":{},"injectables/ParseIdPipe.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["user's",{"_index":799,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":761,"title":{},"body":{"modules/UserModule.html":{}}}],["user.id",{"_index":845,"title":{},"body":{"injectables/UserService.html":{}}}],["user.service",{"_index":751,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.statusid",{"_index":842,"title":{},"body":{"injectables/UserService.html":{}}}],["user/user.module",{"_index":360,"title":{},"body":{"modules/CommunicationModule.html":{}}}],["user/user.service",{"_index":489,"title":{},"body":{"modules/MessageModule.html":{},"injectables/MessageService.html":{}}}],["usercontroller",{"_index":738,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":725,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{}}}],["userids",{"_index":810,"title":{},"body":{"injectables/UserService.html":{}}}],["userids.map((uid",{"_index":818,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":124,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":740,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["userservice",{"_index":486,"title":{"injectables/UserService.html":{}},"body":{"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["uuid",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["v",{"_index":415,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["validateif",{"_index":422,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["validateif((dto",{"_index":414,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["validatenested",{"_index":393,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["validationconfig",{"_index":310,"title":{},"body":{"injectables/CommunicationGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationpipe",{"_index":300,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["validationpipe(validationconfig",{"_index":321,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["validator",{"_index":30,"title":{},"body":{"classes/AddToRoomDto.html":{},"classes/BookRoomDto.html":{},"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/MuteRoomDto.html":{},"classes/RemoveFromRoomDto.html":{},"classes/RemoveRoomsDto.html":{},"classes/RespondRoomInvitationDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/SendRoomMessageDto.html":{},"classes/TransferOwnershipDto.html":{},"dependencies.html":{}}}],["value",{"_index":379,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreateRoomDto.html":{},"injectables/ParseIdPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.id",{"_index":398,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{}}}],["value.id)@validatenested({each",{"_index":403,"title":{},"body":{"classes/CreatePersistentRoomsDto.html":{}}}],["variable",{"_index":872,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1176,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1156,"title":{},"body":{"properties.html":{}}}],["via",{"_index":1032,"title":{},"body":{"index.html":{}}}],["void",{"_index":60,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"controllers/RoomController.html":{},"classes/WsExceptionsFilter.html":{}}}],["waitingids",{"_index":375,"title":{},"body":{"classes/CreatePersistentRoomDto.html":{},"classes/CreatePersistentRoomsDto.html":{},"classes/CreateRoomDto.html":{},"classes/CreateTemporaryRoomsDto.html":{}}}],["warn",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warranties",{"_index":1131,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1126,"title":{},"body":{"license.html":{}}}],["web",{"_index":1040,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":307,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["websocketserver",{"_index":296,"title":{},"body":{"injectables/CommunicationGateway.html":{}}}],["went",{"_index":729,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["whether",{"_index":1143,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston",{"_index":78,"title":{},"body":{"classes/AllExceptionFilter.html":{},"dependencies.html":{}}}],["without",{"_index":1100,"title":{},"body":{"license.html":{}}}],["wrong",{"_index":730,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["ws",{"_index":84,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["wserrorresponse",{"_index":1171,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["wsexception",{"_index":862,"title":{},"body":{"classes/WsExceptionsFilter.html":{}}}],["wsexceptionsfilter",{"_index":312,"title":{"classes/WsExceptionsFilter.html":{}},"body":{"injectables/CommunicationGateway.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{}}}],["yes",{"_index":592,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["zoom",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddToRoomDto.html":{"url":"classes/AddToRoomDto.html","title":"class - AddToRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddToRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/add-to-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                memberIds\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        memberIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber({}, {each: true})@Min(1, {each: true})@ArrayUnique()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/add-to-room.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/add-to-room.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArrayUnique,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  Min,\n} from 'class-validator';\n\nexport class AddToRoomDto {\n  @IsString()\n  @IsNotEmpty()\n  roomId: string;\n\n  @IsNumber({}, { each: true })\n  @Min(1, { each: true })\n  @ArrayUnique()\n  memberIds: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionFilter.html":{"url":"classes/AllExceptionFilter.html","title":"class - AllExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filter/all-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                handleHttpException\n                            \n                            \n                                    Private\n                                handleWsException\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Logger\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Log()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/filter/all-exception.filter.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: LoggedError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filter/all-exception.filter.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                LoggedError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleHttpException\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleHttpException(exception: LoggedError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filter/all-exception.filter.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                LoggedError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleWsException\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleWsException(exception: LoggedError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filter/all-exception.filter.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                LoggedError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost } from '@nestjs/common';\nimport { FastifyReply, FastifyRequest } from 'fastify';\nimport { Socket } from 'socket.io';\nimport { AppConfig } from 'src/config';\nimport { Log } from 'src/common/decorator/log.decorator';\nimport { EmitEvent } from 'src/enum';\nimport { EmitEvents, LoggedError } from 'src/type';\nimport { Logger } from 'winston';\n\n@Catch()\nexport class AllExceptionFilter implements ExceptionFilter {\n  @Log()\n  private readonly logger: Logger;\n\n  catch(exception: LoggedError, host: ArgumentsHost) {\n    if (AppConfig.debug) {\n      throw exception;\n    }\n\n    switch (host.getType()) {\n      case 'ws':\n        this.handleWsException(exception, host);\n        break;\n\n      case 'http':\n        this.handleHttpException(exception, host);\n        break;\n\n      case 'rpc':\n        break;\n    }\n\n    this.logger.error(exception);\n  }\n\n  private handleWsException(exception: LoggedError, host: ArgumentsHost) {\n    const client = host.switchToWs().getClient() as Socket;\n\n    exception.hostType = 'ws';\n    exception.event = client.eventName;\n    exception.payload = host.switchToWs().getData();\n\n    client.emit(EmitEvent.Error, {\n      event: client.eventName,\n      message: 'Unknown error!',\n    });\n  }\n\n  private handleHttpException(exception: LoggedError, host: ArgumentsHost) {\n    const response = host.switchToHttp().getResponse();\n    const request = host.switchToHttp().getRequest();\n\n    exception.hostType = 'http';\n    exception.url = request.url;\n    exception.payload = request.body;\n\n    response.code(500).send({\n      statusCode: 500,\n      message: 'Unknown error!',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nCommunicationModule\n\nCommunicationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommunicationModule->AppModule\n\n\n\n\n\nMessageModule\n\nMessageModule\n\nAppModule -->\n\nMessageModule->AppModule\n\n\n\n\n\nRoomModule\n\nRoomModule\n\nAppModule -->\n\nRoomModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nCronService\n\nCronService\n\nAppModule -->\n\nCronService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CronService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CommunicationModule\n                        \n                        \n                            MessageModule\n                        \n                        \n                            RoomModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { CronService } from './common/service/cron.service';\nimport { CommunicationModule } from './module/communication/communication.module';\nimport { MessageModule } from './module/message/message.module';\nimport { RoomModule } from './module/room/room.module';\nimport { UserModule } from './module/user/user.module';\n\n@Module({\n  imports: [\n    CommunicationModule,\n    UserModule,\n    RoomModule,\n    MessageModule,\n    ScheduleModule.forRoot(),\n  ],\n  providers: [CronService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guard/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/common/guard/auth.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guard/auth.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthService } from '../service/auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = String(request.headers.authorization).replace('Bearer ', '');\n    const user = await this.authService.getUser(token);\n\n    request.user = user;\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/service/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                auth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getFirebaseUserId\n                            \n                            \n                                    Async\n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/service/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getFirebaseUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFirebaseUserId(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/service/auth.service.ts:24\n                \n            \n\n\n            \n                \n                    Get uid generated by firebase authentication using\nID token provided by it.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/service/auth.service.ts:44\n                \n            \n\n\n            \n                \n                    Get a corresponding user on the entered token. Throw an error\nif authentication failed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID token provided by firebase authentication.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Auth\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @FirebaseAuth()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/service/auth.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Auth } from 'firebase-admin/auth';\nimport { FirebaseAuth } from 'src/common/decorator';\nimport { PrismaService } from './prisma.service';\n\n@Injectable()\nexport class AuthService {\n  @FirebaseAuth()\n  private readonly auth: Auth;\n\n  constructor(private prismaService: PrismaService) {}\n\n  /**\n   * Get uid generated by firebase authentication using\n   * ID token provided by it.\n   *\n   * @param token\n   * @returns\n   */\n  private async getFirebaseUserId(token: string) {\n    let fid: string;\n\n    try {\n      const decodedToken = await this.auth.verifyIdToken(token);\n      fid = decodedToken.uid;\n    } catch {\n      fid = '';\n    }\n\n    return fid;\n  }\n\n  /**\n   * Get a corresponding user on the entered token. Throw an error\n   * if authentication failed.\n   *\n   * @param token ID token provided by firebase authentication.\n   * @returns\n   */\n  async getUser(token: string) {\n    const fid = await this.getFirebaseUserId(token);\n\n    if (fid === '') {\n      throw new UnauthorizedException('Invalid access token!');\n    }\n\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        fid,\n      },\n    });\n\n    if (user == null) {\n      throw new InternalServerErrorException(\n        'Please connect again after a while!',\n      );\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BookRoomDto.html":{"url":"classes/BookRoomDto.html","title":"class - BookRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BookRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/book-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isPublic\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isPublic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/book-room.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsNotEmpty } from 'class-validator';\n\nexport class BookRoomDto {\n  @IsBoolean()\n  @IsNotEmpty()\n  isPublic: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommunicationGateway.html":{"url":"injectables/CommunicationGateway.html","title":"injectable - CommunicationGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommunicationGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/communication/communication.gateway.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleBookRoom\n                            \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                    Async\n                                handleDisconnect\n                            \n                            \n                                    Async\n                                handleInviteToRoom\n                            \n                            \n                                    Async\n                                handleJoinRoom\n                            \n                            \n                                    Async\n                                handleKickOutOfRoom\n                            \n                            \n                                    Async\n                                handleLeaveRoom\n                            \n                            \n                                    Async\n                                handleRespondInvitation\n                            \n                            \n                                    Async\n                                handleSendRoomMesage\n                            \n                            \n                                    Async\n                                handleTransferOwnership\n                            \n                            \n                                    Async\n                                sendPrivateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(communicationService: CommunicationService)\n                    \n                \n                        \n                            \n                                Defined in src/module/communication/communication.gateway.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        communicationService\n                                                  \n                                                        \n                                                                        CommunicationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleBookRoom\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleBookRoom(client: Socket, payload: BookRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.BookRoom)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:127\n                \n            \n\n\n            \n                \n                    Book a new room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                BookRoomDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConnection(client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:59\n                \n            \n\n\n            \n                \n                    Store user state before connection.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleDisconnect(client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:68\n                \n            \n\n\n            \n                \n                    Remove user state after disconnection.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleInviteToRoom\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleInviteToRoom(client: Socket, payload: InviteToRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.InviteToRoom)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:221\n                \n            \n\n\n            \n                \n                    Invite a guest into room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                InviteToRoomDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleJoinRoom\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleJoinRoom(client: Socket, payload: JoinRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.JoinRoom)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:145\n                \n            \n\n\n            \n                \n                    Join to a new room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                JoinRoomDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleKickOutOfRoom\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleKickOutOfRoom(client: Socket, payload: KickOutOfRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.KickOutOfRoom)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:181\n                \n            \n\n\n            \n                \n                    Kick member out of room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                KickOutOfRoomDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleLeaveRoom\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleLeaveRoom(client: Socket, payload: LeaveRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.LeaveRoom)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:163\n                \n            \n\n\n            \n                \n                    Leave the room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                LeaveRoomDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleRespondInvitation\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRespondInvitation(client: Socket, payload: RespondRoomInvitationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.RespondRoomInvitation)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:239\n                \n            \n\n\n            \n                \n                    Respond to room invitation.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                RespondRoomInvitationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleSendRoomMesage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleSendRoomMesage(client: Socket, payload: SendRoomMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.SendRoomMessage)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:105\n                \n            \n\n\n            \n                \n                    Send room message.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                SendRoomMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleTransferOwnership\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleTransferOwnership(client: Socket, payload: TransferOwnershipDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.TranserOwnership)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:199\n                \n            \n\n\n            \n                \n                    Transfer ownership to another member in room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                TransferOwnershipDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendPrivateMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPrivateMessage(client: Socket, payload: SendPrivateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.SendPrivateMessage)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:83\n                \n            \n\n\n            \n                \n                    Send private message.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                SendPrivateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/communication/communication.gateway.ts:50\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UseFilters,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport {\n  ConnectedSocket,\n  GatewayMetadata,\n  MessageBody,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { CORSConfig, ValidationConfig } from 'src/config';\nimport { ListenEvent } from 'src/enum';\nimport { AllExceptionFilter, WsExceptionsFilter } from 'src/common/filter';\nimport {\n  EventNameBindingInterceptor,\n  SocketUserIdBindingInterceptor,\n} from 'src/common/interceptor';\nimport { EmitEvents } from 'src/type';\nimport {\n  BookRoomDto,\n  InviteToRoomDto,\n  JoinRoomDto,\n  KickOutOfRoomDto,\n  LeaveRoomDto,\n  RespondRoomInvitationDto,\n  TransferOwnershipDto,\n} from '../room/dto';\nimport { CommunicationService } from './communication.service';\nimport { SendRoomMessageDto, SendPrivateMessageDto } from '../message/dto';\n\n@Injectable()\n@UseFilters(new AllExceptionFilter(), new WsExceptionsFilter())\n@UsePipes(new ValidationPipe(ValidationConfig))\n@WebSocketGateway({\n  namespace: '/',\n  cors: CORSConfig,\n})\nexport class CommunicationGateway\n  implements OnGatewayConnection, OnGatewayDisconnect\n{\n  @WebSocketServer()\n  readonly server: Server;\n\n  constructor(private communicationService: CommunicationService) {}\n\n  /**\n   * Store user state before connection.\n   *\n   * @param client socket client.\n   */\n  async handleConnection(client: Socket) {\n    await this.communicationService.connect(this.server, client);\n  }\n\n  /**\n   * Remove user state after disconnection.\n   *\n   * @param client socket client.\n   */\n  async handleDisconnect(client: Socket) {\n    await this.communicationService.disconnect(this.server, client);\n  }\n\n  /**\n   * Send private message.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.SendPrivateMessage),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.SendPrivateMessage)\n  async sendPrivateMessage(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: SendPrivateMessageDto,\n  ) {\n    await this.communicationService.sendPrivateMessage(\n      this.server,\n      client,\n      payload,\n    );\n  }\n\n  /**\n   * Send room message.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.SendRoomMessage),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.SendRoomMessage)\n  async handleSendRoomMesage(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: SendRoomMessageDto,\n  ) {\n    await this.communicationService.sendRoomMessage(\n      this.server,\n      client,\n      payload,\n    );\n  }\n\n  /**\n   * Book a new room.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.BookRoom),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.BookRoom)\n  async handleBookRoom(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: BookRoomDto,\n  ) {\n    await this.communicationService.createTemporaryRoom(client, payload);\n  }\n\n  /**\n   * Join to a new room.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.JoinRoom),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.JoinRoom)\n  async handleJoinRoom(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: JoinRoomDto,\n  ) {\n    await this.communicationService.joinRoom(this.server, client, payload);\n  }\n\n  /**\n   * Leave the room.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.LeaveRoom),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.LeaveRoom)\n  async handleLeaveRoom(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: LeaveRoomDto,\n  ) {\n    await this.communicationService.leaveRoom(this.server, client, payload);\n  }\n\n  /**\n   * Kick member out of room.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.KickOutOfRoom),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.KickOutOfRoom)\n  async handleKickOutOfRoom(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: KickOutOfRoomDto,\n  ) {\n    await this.communicationService.kickOutOfRoom(this.server, client, payload);\n  }\n\n  /**\n   * Transfer ownership to another member in room.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.TranserOwnership),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.TranserOwnership)\n  async handleTransferOwnership(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: TransferOwnershipDto,\n  ) {\n    await this.communicationService.transferRoomOwnership(\n      this.server,\n      client,\n      payload,\n    );\n  }\n\n  /**\n   * Invite a guest into room.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.InviteToRoom),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.InviteToRoom)\n  async handleInviteToRoom(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: InviteToRoomDto,\n  ) {\n    await this.communicationService.inviteToRoom(this.server, client, payload);\n  }\n\n  /**\n   * Respond to room invitation.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.RespondRoomInvitation),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.RespondRoomInvitation)\n  async handleRespondInvitation(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: RespondRoomInvitationDto,\n  ) {\n    await this.communicationService.respondRoomInvitation(\n      this.server,\n      client,\n      payload,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommunicationModule.html":{"url":"modules/CommunicationModule.html","title":"module - CommunicationModule","body":"\n                   \n\n\n\n\n    Modules\n    CommunicationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CommunicationModule\n\n\n\ncluster_CommunicationModule_imports\n\n\n\ncluster_CommunicationModule_exports\n\n\n\ncluster_CommunicationModule_providers\n\n\n\n\nMessageModule\n\nMessageModule\n\n\n\nCommunicationModule\n\nCommunicationModule\n\nCommunicationModule -->\n\nMessageModule->CommunicationModule\n\n\n\n\n\nRoomModule\n\nRoomModule\n\nCommunicationModule -->\n\nRoomModule->CommunicationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nCommunicationModule -->\n\nUserModule->CommunicationModule\n\n\n\n\n\nCommunicationGateway \n\nCommunicationGateway \n\nCommunicationGateway  -->\n\nCommunicationModule->CommunicationGateway \n\n\n\n\n\nAuthService\n\nAuthService\n\nCommunicationModule -->\n\nAuthService->CommunicationModule\n\n\n\n\n\nCommunicationGateway\n\nCommunicationGateway\n\nCommunicationModule -->\n\nCommunicationGateway->CommunicationModule\n\n\n\n\n\nCommunicationService\n\nCommunicationService\n\nCommunicationModule -->\n\nCommunicationService->CommunicationModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nCommunicationModule -->\n\nPrismaService->CommunicationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/communication/communication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            CommunicationGateway\n                        \n                        \n                            CommunicationService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MessageModule\n                        \n                        \n                            RoomModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommunicationGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserModule } from '../user/user.module';\nimport { RoomModule } from '../room/room.module';\nimport { AuthService } from 'src/common/service/auth.service';\nimport { PrismaService } from 'src/common/service/prisma.service';\nimport { MessageModule } from '../message/message.module';\nimport { CommunicationService } from './communication.service';\nimport { CommunicationGateway } from './communication.gateway';\n\n@Module({\n  imports: [UserModule, RoomModule, MessageModule],\n  providers: [\n    CommunicationGateway,\n    CommunicationService,\n    AuthService,\n    PrismaService,\n  ],\n  exports: [CommunicationGateway],\n})\nexport class CommunicationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePersistentRoomDto.html":{"url":"classes/CreatePersistentRoomDto.html","title":"class - CreatePersistentRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePersistentRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/create-persistent-rooms.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Room\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                gameId\n                            \n                            \n                                id\n                            \n                            \n                                isMuted\n                            \n                            \n                                isPersistent\n                            \n                            \n                                isPublic\n                            \n                            \n                                memberIds\n                            \n                            \n                                ownerId\n                            \n                            \n                                refusedIds\n                            \n                            \n                                waitingIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        gameId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-persistent-rooms.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-persistent-rooms.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMuted\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-persistent-rooms.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPersistent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-persistent-rooms.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPublic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-persistent-rooms.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        memberIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber({}, {each: true})@IsPositive({each: true})@ArrayUnique()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-persistent-rooms.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ownerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-persistent-rooms.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refusedIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-persistent-rooms.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        waitingIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-persistent-rooms.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  ArrayUnique,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsPositive,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Room } from '../room.type';\n\nclass CreatePersistentRoomDto implements Room {\n  @IsString()\n  @IsNotEmpty()\n  id: string;\n\n  @IsNumber({}, { each: true })\n  @IsPositive({ each: true })\n  @ArrayUnique()\n  memberIds: number[];\n\n  ownerId: number;\n\n  gameId: number;\n\n  isPublic: boolean;\n\n  isPersistent = true;\n\n  isMuted = false;\n\n  waitingIds: number[] = [];\n\n  refusedIds: number[] = [];\n}\n\nexport class CreatePersistentRoomsDto {\n  @IsNumber()\n  @IsPositive()\n  gameId: number;\n\n  @IsArray()\n  @ArrayMinSize(1)\n  @ArrayUnique((value: CreatePersistentRoomDto) => value.id)\n  @ValidateNested({ each: true })\n  @Type(() => CreatePersistentRoomDto)\n  rooms: CreatePersistentRoomDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePersistentRoomsDto.html":{"url":"classes/CreatePersistentRoomsDto.html","title":"class - CreatePersistentRoomsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePersistentRoomsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/create-persistent-rooms.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                gameId\n                            \n                            \n                                rooms\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        gameId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-persistent-rooms.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePersistentRoomDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ArrayMinSize(1)@ArrayUnique(value => value.id)@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-persistent-rooms.dto.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  ArrayUnique,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsPositive,\n  IsString,\n  ValidateNested,\n} from 'class-validator';\nimport { Room } from '../room.type';\n\nclass CreatePersistentRoomDto implements Room {\n  @IsString()\n  @IsNotEmpty()\n  id: string;\n\n  @IsNumber({}, { each: true })\n  @IsPositive({ each: true })\n  @ArrayUnique()\n  memberIds: number[];\n\n  ownerId: number;\n\n  gameId: number;\n\n  isPublic: boolean;\n\n  isPersistent = true;\n\n  isMuted = false;\n\n  waitingIds: number[] = [];\n\n  refusedIds: number[] = [];\n}\n\nexport class CreatePersistentRoomsDto {\n  @IsNumber()\n  @IsPositive()\n  gameId: number;\n\n  @IsArray()\n  @ArrayMinSize(1)\n  @ArrayUnique((value: CreatePersistentRoomDto) => value.id)\n  @ValidateNested({ each: true })\n  @Type(() => CreatePersistentRoomDto)\n  rooms: CreatePersistentRoomDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoomDto.html":{"url":"classes/CreateRoomDto.html","title":"class - CreateRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/create-temporary-rooms.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Room\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                gameId\n                            \n                            \n                                id\n                            \n                            \n                                isMuted\n                            \n                            \n                                isPersistent\n                            \n                            \n                                isPublic\n                            \n                            \n                                memberIds\n                            \n                            \n                                ownerId\n                            \n                            \n                                refusedIds\n                            \n                            \n                                waitingIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        gameId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-temporary-rooms.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-temporary-rooms.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMuted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-temporary-rooms.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPersistent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-temporary-rooms.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPublic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-temporary-rooms.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        memberIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber({}, {each: true})@Min(1, {each: true})@ArrayUnique()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-temporary-rooms.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ownerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf((dto, v) => )@Equals(undefined, {message: '$property must be contained in memberIds'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-temporary-rooms.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refusedIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-temporary-rooms.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        waitingIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-temporary-rooms.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  ArrayUnique,\n  Equals,\n  IsArray,\n  IsBoolean,\n  IsNumber,\n  Min,\n  ValidateIf,\n  ValidateNested,\n} from 'class-validator';\nimport { Room } from '../room.type';\n\nclass CreateRoomDto implements Room {\n  @IsBoolean()\n  isPublic: boolean;\n\n  @IsBoolean()\n  isMuted: boolean;\n\n  @ValidateIf((dto: CreateRoomDto, v) => !dto.memberIds?.includes(v))\n  @Equals(undefined, { message: '$property must be contained in memberIds' })\n  ownerId: number;\n\n  @IsNumber({}, { each: true })\n  @Min(1, { each: true })\n  @ArrayUnique()\n  memberIds: number[];\n\n  id: string;\n\n  isPersistent = false;\n\n  gameId = 0;\n\n  waitingIds: number[] = [];\n\n  refusedIds: number[] = [];\n}\n\nexport class CreateTemporaryRoomsDto {\n  @IsArray()\n  @ArrayMinSize(1)\n  @ValidateNested({ each: true })\n  @Type(() => CreateRoomDto)\n  rooms: CreateRoomDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTemporaryRoomsDto.html":{"url":"classes/CreateTemporaryRoomsDto.html","title":"class - CreateTemporaryRoomsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTemporaryRoomsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/create-temporary-rooms.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                rooms\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateRoomDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ArrayMinSize(1)@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/create-temporary-rooms.dto.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  ArrayUnique,\n  Equals,\n  IsArray,\n  IsBoolean,\n  IsNumber,\n  Min,\n  ValidateIf,\n  ValidateNested,\n} from 'class-validator';\nimport { Room } from '../room.type';\n\nclass CreateRoomDto implements Room {\n  @IsBoolean()\n  isPublic: boolean;\n\n  @IsBoolean()\n  isMuted: boolean;\n\n  @ValidateIf((dto: CreateRoomDto, v) => !dto.memberIds?.includes(v))\n  @Equals(undefined, { message: '$property must be contained in memberIds' })\n  ownerId: number;\n\n  @IsNumber({}, { each: true })\n  @Min(1, { each: true })\n  @ArrayUnique()\n  memberIds: number[];\n\n  id: string;\n\n  isPersistent = false;\n\n  gameId = 0;\n\n  waitingIds: number[] = [];\n\n  refusedIds: number[] = [];\n}\n\nexport class CreateTemporaryRoomsDto {\n  @IsArray()\n  @ArrayMinSize(1)\n  @ValidateNested({ each: true })\n  @Type(() => CreateRoomDto)\n  rooms: CreateRoomDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CronService.html":{"url":"injectables/CronService.html","title":"injectable - CronService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CronService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/service/cron.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearPrivateMessage\n                            \n                            \n                                    Async\n                                clearRoomMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messageService: MessageService)\n                    \n                \n                        \n                            \n                                Defined in src/common/service/cron.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messageService\n                                                  \n                                                        \n                                                                        MessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        clearPrivateMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearPrivateMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(undefined.cronTime)\n                \n            \n\n            \n                \n                    Defined in src/common/service/cron.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        clearRoomMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    clearRoomMessage()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(undefined.cronTime)\n                \n            \n\n            \n                \n                    Defined in src/common/service/cron.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { AppConfig } from 'src/config';\nimport { MessageService } from 'src/module/message/message.service';\n\n@Injectable()\nexport class CronService {\n  constructor(private messageService: MessageService) {}\n\n  @Cron(AppConfig.messageManagment.private.cronTime)\n  async clearPrivateMessage() {\n    await this.messageService.removeOldPrivateMessage(\n      AppConfig.messageManagment.private.maxOld,\n    );\n  }\n\n  @Cron(AppConfig.messageManagment.room.cronTime)\n  async clearRoomMessage() {\n    await this.messageService.removeOldRoomMessage(\n      AppConfig.messageManagment.room.maxOld,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventNameBindingInterceptor.html":{"url":"injectables/EventNameBindingInterceptor.html","title":"injectable - EventNameBindingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventNameBindingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptor/event-name-binding.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventName: ListenEvent)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptor/event-name-binding.interceptor.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventName\n                                                  \n                                                        \n                                                                        ListenEvent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        intercept\n                        \n                    \n                \n            \n            \n                \n                    \n                    intercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptor/event-name-binding.interceptor.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { Socket } from 'socket.io';\nimport { ListenEvent } from 'src/enum';\n\n@Injectable()\nexport class EventNameBindingInterceptor implements NestInterceptor {\n  constructor(private readonly eventName: ListenEvent) {}\n\n  async intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Promise> {\n    const client = context.switchToWs().getClient() as Socket;\n    client.eventName = this.eventName;\n\n    return next.handle();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filter/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filter/http-exception.filter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { FastifyReply } from 'fastify';\nimport { ErrorMessage } from 'src/type';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const response = host.switchToHttp().getResponse();\n    const status = exception.getStatus();\n    let message: ErrorMessage;\n\n    if (exception instanceof BadRequestException) {\n      message = (exception.getResponse() as Error).message;\n    } else {\n      message = exception.message;\n    }\n\n    response.code(status).send({\n      statusCode: status,\n      message,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InviteToRoomDto.html":{"url":"classes/InviteToRoomDto.html","title":"class - InviteToRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InviteToRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/invite-to-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guestId\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/invite-to-room.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/invite-to-room.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsNotEmpty, IsPositive, IsString } from 'class-validator';\n\nexport class InviteToRoomDto {\n  @IsString()\n  @IsNotEmpty()\n  roomId: string;\n\n  @IsInt()\n  @IsPositive()\n  guestId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JoinRoomDto.html":{"url":"classes/JoinRoomDto.html","title":"class - JoinRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JoinRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/join-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/join-room.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class JoinRoomDto {\n  @IsString()\n  @IsNotEmpty()\n  roomId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KickOutOfRoomDto.html":{"url":"classes/KickOutOfRoomDto.html","title":"class - KickOutOfRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KickOutOfRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/kick-out-of-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                memberId\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        memberId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/kick-out-of-room.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/kick-out-of-room.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString, IsNotEmpty, IsPositive } from 'class-validator';\n\nexport class KickOutOfRoomDto {\n  @IsString()\n  @IsNotEmpty()\n  roomId: string;\n\n  @IsInt()\n  @IsPositive()\n  memberId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeaveRoomDto.html":{"url":"classes/LeaveRoomDto.html","title":"class - LeaveRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeaveRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/leave-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/leave-room.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class LeaveRoomDto {\n  @IsString()\n  @IsNotEmpty()\n  roomId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessageModule.html":{"url":"modules/MessageModule.html","title":"module - MessageModule","body":"\n                   \n\n\n\n\n    Modules\n    MessageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_exports\n\n\n\ncluster_MessageModule_providers\n\n\n\n\nMessageService \n\nMessageService \n\n\n\nMessageModule\n\nMessageModule\n\nMessageService  -->\n\nMessageModule->MessageService \n\n\n\n\n\nMessageService\n\nMessageService\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nMessageModule -->\n\nPrismaService->MessageModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nMessageModule -->\n\nRoomService->MessageModule\n\n\n\n\n\nUserService\n\nUserService\n\nMessageModule -->\n\nUserService->MessageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/message/message.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessageService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            RoomService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MessageService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from 'src/common/service/prisma.service';\nimport { RoomService } from '../room/room.service';\nimport { UserService } from '../user/user.service';\nimport { MessageService } from './message.service';\n\n@Module({\n  providers: [MessageService, PrismaService, UserService, RoomService],\n  exports: [MessageService],\n})\nexport class MessageModule {\n  //\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessageService.html":{"url":"injectables/MessageService.html","title":"injectable - MessageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/message/message.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPrivateMessage\n                            \n                            \n                                createRoomMessage\n                            \n                            \n                                removeOldPrivateMessage\n                            \n                            \n                                removeOldRoomMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/module/message/message.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPrivateMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPrivateMessage(senderId: number, privateMessageDto: SendPrivateMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/module/message/message.service.ts:21\n                \n            \n\n\n            \n                \n                    Store new private message.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    privateMessageDto\n                                    \n                                                SendPrivateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createRoomMessage\n                        \n                    \n                \n            \n            \n                \ncreateRoomMessage(senderId: number, roomMessageDto: SendRoomMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/module/message/message.service.ts:51\n                \n            \n\n\n            \n                \n                    Store new room message.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roomMessageDto\n                                    \n                                                SendRoomMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeOldPrivateMessage\n                        \n                    \n                \n            \n            \n                \nremoveOldPrivateMessage(maxOld: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/message/message.service.ts:67\n                \n            \n\n\n            \n                \n                    Remove all old private messages.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    maxOld\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        max old of message in second.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeOldRoomMessage\n                        \n                    \n                \n            \n            \n                \nremoveOldRoomMessage(maxOld: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/message/message.service.ts:83\n                \n            \n\n\n            \n                \n                    Remove all old room messages.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    maxOld\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        max old of message in second.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport moment from 'moment';\nimport { PrismaService } from 'src/common/service/prisma.service';\nimport { UserService } from '../user/user.service';\nimport { SendPrivateMessageDto, SendRoomMessageDto } from './dto';\n\n@Injectable()\nexport class MessageService {\n  constructor(\n    private prismaService: PrismaService,\n    private userService: UserService,\n  ) {}\n\n  /**\n   * Store new private message.\n   *\n   * @param senderId\n   * @param privateMessageDto\n   * @returns\n   */\n  async createPrivateMessage(\n    senderId: number,\n    privateMessageDto: SendPrivateMessageDto,\n  ) {\n    if (\n      !(await this.userService.areFriends(\n        senderId,\n        privateMessageDto.receiverId,\n      ))\n    ) {\n      throw new BadRequestException(\n        'Only friends can send messages to each other!',\n      );\n    }\n\n    return this.prismaService.privateMessage.create({\n      data: {\n        ...privateMessageDto,\n        senderId,\n      },\n    });\n  }\n\n  /**\n   * Store new room message.\n   *\n   * @param senderId\n   * @param roomMessageDto\n   * @returns\n   */\n  createRoomMessage(senderId: number, roomMessageDto: SendRoomMessageDto) {\n    return this.prismaService.roomMessage.create({\n      data: {\n        roomId: roomMessageDto.roomId,\n        senderId,\n        content: roomMessageDto.content,\n      },\n    });\n  }\n\n  /**\n   * Remove all old private messages.\n   *\n   * @param maxOld max old of message in second.\n   * @returns\n   */\n  removeOldPrivateMessage(maxOld: number) {\n    return this.prismaService.privateMessage.deleteMany({\n      where: {\n        createdAt: {\n          lt: moment().subtract(maxOld, 'seconds').toDate(),\n        },\n      },\n    });\n  }\n\n  /**\n   * Remove all old room messages.\n   *\n   * @param maxOld max old of message in second.\n   * @returns\n   */\n  removeOldRoomMessage(maxOld: number) {\n    return this.prismaService.roomMessage.deleteMany({\n      where: {\n        createdAt: {\n          lt: moment().subtract(maxOld, 'seconds').toDate(),\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MuteRoomDto.html":{"url":"classes/MuteRoomDto.html","title":"class - MuteRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MuteRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/mute-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                mute\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        mute\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/mute-room.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/mute-room.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsNotEmpty, IsString } from 'class-validator';\n\nexport class MuteRoomDto {\n  @IsString()\n  @IsNotEmpty()\n  roomId: string;\n\n  @IsBoolean()\n  mute: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIdPipe.html":{"url":"injectables/ParseIdPipe.html","title":"injectable - ParseIdPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIdPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipe/parse-id.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipe/parse-id.pipe.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, BadRequestException } from '@nestjs/common';\n\n@Injectable()\nexport class ParseIdPipe implements PipeTransform {\n  transform(value: any) {\n    value = parseInt(value, 10);\n\n    if (value > 0) {\n      return value;\n    }\n\n    throw new BadRequestException('Invalid user id');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/service/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/service/prisma.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/common/service/prisma.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/common/service/prisma.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\nimport { AppConfig } from 'src/config';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  constructor() {\n    if (AppConfig.debug) {\n      super({\n        log: [\n          {\n            emit: 'event',\n            level: 'query',\n          },\n        ],\n      });\n    } else {\n      super();\n    }\n  }\n\n  async onModuleInit() {\n    await this.$connect();\n\n    if (AppConfig.debug) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.$on('query', async (e) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        console.log(`${e.query} ${e.params}`);\n      });\n    }\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RedisIoAdapter.html":{"url":"classes/RedisIoAdapter.html","title":"class - RedisIoAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RedisIoAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/adapter/redis.adapter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    IoAdapter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                adapterConstructor\n                            \n                            \n                                    Private\n                                    Readonly\n                                redis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                connectToRedis\n                            \n                            \n                                createIOServer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        adapterConstructor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                    \n                        \n                                Defined in src/adapter/redis.adapter.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        redis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @RedisClient()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/adapter/redis.adapter.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        connectToRedis\n                        \n                    \n                \n            \n            \n                \n                    \n                    connectToRedis()\n                \n            \n\n\n            \n                \n                    Defined in src/adapter/redis.adapter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createIOServer\n                        \n                    \n                \n            \n            \n                \ncreateIOServer(port: number, options?: ServerOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/adapter/redis.adapter.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            ServerOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IoAdapter } from '@nestjs/platform-socket.io';\nimport Redis from 'ioredis';\nimport { ServerOptions } from 'socket.io';\nimport { createAdapter } from '@socket.io/redis-adapter';\nimport { RedisClient } from 'src/common/decorator';\n\nexport class RedisIoAdapter extends IoAdapter {\n  @RedisClient()\n  private readonly redis: Redis;\n\n  private adapterConstructor: ReturnType;\n\n  async connectToRedis(): Promise {\n    const pubClient = this.redis.duplicate();\n    const subClient = pubClient.duplicate();\n\n    this.adapterConstructor = createAdapter(pubClient, subClient);\n  }\n\n  createIOServer(port: number, options?: ServerOptions): any {\n    const server = super.createIOServer(port, options);\n    server.adapter(this.adapterConstructor);\n\n    return server;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RemoveFromRoomDto.html":{"url":"classes/RemoveFromRoomDto.html","title":"class - RemoveFromRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RemoveFromRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/remove-from-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                memberIds\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        memberIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber({}, {each: true})@Min(1, {each: true})@ArrayUnique()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/remove-from-room.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/remove-from-room.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArrayUnique,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  Min,\n} from 'class-validator';\n\nexport class RemoveFromRoomDto {\n  @IsString()\n  @IsNotEmpty()\n  roomId: string;\n\n  @IsNumber({}, { each: true })\n  @Min(1, { each: true })\n  @ArrayUnique()\n  memberIds: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RemoveRoomsDto.html":{"url":"classes/RemoveRoomsDto.html","title":"class - RemoveRoomsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RemoveRoomsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/remove-rooms.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ids\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsNotEmpty({each: true})@ArrayMinSize(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/remove-rooms.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArrayMinSize, IsNotEmpty, IsString } from 'class-validator';\n\nexport class RemoveRoomsDto {\n  @IsString({ each: true })\n  @IsNotEmpty({ each: true })\n  @ArrayMinSize(1)\n  ids: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RespondRoomInvitationDto.html":{"url":"classes/RespondRoomInvitationDto.html","title":"class - RespondRoomInvitationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RespondRoomInvitationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/respond-room-invitation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isAccpeted\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isAccpeted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/respond-room-invitation.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/respond-room-invitation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsNotEmpty, IsString } from 'class-validator';\n\nexport class RespondRoomInvitationDto {\n  @IsString()\n  @IsNotEmpty()\n  roomId: string;\n\n  @IsBoolean()\n  isAccpeted: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoomController.html":{"url":"controllers/RoomController.html","title":"controller - RoomController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoomController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/room.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                rooms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMembers\n                            \n                            \n                                    Async\n                                createPersistently\n                            \n                            \n                                    Async\n                                createTemporarily\n                            \n                            \n                                    Async\n                                mute\n                            \n                            \n                                    Private\n                                notifyRoomJoins\n                            \n                            \n                                    Private\n                                notifyRoomLeaves\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                removeMembers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addMembers\n                        \n                    \n                \n            \n            \n                \n                    \n                    addMembers(payload: AddToRoomDto, response: FastifyReply)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('members')\n                \n            \n\n            \n                \n                    Defined in src/module/room/room.controller.ts:135\n                \n            \n\n\n            \n                \n                    Add many members to room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                AddToRoomDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            FastifyReply\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPersistently\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPersistently(payload: CreatePersistentRoomsDto, response: FastifyReply)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('persistent')\n                \n            \n\n            \n                \n                    Defined in src/module/room/room.controller.ts:98\n                \n            \n\n\n            \n                \n                    Create many persistent rooms at once.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                CreatePersistentRoomsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            FastifyReply\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTemporarily\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTemporarily(payload: CreateTemporaryRoomsDto, response: FastifyReply)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('temporary')\n                \n            \n\n            \n                \n                    Defined in src/module/room/room.controller.ts:78\n                \n            \n\n\n            \n                \n                    Create many temporary rooms at once.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                CreateTemporaryRoomsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            FastifyReply\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        mute\n                        \n                    \n                \n            \n            \n                \n                    \n                    mute(payload: MuteRoomDto, response: FastifyReply)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('mute')\n                \n            \n\n            \n                \n                    Defined in src/module/room/room.controller.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                MuteRoomDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            FastifyReply\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        notifyRoomJoins\n                        \n                    \n                \n            \n            \n                \n                    \n                    notifyRoomJoins(socketIdsList: string[][], rooms: Room[], joinerIdsLst: number[][])\n                \n            \n\n\n            \n                \n                    Defined in src/module/room/room.controller.ts:30\n                \n            \n\n\n            \n                \n                    Notify room joins to all members.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socketIdsList\n                                    \n                                            string[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rooms\n                                    \n                                                Room[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    joinerIdsLst\n                                    \n                                            number[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        notifyRoomLeaves\n                        \n                    \n                \n            \n            \n                \n                    \n                    notifyRoomLeaves(socketIdsList: string[][], rooms: Room[], leaverIdsList: number[][])\n                \n            \n\n\n            \n                \n                    Defined in src/module/room/room.controller.ts:54\n                \n            \n\n\n            \n                \n                    Notify room leaves to all members.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socketIdsList\n                                    \n                                            string[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rooms\n                                    \n                                                Room[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    leaverIdsList\n                                    \n                                            number[][]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(payload: RemoveRoomsDto, response: FastifyReply)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n            \n                \n                    Defined in src/module/room/room.controller.ts:118\n                \n            \n\n\n            \n                \n                    Remove many room at once.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RemoveRoomsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            FastifyReply\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeMembers\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMembers(payload: RemoveFromRoomDto, response: FastifyReply)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('members')\n                \n            \n\n            \n                \n                    Defined in src/module/room/room.controller.ts:157\n                \n            \n\n\n            \n                \n                    Remove many members from room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RemoveFromRoomDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            FastifyReply\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Post, Res } from '@nestjs/common';\nimport { FastifyReply } from 'fastify';\nimport { EmitEvent, RoomEvent } from 'src/enum';\nimport { CommunicationGateway } from '../communication/communication.gateway';\nimport {\n  AddToRoomDto,\n  CreatePersistentRoomsDto,\n  CreateTemporaryRoomsDto,\n  RemoveFromRoomDto,\n  RemoveRoomsDto,\n} from './dto';\nimport { MuteRoomDto } from './dto/mute-room.dto';\nimport { RoomService } from './room.service';\nimport { Room } from './room.type';\n\n@Controller('rooms')\nexport class RoomController {\n  constructor(\n    private roomService: RoomService,\n    private communicationGateway: CommunicationGateway,\n  ) {}\n\n  /**\n   * Notify room joins to all members.\n   *\n   * @param socketIdsList\n   * @param rooms\n   * @param joinerIdsLst\n   */\n  private notifyRoomJoins(\n    socketIdsList: string[][],\n    rooms: Room[],\n    joinerIdsLst: number[][],\n  ) {\n    socketIdsList.forEach((sIds, i) => {\n      this.communicationGateway.server.to(sIds).socketsJoin(rooms[i].id);\n      this.communicationGateway.server\n        .to(sIds)\n        .emit(EmitEvent.ReceiveRoomChanges, {\n          event: RoomEvent.Join,\n          actorIds: joinerIdsLst[i],\n          room: rooms[i],\n        });\n    });\n  }\n\n  /**\n   * Notify room leaves to all members.\n   *\n   * @param socketIdsList\n   * @param rooms\n   * @param leaverIdsList\n   */\n  private notifyRoomLeaves(\n    socketIdsList: string[][],\n    rooms: Room[],\n    leaverIdsList: number[][],\n  ) {\n    socketIdsList.forEach((sIds, i) => {\n      this.communicationGateway.server.to(sIds).socketsLeave(rooms[i].id);\n      this.communicationGateway.server\n        .to(sIds)\n        .emit(EmitEvent.ReceiveRoomChanges, {\n          event: RoomEvent.Leave,\n          actorIds: leaverIdsList[i],\n          room: rooms[i],\n        });\n    });\n  }\n\n  /**\n   * Create many temporary rooms at once.\n   *\n   * @param payload\n   * @param response\n   */\n  @Post('temporary')\n  async createTemporarily(\n    @Body() payload: CreateTemporaryRoomsDto,\n    @Res() response: FastifyReply,\n  ) {\n    const { rooms, socketIdsList, joinerIdsList } =\n      await this.roomService.createTemporarily(payload);\n\n    this.notifyRoomJoins(socketIdsList, rooms, joinerIdsList);\n    response.code(201).send({\n      data: rooms,\n    });\n  }\n\n  /**\n   * Create many persistent rooms at once.\n   *\n   * @param payload\n   * @param response\n   */\n  @Post('persistent')\n  async createPersistently(\n    @Body() payload: CreatePersistentRoomsDto,\n    @Res() response: FastifyReply,\n  ) {\n    const { rooms, socketIdsList, joinerIdsList } =\n      await this.roomService.createPersistently(payload);\n\n    this.notifyRoomJoins(socketIdsList, rooms, joinerIdsList);\n    response.code(201).send({\n      data: rooms,\n    });\n  }\n\n  /**\n   * Remove many room at once.\n   *\n   * @param payload\n   * @param response\n   */\n  @Delete()\n  async remove(@Body() payload: RemoveRoomsDto, @Res() response: FastifyReply) {\n    const { rooms, socketIdsList, leaverIdsList } =\n      await this.roomService.remove(payload.ids);\n\n    this.notifyRoomLeaves(socketIdsList, rooms, leaverIdsList);\n    response.code(200).send({\n      data: true,\n    });\n  }\n\n  /**\n   * Add many members to room.\n   *\n   * @param payload\n   * @param response\n   */\n  @Post('members')\n  async addMembers(\n    @Body() payload: AddToRoomDto,\n    @Res() response: FastifyReply,\n  ) {\n    const { room, socketIds } = await this.roomService.addMembers(\n      payload.roomId,\n      payload.memberIds,\n    );\n\n    this.notifyRoomJoins([socketIds], [room], [payload.memberIds]);\n    response.code(200).send({\n      data: room,\n    });\n  }\n\n  /**\n   * Remove many members from room.\n   *\n   * @param payload\n   * @param response\n   */\n  @Delete('members')\n  async removeMembers(\n    @Body() payload: RemoveFromRoomDto,\n    @Res() response: FastifyReply,\n  ) {\n    const { room, socketIds } = await this.roomService.removeMembers(\n      payload.roomId,\n      payload.memberIds,\n    );\n\n    this.notifyRoomLeaves([socketIds], [room], [payload.memberIds]);\n    response.code(200).send({\n      data: room,\n    });\n  }\n\n  @Post('mute')\n  async mute(@Body() payload: MuteRoomDto, @Res() response: FastifyReply) {\n    const room = await this.roomService.allowChat(payload.roomId, payload.mute);\n\n    this.communicationGateway.server\n      .to(room.id)\n      .emit(EmitEvent.ReceiveRoomChanges, {\n        event: RoomEvent.Mute,\n        actorIds: [],\n        room,\n      });\n    response.code(201).send({\n      data: room,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoomModule.html":{"url":"modules/RoomModule.html","title":"module - RoomModule","body":"\n                   \n\n\n\n\n    Modules\n    RoomModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RoomModule\n\n\n\ncluster_RoomModule_exports\n\n\n\ncluster_RoomModule_providers\n\n\n\n\nRoomService \n\nRoomService \n\n\n\nRoomModule\n\nRoomModule\n\nRoomService  -->\n\nRoomModule->RoomService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nRoomModule -->\n\nPrismaService->RoomModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nRoomModule -->\n\nRoomService->RoomModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/room/room.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            RoomService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoomController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoomService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { PrismaService } from 'src/common/service/prisma.service';\nimport { CommunicationModule } from '../communication/communication.module';\nimport { RoomController } from './room.controller';\nimport { RoomService } from './room.service';\n\n@Module({\n  imports: [forwardRef(() => CommunicationModule)],\n  controllers: [RoomController],\n  providers: [RoomService, PrismaService],\n  exports: [RoomService],\n})\nexport class RoomModule {\n  //\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendPrivateMessageDto.html":{"url":"classes/SendPrivateMessageDto.html","title":"class - SendPrivateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendPrivateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/message/dto/send-private-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                receiverId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/message/dto/send-private-message.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receiverId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/message/dto/send-private-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsNotEmpty, IsPositive, IsString } from 'class-validator';\n\nexport class SendPrivateMessageDto {\n  @IsInt()\n  @IsPositive()\n  receiverId: number;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendRoomMessageDto.html":{"url":"classes/SendRoomMessageDto.html","title":"class - SendRoomMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendRoomMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/message/dto/send-room-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/message/dto/send-room-message.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(13)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/message/dto/send-room-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class SendRoomMessageDto {\n  @IsString()\n  @MinLength(13)\n  roomId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SocketUserIdBindingInterceptor.html":{"url":"injectables/SocketUserIdBindingInterceptor.html","title":"injectable - SocketUserIdBindingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SocketUserIdBindingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptor/socket-user-id-binding.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptor/socket-user-id-binding.interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        intercept\n                        \n                    \n                \n            \n            \n                \n                    \n                    intercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptor/socket-user-id-binding.interceptor.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { Socket } from 'socket.io';\nimport { EmitEvent } from 'src/enum';\nimport { UserService } from 'src/module/user/user.service';\nimport { EmitEvents } from 'src/type';\n\n@Injectable()\nexport class SocketUserIdBindingInterceptor implements NestInterceptor {\n  constructor(private userService: UserService) {}\n\n  async intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Promise> {\n    const client = context.switchToWs().getClient() as Socket;\n    const userId = await this.userService.getIdBySocketId(client.id);\n\n    if (userId > 0) {\n      client.userId = userId;\n\n      return next.handle();\n    }\n\n    client.emit(EmitEvent.Error, {\n      event: client.eventName,\n      message: 'Something went wrong. Please try to login again!',\n    });\n\n    client.disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TransferOwnershipDto.html":{"url":"classes/TransferOwnershipDto.html","title":"class - TransferOwnershipDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TransferOwnershipDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/transer-ownership.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                candidateId\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        candidateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/transer-ownership.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/transer-ownership.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsNotEmpty, IsPositive, IsString } from 'class-validator';\n\nexport class TransferOwnershipDto {\n  @IsString()\n  @IsNotEmpty()\n  roomId: string;\n\n  @IsInt()\n  @IsPositive()\n  candidateId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getFriendList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFriendList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFriendList(request: FastifyRequest, response: FastifyReply)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('friends')\n                \n            \n\n            \n                \n                    Defined in src/module/user/user.controller.ts:18\n                \n            \n\n\n            \n                \n                    Get friend list of logged in user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            FastifyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            FastifyReply\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, Res, UseGuards } from '@nestjs/common';\nimport { FastifyReply, FastifyRequest } from 'fastify';\nimport { AuthGuard } from 'src/common/guard';\nimport { UserService } from './user.service';\n\n@Controller('users')\n@UseGuards(AuthGuard)\nexport class UserController {\n  constructor(private userService: UserService) {}\n\n  /**\n   * Get friend list of logged in user.\n   *\n   * @param request\n   * @param response\n   */\n  @Get('friends')\n  async getFriendList(\n    @Req() request: FastifyRequest,\n    @Res() response: FastifyReply,\n  ) {\n    const friendList = await this.userService.getFriendList(request.user.id);\n\n    response.code(200).send({\n      data: friendList,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nRoomModule\n\nRoomModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nRoomModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RoomModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from 'src/common/service/auth.service';\nimport { PrismaService } from 'src/common/service/prisma.service';\nimport { RoomModule } from '../room/room.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [RoomModule],\n  controllers: [UserController],\n  providers: [UserService, PrismaService, AuthService],\n  exports: [UserService],\n})\nexport class UserModule {\n  //\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                redis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                areFriends\n                            \n                            \n                                    Async\n                                connect\n                            \n                            \n                                    Async\n                                disconnect\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getBySocketId\n                            \n                            \n                                    Async\n                                getFriendList\n                            \n                            \n                                    Async\n                                getIdBySocketId\n                            \n                            \n                                    Async\n                                getJoinedRoomIds\n                            \n                            \n                                    Async\n                                getOnlineFriendsSocketIds\n                            \n                            \n                                    Async\n                                getSocketIdByUserId\n                            \n                            \n                                    Async\n                                getSocketIdsByUserIds\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, roomService: RoomService)\n                    \n                \n                        \n                            \n                                Defined in src/module/user/user.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roomService\n                                                  \n                                                        \n                                                                        RoomService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        areFriends\n                        \n                    \n                \n            \n            \n                \n                    \n                    areFriends(stUserId: number, ndUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:184\n                \n            \n\n\n            \n                \n                    Check if two users are friends.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ndUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        connect\n                        \n                    \n                \n            \n            \n                \n                    \n                    connect(user: User, socketId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:205\n                \n            \n\n\n            \n                \n                    Change the user status to online and then\nbind socket id to user id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    socketId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        conntected socket id.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        updated user.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    disconnect(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:234\n                \n            \n\n\n            \n                \n                    Unbind socket id from user id after that change\nthe user status to offline and leave all joined\nrooms.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        updated user and left rooms.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:25\n                \n            \n\n\n            \n                \n                    Get user by id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getBySocketId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBySocketId(socketId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:39\n                \n            \n\n\n            \n                \n                    Get user by socket id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socketId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFriendList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFriendList(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:156\n                \n            \n\n\n            \n                \n                    Get user's friend list.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getIdBySocketId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getIdBySocketId(socketId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:57\n                \n            \n\n\n            \n                \n                    Get user id by socket id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socketId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getJoinedRoomIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getJoinedRoomIds(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:94\n                \n            \n\n\n            \n                \n                    Get user's joined room id list.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnlineFriendsSocketIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnlineFriendsSocketIds(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:110\n                \n            \n\n\n            \n                \n                    Get socket id list of the user's online friends.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSocketIdByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSocketIdByUserId(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:69\n                \n            \n\n\n            \n                \n                    Get socket id by user id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSocketIdsByUserIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSocketIdsByUserIds(userIds: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:81\n                \n            \n\n\n            \n                \n                    Get socket ids by user ids.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIds\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        redis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @RedisClient()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/user.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { User } from '@prisma/client';\nimport Redis from 'ioredis';\nimport { RedisClient } from 'src/common/decorator';\nimport { PrismaService } from 'src/common/service/prisma.service';\nimport { ActiveStatus, CacheNamespace } from 'src/enum';\nimport { RoomService } from '../room/room.service';\n\n@Injectable()\nexport class UserService {\n  @RedisClient()\n  private readonly redis: Redis;\n\n  constructor(\n    private prismaService: PrismaService,\n    private roomService: RoomService,\n  ) {}\n\n  /**\n   * Get user by id.\n   *\n   * @param userId\n   * @returns\n   */\n  async getById(userId: number) {\n    const user = await this.prismaService.user.findUnique({\n      where: { id: userId },\n    });\n\n    return user;\n  }\n\n  /**\n   * Get user by socket id.\n   *\n   * @param socketId\n   * @returns\n   */\n  async getBySocketId(socketId: string) {\n    const userId = await this.redis.get(`${CacheNamespace.SId2UId}${socketId}`);\n\n    if (userId == null) {\n      return null;\n    }\n\n    const user = await this.getById(parseInt(userId, 10));\n\n    return user;\n  }\n\n  /**\n   * Get user id by socket id.\n   *\n   * @param socketId\n   * @returns\n   */\n  async getIdBySocketId(socketId: string) {\n    const userId = await this.redis.get(`${CacheNamespace.SId2UId}${socketId}`);\n\n    return parseInt(userId, 10);\n  }\n\n  /**\n   * Get socket id by user id.\n   *\n   * @param userId\n   * @returns\n   */\n  async getSocketIdByUserId(userId: number) {\n    const socketId = await this.redis.get(`${CacheNamespace.UID2SId}${userId}`);\n\n    return socketId;\n  }\n\n  /**\n   * Get socket ids by user ids.\n   *\n   * @param userIds\n   * @returns\n   */\n  async getSocketIdsByUserIds(userIds: number[]) {\n    const sIdKeys = userIds.map((uid) => `${CacheNamespace.UID2SId}${uid}`);\n    const sIds = await this.redis.mget(...sIdKeys);\n\n    return sIds;\n  }\n\n  /**\n   * Get user's joined room id list.\n   *\n   * @param userId\n   * @returns\n   */\n  async getJoinedRoomIds(userId: number) {\n    const roomIds = await this.redis.lrange(\n      `${CacheNamespace.UId2RIds}${userId}`,\n      0,\n      -1,\n    );\n\n    return roomIds;\n  }\n\n  /**\n   * Get socket id list of the user's online friends.\n   *\n   * @param userId\n   * @returns\n   */\n  async getOnlineFriendsSocketIds(userId: number) {\n    const onlineFriends = await this.prismaService.user.findMany({\n      select: {\n        id: true,\n      },\n      where: {\n        OR: [\n          {\n            acceptedFriends: {\n              some: {\n                acceptorId: userId,\n              },\n            },\n          },\n          {\n            invitedFriends: {\n              some: {\n                inviterId: userId,\n              },\n            },\n          },\n        ],\n        NOT: {\n          statusId: null,\n        },\n      },\n    });\n\n    if (onlineFriends.length === 0) {\n      return [];\n    }\n\n    const onlineFriendsIds = onlineFriends.map((friend) => friend.id);\n    const onlineFriendsSIds = await this.getSocketIdsByUserIds(\n      onlineFriendsIds,\n    );\n\n    return onlineFriendsSIds;\n  }\n\n  /**\n   * Get user's friend list.\n   *\n   * @param userId\n   * @returns\n   */\n  async getFriendList(userId: number) {\n    const friendList = await this.prismaService.user.findMany({\n      where: {\n        OR: {\n          acceptedFriends: {\n            every: {\n              inviterId: userId,\n            },\n          },\n          invitedFriends: {\n            every: {\n              acceptorId: userId,\n            },\n          },\n        },\n      },\n    });\n\n    return friendList;\n  }\n\n  /**\n   * Check if two users are friends.\n   *\n   * @param stUserId\n   * @param ndUserId\n   * @returns\n   */\n  async areFriends(stUserId: number, ndUserId: number) {\n    const relationship = await this.prismaService.friendRelationship.findFirst({\n      where: {\n        OR: [\n          { inviterId: stUserId, acceptorId: ndUserId },\n          { inviterId: ndUserId, acceptorId: stUserId },\n        ],\n      },\n    });\n\n    return relationship != null;\n  }\n\n  /**\n   * Change the user status to online and then\n   * bind socket id to user id.\n   *\n   * @param user\n   * @param socketId conntected socket id.\n   * @returns updated user.\n   */\n  async connect(user: User, socketId: string) {\n    user.statusId = ActiveStatus.Online;\n\n    await this.prismaService.user.update({\n      data: {\n        statusId: user.statusId,\n      },\n      where: {\n        id: user.id,\n      },\n    });\n\n    await this.redis\n      .pipeline()\n      .set(`${CacheNamespace.SId2UId}${socketId}`, user.id)\n      .set(`${CacheNamespace.UID2SId}${user.id}`, socketId)\n      .exec();\n\n    return user;\n  }\n\n  /**\n   * Unbind socket id from user id after that change\n   * the user status to offline and leave all joined\n   * rooms.\n   *\n   * @param user\n   * @return updated user and left rooms.\n   */\n  async disconnect(user: User) {\n    const sId = await this.getSocketIdByUserId(user.id);\n    const leftRooms = await this.roomService.leaveMany(user.id);\n\n    user.statusId = null;\n\n    await this.redis\n      .pipeline()\n      .del(`${CacheNamespace.SId2UId}${sId}`)\n      .del(`${CacheNamespace.UID2SId}${user.id}`)\n      .exec();\n\n    await this.prismaService.user.update({\n      data: {\n        statusId: user.statusId,\n      },\n      where: {\n        id: user.id,\n      },\n    });\n\n    return { user, leftRooms, disconnectedId: sId };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WsExceptionsFilter.html":{"url":"classes/WsExceptionsFilter.html","title":"class - WsExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WsExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filter/ws-exceptions.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseWsExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filter/ws-exceptions.filter.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ArgumentsHost,\n  BadRequestException,\n  HttpException,\n} from '@nestjs/common';\nimport { BaseWsExceptionFilter, WsException } from '@nestjs/websockets';\nimport { Socket } from 'socket.io';\nimport { EmitEvent } from 'src/enum';\nimport { EmitEvents, ErrorMessage } from 'src/type';\n\n@Catch(WsException, HttpException)\nexport class WsExceptionsFilter extends BaseWsExceptionFilter {\n  catch(exception: Error, host: ArgumentsHost) {\n    const client = host.switchToWs().getClient() as Socket;\n    let message: ErrorMessage;\n\n    if (exception instanceof BadRequestException) {\n      message = (exception.getResponse() as Error).message;\n    } else {\n      message = exception.message;\n    }\n\n    client.emit(EmitEvent.Error, {\n      event: client.eventName,\n      message: message,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/seeders/database.seeder.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seeders/database.seeder.ts\n            \n            variable\n            client\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seeders/friend-relationship.seeder.ts\n            \n            function\n            seedFriendRelationship\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seeders/status.seeder.ts\n            \n            function\n            seedStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seeders/user.seeder.ts\n            \n            function\n            seedUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/adapter/redis.adapter.ts\n            \n            class\n            RedisIoAdapter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/decorator/firebase-auth.decorator.ts\n            \n            variable\n            FirebaseAuth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/log.decorator.ts\n            \n            variable\n            Log\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/log.decorator.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/redis.decorator.ts\n            \n            variable\n            client\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/redis.decorator.ts\n            \n            variable\n            RedisClient\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/filter/all-exception.filter.ts\n            \n            class\n            AllExceptionFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/filter/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/filter/ws-exceptions.filter.ts\n            \n            class\n            WsExceptionsFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/guard/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptor/event-name-binding.interceptor.ts\n            \n            injectable\n            EventNameBindingInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptor/socket-user-id-binding.interceptor.ts\n            \n            injectable\n            SocketUserIdBindingInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pipe/parse-id.pipe.ts\n            \n            injectable\n            ParseIdPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/service/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/common/service/cron.service.ts\n            \n            injectable\n            CronService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/service/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/config/app.config.ts\n            \n            variable\n            AppConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/cors.config.ts\n            \n            variable\n            CORSConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/redis.config.ts\n            \n            variable\n            RedisConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/validation.config.ts\n            \n            variable\n            ValidationConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/communication/communication.gateway.ts\n            \n            injectable\n            CommunicationGateway\n            \n                78 %\n                (11/14)\n            \n        \n        \n            \n                \n                src/module/communication/communication.service.ts\n            \n            injectable\n            CommunicationService\n            \n                87 %\n                (14/16)\n            \n        \n        \n            \n                \n                src/module/message/dto/send-private-message.dto.ts\n            \n            class\n            SendPrivateMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/message/dto/send-room-message.dto.ts\n            \n            class\n            SendRoomMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/message/message.service.ts\n            \n            injectable\n            MessageService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/module/room/dto/add-to-room.dto.ts\n            \n            class\n            AddToRoomDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/room/dto/book-room.dto.ts\n            \n            class\n            BookRoomDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/room/dto/create-persistent-rooms.dto.ts\n            \n            class\n            CreatePersistentRoomDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/module/room/dto/create-persistent-rooms.dto.ts\n            \n            class\n            CreatePersistentRoomsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/room/dto/create-temporary-rooms.dto.ts\n            \n            class\n            CreateRoomDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/module/room/dto/create-temporary-rooms.dto.ts\n            \n            class\n            CreateTemporaryRoomsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/room/dto/invite-to-room.dto.ts\n            \n            class\n            InviteToRoomDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/room/dto/join-room.dto.ts\n            \n            class\n            JoinRoomDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/room/dto/kick-out-of-room.dto.ts\n            \n            class\n            KickOutOfRoomDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/room/dto/leave-room.dto.ts\n            \n            class\n            LeaveRoomDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/room/dto/mute-room.dto.ts\n            \n            class\n            MuteRoomDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/room/dto/remove-from-room.dto.ts\n            \n            class\n            RemoveFromRoomDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/room/dto/remove-rooms.dto.ts\n            \n            class\n            RemoveRoomsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/room/dto/respond-room-invitation.dto.ts\n            \n            class\n            RespondRoomInvitationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/room/dto/transer-ownership.dto.ts\n            \n            class\n            TransferOwnershipDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/room/room.controller.ts\n            \n            controller\n            RoomController\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/module/room/room.service.ts\n            \n            injectable\n            RoomService\n            \n                86 %\n                (19/22)\n            \n        \n        \n            \n                \n                src/module/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/module/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                78 %\n                (11/14)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/platform-fastify : ^9.0.11\n        \n            @nestjs/platform-socket.io : ^9.0.11\n        \n            @nestjs/schedule : ^2.1.0\n        \n            @nestjs/websockets : ^9.0.11\n        \n            @prisma/client : ^4.3.1\n        \n            @socket.io/redis-adapter : ^7.2.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            fastify : ^4.5.3\n        \n            firebase-admin : ^11.0.1\n        \n            ioredis : ^5.2.3\n        \n            moment : ^2.29.4\n        \n            prisma : ^4.3.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            socket.io : ^4.5.2\n        \n            uuid : ^9.0.0\n        \n            winston : ^3.8.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveStatus   (src/.../user.enum.ts)\n                        \n                        \n                            AppEnv   (src/.../app.enum.ts)\n                        \n                        \n                            CacheNamespace   (src/.../cache.enum.ts)\n                        \n                        \n                            EmitEvent   (src/.../event.enum.ts)\n                        \n                        \n                            ListenEvent   (src/.../event.enum.ts)\n                        \n                        \n                            RoomEvent   (src/.../event.enum.ts)\n                        \n                        \n                            Time   (src/.../time.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/enum/user.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ActiveStatus\n                    \n                \n                        \n                            \n                                 Offline\n                            \n                        \n                        \n                            \n                                 Online\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 Busy\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n            \n        \n\n    src/enum/app.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AppEnv\n                    \n                \n                        \n                            \n                                 Development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n            \n        \n\n    src/enum/cache.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CacheNamespace\n                    \n                \n                        \n                            \n                                 SId2UId\n                            \n                        \n                        \n                            \n                                Value : sid_to_uid:\n                            \n                        \n                        \n                            \n                                 UID2SId\n                            \n                        \n                        \n                            \n                                Value : uid_to_sid:\n                            \n                        \n                        \n                            \n                                 UId2RIds\n                            \n                        \n                        \n                            \n                                Value : uid_to_rids:\n                            \n                        \n                        \n                            \n                                 Room\n                            \n                        \n                        \n                            \n                                Value : room:\n                            \n                        \n            \n        \n\n    src/enum/event.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EmitEvent\n                    \n                \n                        \n                            \n                                 Error\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n                        \n                            \n                                 Success\n                            \n                        \n                        \n                            \n                                Value : success\n                            \n                        \n                        \n                            \n                                 UpdateFriendStatus\n                            \n                        \n                        \n                            \n                                Value : update_friend_status\n                            \n                        \n                        \n                            \n                                 ReceivePrivateMessage\n                            \n                        \n                        \n                            \n                                Value : receive_private_message\n                            \n                        \n                        \n                            \n                                 ReceiveRoomMessage\n                            \n                        \n                        \n                            \n                                Value : receive_room_message\n                            \n                        \n                        \n                            \n                                 ReceiveRoomInvitation\n                            \n                        \n                        \n                            \n                                Value : receive_room_invitation\n                            \n                        \n                        \n                            \n                                 ReceiveRoomChanges\n                            \n                        \n                        \n                            \n                                Value : receive_room_changes\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ListenEvent\n                    \n                \n                        \n                            \n                                 Connect\n                            \n                        \n                        \n                            \n                                Value : connect\n                            \n                        \n                        \n                            \n                                 SendPrivateMessage\n                            \n                        \n                        \n                            \n                                Value : send_private_message\n                            \n                        \n                        \n                            \n                                 SendRoomMessage\n                            \n                        \n                        \n                            \n                                Value : send_room_message\n                            \n                        \n                        \n                            \n                                 BookRoom\n                            \n                        \n                        \n                            \n                                Value : book_room\n                            \n                        \n                        \n                            \n                                 JoinRoom\n                            \n                        \n                        \n                            \n                                Value : join_room\n                            \n                        \n                        \n                            \n                                 LeaveRoom\n                            \n                        \n                        \n                            \n                                Value : leave_room\n                            \n                        \n                        \n                            \n                                 InviteToRoom\n                            \n                        \n                        \n                            \n                                Value : invite_to_room\n                            \n                        \n                        \n                            \n                                 RespondRoomInvitation\n                            \n                        \n                        \n                            \n                                Value : respond_room_invitation\n                            \n                        \n                        \n                            \n                                 KickOutOfRoom\n                            \n                        \n                        \n                            \n                                Value : kick_out_of_room\n                            \n                        \n                        \n                            \n                                 TranserOwnership\n                            \n                        \n                        \n                            \n                                Value : transfer_ownership\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RoomEvent\n                    \n                \n                        \n                            \n                                 Create\n                            \n                        \n                        \n                            \n                                 Kick\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 Leave\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 Join\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n                        \n                            \n                                 Owner\n                            \n                        \n                        \n                            \n                                Value : 4\n                            \n                        \n                        \n                            \n                                 Invite\n                            \n                        \n                        \n                            \n                                Value : 5\n                            \n                        \n                        \n                            \n                                 Remove\n                            \n                        \n                        \n                            \n                                Value : 6\n                            \n                        \n                        \n                            \n                                 Mute\n                            \n                        \n                        \n                            \n                                Value : 7\n                            \n                        \n            \n        \n\n    src/enum/time.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Time\n                    \n                \n                        \n                            \n                                 Second\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 Miniute\n                            \n                        \n                        \n                            \n                                 Hour\n                            \n                        \n                        \n                            \n                                 Day\n                            \n                        \n                        \n                            \n                                 Forever\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            main   (prisma/.../database.seeder.ts)\n                        \n                        \n                            seedFriendRelationship   (prisma/.../friend-relationship.seeder.ts)\n                        \n                        \n                            seedStatus   (prisma/.../status.seeder.ts)\n                        \n                        \n                            seedUser   (prisma/.../user.seeder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    prisma/seeders/database.seeder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n    prisma/seeders/friend-relationship.seeder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        seedFriendRelationship\n                        \n                    \n                \n            \n            \n                \nseedFriendRelationship(client: PrismaClient)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            PrismaClient\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    prisma/seeders/status.seeder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        seedStatus\n                        \n                    \n                \n            \n            \n                \nseedStatus(client: PrismaClient)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            PrismaClient\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    prisma/seeders/user.seeder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        seedUser\n                        \n                    \n                \n            \n            \n                \nseedUser(client: PrismaClient)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            PrismaClient\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nOverview\nA template supports the most basic things for user - user, and user - group communicate in game client. The differences of this template from a normal chat platform are that room state is lost if all the users connected to it have left and group messages are not archived anywhere. To enable these mechanisms, you can create a persistent room.\nFeatures\n\n Firebase Authentication\n User\n Get friend list\n Add friend\n Remove friend\n Receive friend status changes\n\n\n Room\n Leave room\n Notify room changes\n Temporary room (user functionality)\n Book room\n Join room\n Kick out of room\n Transfer ownership\n Invite to room\n Respond to room invitation\n\n\n Persistent room (via API)\n Create rooms\n Mute room\n Remove rooms\n Add members\n Remove members\n Store message\n\n\n\n\n Message\n Send private message\n Send room message (only persistent room)\n Delete old messages automatically\n\n\n\nTools And Technologies\n\nNestJS\nSocket.IO\nPrisma\nRESTful API\nNGINX Web Server\nRedis\nRedis Commander\nPostgreSQL\nAdminer\nFirebase Authentication\nDocker\nDocker Compose\n\nDetails\nArchitecture\n\nDatabase Design\n\nDocumentaions\nRESTful API here.\nEvent-Driven API here.\nApplication here.\nSetup\n$ git clone git@github.com:TP-OG/communication-server.git\n\n$ cd communication-server\n\n$ cp .env.example .envThen fill in the .env file.\nDevelopment\n$ docker-compose up -d\n\n$ docker-compose exec app npx prisma migrate devDemo\n$ docker-compose -f docker-compose.demo.yml up -d\n\n$ docker-compose -f docker-compose.demo.yml exec app npx prisma migrate deployLicense\n\nThis project is distributed under the MIT License.\n\nCopyright of @TP-O, 2022.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Le Tran Phong\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommunicationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoomModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_CommunicationModule\n\n\n\ncluster_CommunicationModule_exports\n\n\n\ncluster_CommunicationModule_providers\n\n\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_exports\n\n\n\ncluster_MessageModule_providers\n\n\n\ncluster_RoomModule\n\n\n\ncluster_RoomModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\n\nCommunicationModule\n\nCommunicationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommunicationModule->AppModule\n\n\n\n\n\nCommunicationGateway \n\nCommunicationGateway \n\nCommunicationGateway  -->\n\nCommunicationModule->CommunicationGateway \n\n\n\n\n\nMessageModule\n\nMessageModule\n\nCommunicationModule -->\n\nMessageModule->CommunicationModule\n\n\n\nAppModule -->\n\nMessageModule->AppModule\n\n\n\n\n\nMessageService \n\nMessageService \n\nMessageService  -->\n\nMessageModule->MessageService \n\n\n\n\n\nRoomModule\n\nRoomModule\n\nCommunicationModule -->\n\nRoomModule->CommunicationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nRoomModule->UserModule\n\n\n\nAppModule -->\n\nRoomModule->AppModule\n\n\n\n\n\nRoomService \n\nRoomService \n\nRoomService  -->\n\nRoomModule->RoomService \n\n\n\nCommunicationModule -->\n\nUserModule->CommunicationModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCronService\n\nCronService\n\nAppModule -->\n\nCronService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nCommunicationModule -->\n\nAuthService->CommunicationModule\n\n\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nCommunicationGateway\n\nCommunicationGateway\n\nCommunicationModule -->\n\nCommunicationGateway->CommunicationModule\n\n\n\n\n\nCommunicationService\n\nCommunicationService\n\nCommunicationModule -->\n\nCommunicationService->CommunicationModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nCommunicationModule -->\n\nPrismaService->CommunicationModule\n\n\n\nMessageModule -->\n\nPrismaService->MessageModule\n\n\n\nRoomModule -->\n\nPrismaService->RoomModule\n\n\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nMessageService\n\nMessageService\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nMessageModule -->\n\nRoomService->MessageModule\n\n\n\nRoomModule -->\n\nRoomService->RoomModule\n\n\n\n\n\nUserService\n\nUserService\n\nMessageModule -->\n\nUserService->MessageModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    21 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : Server supports communication in game\n        \n            Author : TP-O\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EmitEvents   (src/.../event.type.ts)\n                        \n                        \n                            ErrorMessage   (src/.../error.type.ts)\n                        \n                        \n                            HttpErrorResponse   (src/.../error.type.ts)\n                        \n                        \n                            LoggedError   (src/.../error.type.ts)\n                        \n                        \n                            ReceivePrivateMessageData   (src/.../event.type.ts)\n                        \n                        \n                            ReceiveRoomChangesData   (src/.../event.type.ts)\n                        \n                        \n                            ReceiveRoomInvitationData   (src/.../event.type.ts)\n                        \n                        \n                            ReceiveRoomMessageData   (src/.../event.type.ts)\n                        \n                        \n                            Room   (src/.../room.type.ts)\n                        \n                        \n                            SuccessResponse   (src/.../event.type.ts)\n                        \n                        \n                            UpdateFriendStatusData   (src/.../event.type.ts)\n                        \n                        \n                            WsErrorResponse   (src/.../error.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/type/event.type.ts\n    \n    \n        \n            \n                \n                    \n                    EmitEvents\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReceivePrivateMessageData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReceiveRoomChangesData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReceiveRoomInvitationData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReceiveRoomMessageData\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SuccessResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateFriendStatusData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/type/error.type.ts\n    \n    \n        \n            \n                \n                    \n                    ErrorMessage\n                \n            \n            \n                \n                        string | string[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HttpErrorResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LoggedError\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WsErrorResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/module/room/room.type.ts\n    \n    \n        \n            \n                \n                    \n                    Room\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppConfig   (src/.../app.config.ts)\n                        \n                        \n                            client   (prisma/.../database.seeder.ts)\n                        \n                        \n                            client   (src/.../redis.decorator.ts)\n                        \n                        \n                            CORSConfig   (src/.../cors.config.ts)\n                        \n                        \n                            FirebaseAuth   (src/.../firebase-auth.decorator.ts)\n                        \n                        \n                            Log   (src/.../log.decorator.ts)\n                        \n                        \n                            logger   (src/.../log.decorator.ts)\n                        \n                        \n                            RedisClient   (src/.../redis.decorator.ts)\n                        \n                        \n                            RedisConfig   (src/.../redis.config.ts)\n                        \n                        \n                            ValidationConfig   (src/.../validation.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.freeze(\n  (() => {\n    const parsedPort = parseInt(env.APP_PORT, 10);\n\n    return {\n      env: Object.values(AppEnv).includes(env.APP_ENV as AppEnv)\n        ? env.APP_ENV\n        : AppEnv.Development,\n      debug: env.APP_DEBUG === 'true',\n      port: parsedPort >= 0 && parsedPort \n                    \n                \n\n\n        \n    \n\n    prisma/seeders/database.seeder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n\n    src/common/decorator/redis.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Redis(RedisConfig)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RedisClient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => (target: unknown, propertyKey: string | symbol) => {\n    target[propertyKey] = client;\n  }\n                    \n                \n\n\n        \n    \n\n    src/config/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CORSConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CorsOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  origin: '*',\n  methods: ['GET', 'POST'],\n  credentials: true,\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorator/firebase-auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FirebaseAuth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => (target: unknown, propertyKey: string | symbol) => {\n    target[propertyKey] = getAuth(getApp());\n  }\n                    \n                \n\n\n        \n    \n\n    src/common/decorator/log.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Log\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => (target: unknown, propertyKey: string | symbol) => {\n  target[propertyKey] = logger;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLogger({\n  level: 'debug',\n  format: format.combine(\n    format.errors({ stack: true }),\n    format.timestamp(),\n    format.prettyPrint(),\n  ),\n  defaultMeta: { service: 'Communication Server' },\n  transports: [\n    new transports.File({\n      filename: 'log/error.log',\n      level: 'error',\n    }),\n    new transports.File({\n      filename: 'log/warn.log',\n      level: 'warn',\n    }),\n    new transports.File({\n      filename: 'log/info.log',\n      level: 'info',\n    }),\n  ],\n})\n                    \n                \n\n\n        \n    \n\n    src/config/redis.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RedisConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.freeze({\n  host: env.REDIS_HOST || 'redis',\n  port: parseInt(env.REDIS_PORT, 10) || 6379,\n  url: `redis://${env.REDIS_HOST || 'redis'}:${\n    parseInt(env.REDIS_PORT, 10) || 6379\n  }`,\n  password: env.REDIS_PASSWORD || '',\n  ttl: Time.Forever,\n})\n                    \n                \n\n\n        \n    \n\n    src/config/validation.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ValidationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.freeze({\n    whitelist: true,\n    stopAtFirstError: false,\n    enableDebugMessages: AppConfig.debug,\n  })\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
