import {
  Injectable,
  InternalServerErrorException,
  UnauthorizedException,
} from '@nestjs/common';
import { Auth } from 'firebase-admin/auth';
import { FirebaseService, PrismaService } from '../common';

@Injectable()
export class AuthService {
  /**
   * Firebase authentication service.
   */
  private readonly _auth: Auth;

  constructor(
    firebaseService: FirebaseService,
    private readonly prismaService: PrismaService,
  ) {
    this._auth = firebaseService.auth();
  }

  /**
   * Get player by token.
   *
   * @param token The Firebase ID token.
   */
  async getPlayer(token: string) {
    const id = await this._getFirebasePlayerId(token);
    const player = await this.prismaService.player.findUnique({
      where: {
        id,
      },
    });
    if (!player) {
      throw new InternalServerErrorException(
        'Please connect again after a while!',
      );
    }

    return player;
  }

  /**
   * Get uid generated by firebase authentication using
   * token provided by it.
   *
   * @param token The Firebase ID token.
   */
  private async _getFirebasePlayerId(token: string): Promise<string> {
    return this._auth
      .verifyIdToken(token)
      .then(({ uid }) => uid)
      .catch(() => {
        throw new UnauthorizedException('Invalid access token!');
      });
  }
}
