import {
  Injectable,
  InternalServerErrorException,
  UnauthorizedException,
} from '@nestjs/common';
import { Auth, DecodedIdToken } from 'firebase-admin/auth';
import { FirebaseService, PrismaService } from '../common/service';
import { PlayerStatus } from '../player/player.enum';

@Injectable()
export class AuthService {
  /**
   * Firebase authentication service.
   */
  private readonly _auth: Auth;

  constructor(
    firebaseService: FirebaseService,
    private readonly prismaService: PrismaService,
  ) {
    this._auth = firebaseService.auth();
  }

  /**
   * Get player by token and store player info if
   * it does not exist in dataase.
   *
   * @param token The Firebase ID token.
   */
  async getPlayer(token: string) {
    const { uid } = await this._getFirebaseDecodedUid(token);
    let player = await this.prismaService.player.findUnique({
      where: {
        id: uid,
      },
    });

    // Store player if does not exist
    if (!player) {
      player = await this.prismaService.player.create({
        data: {
          id: uid,
          username: `User@${uid.slice(0, 8)}`,
          statusId: PlayerStatus.Offline,
        },
      });
    }

    if (!player) {
      throw new InternalServerErrorException('Unable to detect player!');
    }

    return player;
  }

  /**
   * Get decoded uid generated by firebase authentication using
   * token provided by it.
   *
   * @param token The Firebase ID token.
   */
  private async _getFirebaseDecodedUid(token: string): Promise<DecodedIdToken> {
    return this._auth.verifyIdToken(token).catch(() => {
      throw new UnauthorizedException('Invalid access token!');
    });
  }
}
