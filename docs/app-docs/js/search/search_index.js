var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionFilter.html",[0,0.096,1,2.318]],["body/classes/AllExceptionFilter.html",[0,0.081,1,2.802,2,0.874,3,0.252,4,0.281,5,0.225,6,4.769,7,2.18,8,2.004,9,4.131,10,0.281,11,1.098,12,2.441,13,2.522,14,4.369,15,1.098,16,3.248,17,4.18,18,4.18,19,0.564,20,0.026,21,0.82,22,3.638,23,0.797,24,2.475,25,3.117,26,5.394,27,4.322,28,4.751,29,2.923,30,1.282,31,1.2,32,1.282,33,3.97,34,1.368,35,3.638,36,4.18,37,2.923,38,4.18,39,2.923,40,0.592,41,0.587,42,2.18,43,2.475,44,1.959,45,2.004,46,1.304,47,1.783,48,1.959,49,2.923,50,1.637,51,1.402,52,1.637,53,1.637,54,2.475,55,0.281,56,2.475,57,1.637,58,2.923,59,2.923,60,4.879,61,4.18,62,2.923,63,4.879,64,4.18,65,2.923,66,2.923,67,2.923,68,1.557,69,1.216,70,2.475,71,4.18,72,2.923,73,2.802,74,4.18,75,2.923,76,1.959,77,1.511,78,2.004,79,2.34,80,2.161,81,2.18,82,2.475,83,2.18,84,2.923,85,2.923,86,2.923,87,2.923,88,2.923,89,2.475,90,2.923,91,0.015,92,0.015]],["title/modules/AppModule.html",[93,1.439,94,2.318]],["body/modules/AppModule.html",[0,0.127,3,0.396,4,0.441,5,0.353,20,0.025,40,0.587,41,0.922,55,0.441,91,0.02,92,0.02,93,2.349,94,4.573,95,2.201,96,2.707,97,3.887,98,3.887,99,4.068,100,3.733,101,3.161,102,2.373,103,1.669,104,4.59,105,4.21,106,4.59,107,4.59]],["title/guards/AuthGuard.html",[108,2.579,109,2.318]],["body/guards/AuthGuard.html",[0,0.115,3,0.359,4,0.399,5,0.32,8,1.994,10,0.399,15,1.394,19,0.563,20,0.025,23,0.795,30,1.394,31,1.306,32,1.394,34,1.166,40,0.51,41,0.836,55,0.399,68,1.866,83,3.101,91,0.019,92,0.019,109,3.557,110,4.159,111,3.521,112,2.272,113,6.157,114,1.994,115,3.521,116,3.118,117,4.159,118,5.307,119,4.591,120,4.159,121,3.101,122,3.557,123,1.142,124,4.159,125,2.329,126,4.159,127,3.101,128,4.159,129,2.063,130,1.855,131,3.521,132,4.159,133,1.617,134,2.788]],["title/injectables/AuthService.html",[116,1.658,123,0.744]],["body/injectables/AuthService.html",[0,0.08,3,0.25,4,0.279,5,0.223,10,0.279,11,1.092,12,2.272,13,2.512,15,1.092,16,1.77,19,0.562,20,0.026,21,0.813,23,0.794,30,1.276,31,1.195,32,1.276,34,1.488,40,0.509,41,0.583,55,0.279,57,2.971,68,1.55,79,2.328,80,2.149,91,0.015,92,0.015,112,2.272,114,1.391,116,1.993,123,0.895,125,1.624,127,4.8,129,2.183,130,2.167,133,1.616,135,1.207,136,2.456,137,5.843,138,4.157,139,4.157,140,2.163,141,2.431,142,4.157,143,4.157,144,1.921,145,2.901,146,4.157,147,4.157,148,4.188,149,4.948,150,4.157,151,2.743,152,4.492,153,4.157,154,2.901,155,4.157,156,4.157,157,4.157,158,1.624,159,3.623,160,4.157,161,2.901,162,2.901,163,1.944,164,2.901,165,2.149,166,6.018,167,2.163,168,2.901,169,2.901,170,2.901,171,2.901,172,1.993,173,2.901,174,2.901,175,2.456,176,1.77,177,2.163,178,1.944,179,2.456]],["title/classes/BookRoomDto.html",[0,0.096,180,2.318]],["body/classes/BookRoomDto.html",[0,0.162,2,1.453,3,0.419,4,0.466,5,0.374,10,0.466,11,1.535,19,0.515,20,0.025,21,1.362,23,0.727,40,0.466,55,0.466,91,0.021,92,0.021,180,3.916,181,4.947,182,2.72,183,5.306,184,4.357,185,4.857,186,2.963,187,4.947,188,4.357,189,2.021]],["title/classes/CommunicationGateway.html",[0,0.096,190,2.318]],["body/classes/CommunicationGateway.html",[0,0.029,1,1.235,2,0.315,3,0.091,4,0.101,5,0.081,8,0.883,10,0.101,11,0.484,12,1.715,13,1.269,15,0.484,16,1.124,19,0.533,20,0.026,21,1.288,23,0.753,30,1.287,31,1.205,32,1.287,34,1.333,40,0.494,41,0.212,45,3.177,46,0.47,48,0.706,50,0.59,51,0.505,52,0.59,53,0.59,55,0.101,57,1.032,68,1.641,69,2.747,76,0.706,77,2.375,78,1.604,80,0.952,91,0.007,92,0.007,103,0.67,112,2.414,114,0.883,129,1.539,130,2.421,151,0.952,158,2.663,165,2.92,167,1.374,172,2.561,176,1.498,180,1.974,190,1.235,191,0.892,192,2.455,193,2.455,194,2.06,195,1.842,196,2.455,197,1.842,198,2.455,199,2.455,200,2.455,201,2.455,202,2.455,203,2.455,204,2.455,205,2.078,206,0.892,207,1.641,208,2.455,209,1.649,210,2.217,211,2.047,212,1.842,213,2.455,214,1.842,215,1.053,216,1.374,217,2.493,218,1.374,219,1.374,220,1.053,221,6.359,222,4.411,223,3.079,224,1.053,225,1.053,226,1.235,227,2.757,228,1.842,229,1.053,230,1.374,231,1.842,232,1.053,233,1.974,234,1.053,235,1.053,236,1.235,237,1.56,238,1.053,239,1.974,240,1.053,241,1.053,242,1.235,243,1.053,244,1.974,245,1.053,246,1.053,247,1.235,248,2.493,249,1.053,250,1.974,251,1.053,252,1.053,253,1.124,254,1.053,255,1.974,256,1.053,257,1.053,258,1.374,259,1.374,260,1.053,261,1.974,262,1.053,263,1.053,264,2.832,265,1.235,266,1.053,267,1.974,268,1.053,269,1.053,270,1.374,271,1.374,272,1.56,273,1.053,274,1.796,275,1.053,276,1.053,277,1.053,278,4.594,279,1.053,280,1.053,281,4.594,282,1.053,283,4.594,284,1.053,285,1.842,286,0.786,287,0.706,288,1.374,289,0.786,290,0.786,291,0.706,292,0.786,293,1.235,294,1.053,295,3.079,296,1.053,297,1.053,298,0.892,299,0.892,300,1.053,301,0.892,302,1.053,303,1.053,304,1.053,305,1.053,306,1.053,307,1.053,308,1.053,309,1.842,310,1.053,311,1.053,312,1.842,313,1.842,314,2.196,315,1.842,316,1.235,317,0.892,318,0.892,319,1.053,320,0.892,321,1.053,322,1.235,323,1.053,324,1.56,325,1.374,326,0.883,327,3.678,328,2.078,329,3.734,330,4.523,331,1.053,332,1.053,333,1.053,334,1.842,335,1.053,336,0.786,337,0.892,338,1.053,339,1.053,340,1.842,341,1.053,342,1.053,343,1.56,344,1.053,345,1.053,346,1.053,347,1.053,348,2.455,349,1.053,350,1.053,351,1.053,352,1.053,353,1.053,354,3.678,355,1.842,356,1.053,357,1.053,358,1.053,359,1.053,360,1.053,361,1.053,362,1.053,363,0.892,364,1.053,365,1.053,366,1.053,367,1.053,368,1.053,369,1.053,370,1.053,371,1.053,372,1.053,373,1.053,374,1.053,375,1.053,376,1.053,377,1.053,378,1.053,379,1.053,380,1.053,381,1.053,382,1.053,383,1.053,384,0.892,385,1.053,386,1.053,387,1.053,388,0.47,389,0.892,390,0.892,391,1.053,392,1.053,393,1.053,394,1.053,395,1.842]],["title/modules/CommunicationModule.html",[93,1.439,99,2.11]],["body/modules/CommunicationModule.html",[0,0.107,3,0.332,4,0.37,5,0.296,20,0.026,40,0.632,41,0.774,55,0.37,91,0.018,92,0.018,93,2.101,95,1.846,96,2.421,99,4.233,100,3.567,101,2.827,102,1.991,103,1.4,105,3.765,116,3.055,141,2.651,190,3.384,209,3.567,299,3.26,396,3.26,397,3.26,398,3.26,399,3.887,400,3.567,401,3.85,402,3.384,403,3.85,404,3.26,405,2.871,406,2.349,407,3.85,408,3.85]],["title/injectables/CommunicationService.html",[123,0.744,209,1.936]],["body/injectables/CommunicationService.html",[0,0.068,3,0.212,4,0.236,5,0.189,10,0.236,12,2.284,15,0.968,19,0.52,20,0.026,23,0.734,30,1.288,31,1.207,32,1.288,34,1.472,40,0.577,41,0.494,45,2.643,46,1.097,47,1.501,48,1.649,50,1.377,51,1.179,52,1.377,53,1.377,55,0.236,57,1.377,68,1.565,69,2.293,77,1.904,78,1.179,79,2.063,91,0.013,92,0.013,112,2.336,114,1.766,115,2.083,116,2.643,123,0.793,127,3.293,129,2.567,130,2.187,131,2.083,133,1.432,135,1.023,144,1.409,158,2.063,165,2.715,172,1.179,176,1.501,178,2.469,194,3.626,207,2.549,209,2.063,218,2.747,219,3.657,227,1.097,286,1.834,287,1.649,291,1.649,292,1.834,298,2.083,314,1.834,318,2.083,322,1.649,324,2.083,325,1.834,326,1.179,328,2.083,329,2.083,405,1.834,409,2.083,410,3.684,411,3.684,412,3.684,413,2.46,414,3.684,415,2.46,416,3.684,417,3.684,418,3.684,419,3.684,420,3.119,421,4.903,422,4.903,423,3.684,424,2.46,425,3.684,426,3.684,427,3.684,428,3.684,429,2.46,430,2.747,431,3.684,432,3.684,433,3.119,434,3.684,435,2.747,436,1.649,437,2.46,438,2.46,439,2.46,440,2.083,441,2.083,442,2.46,443,2.46,444,2.46,445,2.083,446,2.46,447,2.46,448,2.46,449,2.46,450,2.46,451,2.083,452,2.46]],["title/injectables/EventNameBindingInterceptor.html",[123,0.744,223,2.318]],["body/injectables/EventNameBindingInterceptor.html",[0,0.11,3,0.344,4,0.382,5,0.307,8,1.91,10,0.382,13,2.059,15,1.356,19,0.547,20,0.025,23,0.773,30,1.356,31,1.544,32,1.356,34,1.117,40,0.582,41,0.8,45,2.475,46,1.777,51,1.91,55,0.382,68,1.271,69,1.657,73,2.67,91,0.019,92,0.019,112,2.226,114,1.91,119,4.517,121,3.849,122,3.46,123,1.111,125,2.23,133,1.548,135,1.657,223,3.46,291,4.061,453,4.849,454,2.97,455,4.849,456,3.983,457,3.983,458,5.162,459,3.372,460,4.849,461,5.129,462,3.983,463,4.37,464,3.372,465,2.97,466,3.372,467,3.983,468,3.372]],["title/classes/HttpExceptionFilter.html",[0,0.096,469,2.579]],["body/classes/HttpExceptionFilter.html",[0,0.113,2,1.224,3,0.353,4,0.393,5,0.315,7,3.051,8,2.518,9,4.911,10,0.393,15,1.38,16,3.538,19,0.434,20,0.025,23,0.613,24,3.464,25,3.916,27,3.888,28,4.563,30,1.075,31,1.007,32,1.075,33,3.916,34,1.147,35,3.051,40,0.557,41,0.822,42,3.051,44,2.742,53,2.291,55,0.393,68,1.676,78,2.934,81,3.051,82,3.464,89,3.464,91,0.019,92,0.019,316,3.52,469,3.916,470,4.447,471,5.181,472,3.52,473,3.916,474,4.091,475,4.091,476,3.464,477,3.464,478,3.464,479,3.464,480,4.091]],["title/classes/InviteToRoomDto.html",[0,0.096,233,2.318]],["body/classes/InviteToRoomDto.html",[0,0.157,2,1.377,3,0.398,4,0.442,5,0.354,10,0.442,11,1.486,19,0.6,20,0.025,21,1.586,23,0.847,40,0.442,55,0.442,91,0.02,92,0.02,144,1.805,182,2.578,186,2.809,189,1.915,233,3.791,388,2.731,481,5.184,482,5.184,483,2.712,484,3.086,485,3.898,486,2.38,487,3.791,488,2.712,489,3.086,490,2.38,491,2.38,492,3.086]],["title/classes/JoinRoomDto.html",[0,0.096,239,2.318]],["body/classes/JoinRoomDto.html",[0,0.162,2,1.453,3,0.419,4,0.466,5,0.374,10,0.466,11,1.535,19,0.515,20,0.025,21,1.362,23,0.727,40,0.466,55,0.466,91,0.021,92,0.021,144,1.865,182,2.72,186,2.963,189,2.021,239,3.916,388,2.795,486,2.511,488,2.801,490,2.511,491,2.511,493,4.947]],["title/classes/KickOutOfRoomDto.html",[0,0.096,244,2.318]],["body/classes/KickOutOfRoomDto.html",[0,0.156,2,1.365,3,0.394,4,0.438,5,0.351,10,0.438,11,1.478,19,0.596,20,0.025,21,1.577,23,0.842,40,0.438,55,0.438,91,0.02,92,0.02,103,2.218,144,1.795,182,2.555,186,2.783,189,1.898,244,3.77,388,2.72,483,2.697,484,3.058,485,3.863,486,2.359,487,3.77,488,2.697,489,3.058,490,2.359,491,2.359,492,3.058,494,5.163,495,5.163]],["title/classes/LeaveRoomDto.html",[0,0.096,250,2.318]],["body/classes/LeaveRoomDto.html",[0,0.162,2,1.453,3,0.419,4,0.466,5,0.374,10,0.466,11,1.535,19,0.515,20,0.025,21,1.362,23,0.727,40,0.466,55,0.466,91,0.021,92,0.021,144,1.865,182,2.72,186,2.963,189,2.021,250,3.916,388,2.795,486,2.511,488,2.801,490,2.511,491,2.511,496,4.947]],["title/modules/MessageModule.html",[93,1.439,399,2.11]],["body/modules/MessageModule.html",[0,0.122,3,0.381,4,0.424,5,0.34,20,0.025,40,0.577,41,0.887,55,0.424,91,0.02,92,0.02,93,2.293,95,2.117,96,2.642,101,3.086,102,2.283,103,1.606,141,2.747,210,3.891,399,4.167,402,3.694,406,2.694,497,3.738,498,3.738,499,3.738,500,4.415,501,4.11,502,4.415]],["title/injectables/MessageService.html",[123,0.744,210,1.936]],["body/injectables/MessageService.html",[0,0.112,3,0.348,4,0.387,5,0.31,10,0.387,12,2.02,15,1.365,19,0.551,20,0.026,23,0.778,30,1.365,31,1.279,32,1.365,34,1.457,40,0.553,41,0.809,55,0.387,78,2.492,91,0.019,92,0.019,114,1.93,123,1.119,125,2.254,133,1.565,135,1.675,140,3.002,141,2.683,165,2.687,172,2.492,210,2.91,216,3.876,274,3.711,343,5.15,406,2.456,483,2.759,503,3.408,504,5.756,505,4.026,506,4.026,507,6.297,508,4.026,509,4.026,510,4.026,511,3.002]],["title/injectables/ParseIdPipe.html",[123,0.744,512,2.579]],["body/injectables/ParseIdPipe.html",[0,0.126,3,0.393,4,0.437,5,0.35,8,2.181,10,0.437,15,1.475,19,0.482,20,0.025,23,0.681,30,1.195,31,1.119,32,1.195,34,1.275,40,0.437,41,0.914,55,0.437,57,2.547,91,0.02,92,0.02,123,1.208,129,1.768,133,1.768,135,1.892,151,2.352,172,2.181,326,2.181,472,3.049,512,4.186,513,4.753,514,3.851,515,5.614,516,5.614,517,4.549,518,4.262,519,5.614,520,4.549,521,3.392,522,4.549]],["title/injectables/PrismaService.html",[123,0.744,141,1.439]],["body/injectables/PrismaService.html",[0,0.119,3,0.37,4,0.412,5,0.33,8,2.057,10,0.412,15,1.422,19,0.455,20,0.025,23,0.81,30,1.127,31,1.055,32,1.127,34,1.517,40,0.52,41,0.862,55,0.412,91,0.019,92,0.019,112,2.588,123,1.165,130,2.414,135,1.784,141,2.252,436,2.875,523,3.632,524,4.036,525,4.422,526,5.412,527,6.556,528,5.412,529,6.227,530,4.289,531,3.632,532,4.289,533,4.289,534,4.289,535,4.289]],["title/classes/RedisIoAdapter.html",[0,0.096,536,2.579]],["body/classes/RedisIoAdapter.html",[0,0.102,2,1.098,3,0.317,4,0.353,5,0.283,10,0.353,11,1.286,12,2.444,13,2.845,15,1.286,19,0.583,20,0.025,21,1.03,23,0.879,30,0.965,31,0.904,32,0.965,34,1.372,40,0.587,46,2.183,55,0.353,68,1.756,91,0.018,92,0.018,112,2.139,122,3.28,133,1.427,163,2.461,194,2.74,483,2.638,524,3.649,536,3.649,537,3.109,538,5.503,539,5.503,540,3.835,541,5.869,542,4.893,543,4.893,544,3.672,545,3.357,546,3.672,547,3.672,548,4.893,549,4.969,550,5.869,551,3.672,552,3.109,553,3.672,554,3.109,555,2.461,556,3.672,557,3.109,558,3.109,559,3.672,560,3.672,561,4.893,562,3.672,563,3.672,564,3.672,565,3.672,566,3.672]],["title/classes/RespondRoomInvitationDto.html",[0,0.096,255,2.318]],["body/classes/RespondRoomInvitationDto.html",[0,0.157,2,1.373,3,0.396,4,0.441,5,0.353,10,0.441,11,1.483,19,0.599,20,0.025,21,1.583,23,0.845,40,0.441,55,0.441,91,0.02,92,0.02,144,1.802,184,4.21,187,5.177,189,1.91,227,2.727,255,3.784,388,2.727,486,2.373,488,2.707,490,2.373,491,2.373,567,5.177,568,3.887,569,5.177,570,4.59,571,4.59]],["title/modules/RoomModule.html",[93,1.439,400,1.936]],["body/modules/RoomModule.html",[0,0.127,3,0.396,4,0.441,5,0.353,20,0.025,40,0.542,41,0.922,55,0.441,91,0.02,92,0.02,93,2.349,95,2.201,96,2.707,101,3.161,102,2.373,103,1.669,211,3.61,400,3.782,402,3.784,501,4.21,572,3.887,573,3.887,574,3.887,575,4.59,576,4.59]],["title/injectables/RoomService.html",[123,0.744,211,1.788]],["body/injectables/RoomService.html",[0,0.025,3,0.079,4,0.088,5,0.07,10,0.088,11,0.428,12,1.424,13,1.136,15,0.428,19,0.491,20,0.026,21,0.257,23,0.693,30,1.177,31,1.102,32,1.177,34,1.559,40,0.325,41,0.184,45,1.277,47,0.559,48,0.614,51,0.439,55,0.088,57,2.736,68,1.793,79,2.508,80,0.473,91,0.006,92,0.006,103,0.592,112,2.351,123,0.35,129,1.899,130,2.531,133,1.899,134,1.091,135,0.381,144,1.93,151,1.748,158,0.912,163,0.614,165,2.905,172,2.396,176,1.341,177,1.214,183,2.585,184,1.639,211,0.842,218,2.522,226,1.091,227,3.048,230,1.987,236,2.456,237,2.256,242,3.002,247,1.786,248,4.396,253,2.515,258,1.214,259,1.987,270,1.987,271,1.987,272,1.861,322,1.473,325,1.214,326,1.621,363,0.775,384,0.775,388,2.596,389,2.863,420,1.378,430,1.214,435,3.643,472,1.473,482,3.102,483,2.942,495,3.102,518,0.614,540,2.063,545,1.341,549,1.378,555,0.614,569,2.585,577,0.775,578,1.628,579,1.628,580,1.628,581,1.628,582,2.198,583,2.198,584,1.628,585,0.916,586,2.256,587,3.382,588,1.091,589,3.102,590,3.664,591,2.664,592,3.053,593,0.775,594,2.664,595,1.378,596,1.628,597,1.378,598,1.628,599,0.916,600,1.628,601,0.916,602,4.231,603,2.256,604,3.49,605,1.628,606,0.916,607,1.639,608,1.628,609,3.382,610,1.628,611,1.628,612,0.916,613,1.628,614,0.916,615,1.628,616,1.628,617,0.916,618,1.628,619,3.792,620,1.378,621,2.256,622,1.628,623,3.053,624,1.628,625,1.628,626,0.916,627,1.628,628,3.382,629,1.628,630,3.382,631,1.628,632,0.916,633,1.628,634,1.628,635,1.628,636,1.628,637,0.916,638,0.916,639,1.378,640,1.628,641,1.628,642,3.053,643,1.628,644,1.987,645,0.916,646,2.863,647,0.916,648,1.628,649,1.628,650,1.628,651,3.382,652,1.628,653,0.916,654,0.916,655,0.916,656,0.683,657,0.916,658,0.916,659,0.916,660,2.198,661,0.916,662,1.628,663,0.916,664,0.916,665,0.916,666,0.916,667,2.256,668,2.256,669,0.916,670,3.908,671,0.916,672,2.732,673,2.664,674,0.916,675,0.916,676,1.628,677,3.664,678,2.664,679,0.916,680,0.916,681,0.916,682,0.916,683,0.916,684,0.916,685,0.916,686,0.916,687,3.053,688,0.916,689,0.916,690,0.916,691,0.916,692,3.275,693,0.916,694,2.198,695,0.916,696,2.664,697,0.916,698,2.664,699,1.628,700,1.628,701,1.628,702,1.628,703,1.628,704,1.628,705,1.628,706,3.664,707,1.628,708,1.628,709,1.628,710,1.628,711,0.775,712,0.916,713,0.916,714,0.916,715,0.916,716,0.916,717,0.916,718,2.198,719,0.916,720,0.916,721,0.916,722,0.916,723,0.916,724,0.916,725,0.916,726,1.628,727,1.628,728,2.198,729,0.916,730,0.916,731,0.916,732,0.916,733,0.916,734,0.916,735,0.916,736,0.916,737,0.916,738,1.628,739,0.916,740,0.916,741,1.628,742,0.916,743,0.916,744,0.916,745,0.916,746,0.916,747,0.916,748,0.916,749,0.916]],["title/classes/SendGroupMessageDto.html",[0,0.096,261,2.318]],["body/classes/SendGroupMessageDto.html",[0,0.156,2,1.369,3,0.395,4,0.439,5,0.352,10,0.439,11,1.48,19,0.597,20,0.025,21,1.58,23,0.844,40,0.439,55,0.439,91,0.02,92,0.02,144,2.034,188,4.202,189,1.904,261,3.777,265,4.093,388,2.724,486,2.366,488,2.927,490,2.366,491,2.366,750,4.553,751,3.413,752,5.17,753,3.875,754,3.875,755,3.875]],["title/classes/SendPrivateMessageDto.html",[0,0.096,274,2.11]],["body/classes/SendPrivateMessageDto.html",[0,0.156,2,1.365,3,0.394,4,0.438,5,0.351,10,0.438,11,1.478,12,2.37,19,0.596,20,0.025,21,1.577,23,0.842,40,0.438,55,0.438,91,0.02,92,0.02,144,1.795,188,4.194,189,1.898,274,3.431,483,2.697,484,3.058,487,3.77,488,2.697,489,3.058,492,3.058,750,4.547,751,3.402,752,5.163,753,3.863,754,3.863,755,3.863,756,6.098]],["title/injectables/SocketUserIdBindingInterceptor.html",[123,0.744,295,2.318]],["body/injectables/SocketUserIdBindingInterceptor.html",[0,0.101,3,0.314,4,0.349,5,0.28,8,1.744,10,0.349,15,1.277,19,0.515,20,0.026,23,0.728,30,1.277,31,1.196,32,1.277,34,1.02,40,0.602,41,0.731,45,2.331,46,1.622,50,2.036,51,1.744,52,2.036,53,2.036,55,0.349,68,1.552,69,1.513,73,2.438,76,2.438,77,1.88,78,1.744,91,0.017,92,0.017,112,2.129,114,1.744,119,4.36,121,3.625,122,3.259,123,1.046,125,2.036,129,2.129,130,1.622,133,1.414,135,1.513,151,2.831,167,2.712,177,2.712,179,3.079,206,3.079,207,2.797,295,3.259,320,3.079,326,1.744,330,3.079,454,2.712,455,4.637,459,3.079,460,4.637,461,4.95,463,4.116,464,3.079,465,2.712,466,3.079,468,3.079,757,4.637,758,3.637,759,3.637,760,3.637,761,4.637,762,3.637,763,3.637,764,3.637,765,3.637,766,3.637]],["title/classes/TransferOwnershipDto.html",[0,0.096,267,2.318]],["body/classes/TransferOwnershipDto.html",[0,0.157,2,1.377,3,0.398,4,0.442,5,0.354,10,0.442,11,1.486,19,0.6,20,0.025,21,1.586,23,0.847,40,0.442,55,0.442,91,0.02,92,0.02,144,1.805,189,1.915,267,3.791,388,2.731,483,2.712,484,3.086,486,2.38,487,3.791,488,2.712,489,3.086,490,2.38,491,2.38,492,3.086,646,5.184,767,5.184,768,3.898,769,4.604,770,4.604]],["title/controllers/UserController.html",[771,2.318,772,2.318]],["body/controllers/UserController.html",[0,0.109,3,0.34,4,0.378,5,0.303,10,0.378,15,1.347,19,0.418,20,0.026,21,1.105,23,0.59,30,1.035,31,0.97,32,1.035,34,1.105,40,0.579,41,0.792,42,4.499,43,5.109,44,2.642,55,0.378,68,1.258,81,4.499,83,4.249,91,0.018,92,0.018,109,2.642,112,2.215,125,2.207,129,1.993,130,1.758,165,2.65,207,2.541,511,2.939,588,3.436,771,2.642,772,3.436,773,3.337,774,3.337,775,3.941,776,2.939,777,4.824,778,3.941,779,5.126,780,3.941,781,3.823,782,5.126,783,5.126,784,5.126,785,3.941,786,3.941,787,3.337,788,3.941,789,3.941,790,4.341,791,3.941,792,3.941]],["title/modules/UserModule.html",[93,1.439,100,1.936]],["body/modules/UserModule.html",[0,0.11,3,0.343,4,0.381,5,0.306,20,0.025,40,0.617,41,0.798,55,0.381,91,0.019,92,0.019,93,2.144,95,1.905,96,2.47,100,3.854,101,2.885,102,2.054,103,1.445,105,3.842,116,3.081,141,2.673,207,3.055,400,3.598,402,3.454,404,3.363,405,2.962,406,2.424,501,3.842,772,3.834,773,4.363,787,3.363,793,3.363,794,3.972,795,3.363,796,3.363,797,3.972,798,3.972]],["title/injectables/UserService.html",[123,0.744,207,1.542]],["body/injectables/UserService.html",[0,0.038,3,0.118,4,0.131,5,0.105,10,0.131,11,0.603,12,1.518,13,1.539,15,0.603,19,0.581,20,0.026,21,0.382,23,0.821,30,1.411,31,1.321,32,1.411,34,1.7,40,0.433,41,0.274,45,2.759,51,0.653,55,0.131,68,1.81,79,2.935,91,0.008,92,0.008,112,2.515,114,1.101,123,0.494,129,2.562,130,2.599,133,2.131,134,0.912,135,0.566,140,1.015,141,1.762,144,1.573,151,3.307,158,0.762,163,0.912,165,2.834,175,1.152,176,2.383,178,1.539,207,1.024,211,2.33,227,1.024,253,1.401,290,1.015,301,1.152,314,2.22,316,2.344,317,1.152,322,1.539,326,0.653,336,2.608,390,2.961,406,0.83,430,1.712,435,2.608,436,0.912,441,1.152,451,2.961,483,2.972,511,1.712,521,1.712,540,2.584,545,1.817,555,0.912,588,2.839,602,2.961,603,2.961,604,1.944,607,2.608,644,1.712,656,1.015,667,1.944,668,1.944,672,1.712,692,0.912,711,1.152,761,4.991,776,1.712,777,1.944,781,1.712,790,1.944,799,1.152,800,2.296,801,2.296,802,2.296,803,2.296,804,2.296,805,2.296,806,2.296,807,2.296,808,2.296,809,2.296,810,2.296,811,4.235,812,1.361,813,2.296,814,3.497,815,2.296,816,5.241,817,1.361,818,3.497,819,2.296,820,2.296,821,2.296,822,1.361,823,2.296,824,2.296,825,3.497,826,2.296,827,1.361,828,2.296,829,1.361,830,2.296,831,1.361,832,4.235,833,2.296,834,1.361,835,2.296,836,1.361,837,2.296,838,1.361,839,2.296,840,1.361,841,2.296,842,1.361,843,2.296,844,2.296,845,1.361,846,1.361,847,1.361,848,1.361,849,1.361,850,1.361,851,2.296,852,1.361,853,1.361,854,1.361,855,2.296,856,1.361,857,2.296,858,2.296,859,3.497,860,2.978,861,2.296,862,1.361,863,1.361,864,2.296,865,1.361,866,1.944,867,1.361,868,2.296,869,1.361,870,1.361,871,2.296,872,1.361,873,1.361,874,1.361,875,1.361]],["title/classes/WsExceptionsFilter.html",[0,0.096,293,2.318]],["body/classes/WsExceptionsFilter.html",[0,0.11,2,1.188,3,0.343,4,0.381,5,0.306,10,0.381,15,1.354,16,3.489,19,0.421,20,0.026,23,0.595,25,3.842,27,3.834,28,4.513,30,1.044,31,0.977,32,1.044,33,3.842,34,1.114,35,2.962,40,0.602,41,0.798,45,2.47,46,1.772,50,2.224,51,1.905,52,2.224,53,2.224,55,0.381,68,1.268,69,1.653,70,3.363,73,2.663,76,2.663,77,2.054,78,3.006,80,2.957,91,0.019,92,0.019,286,2.962,287,2.663,293,3.454,471,4.363,472,3.454,473,3.842,476,3.363,477,3.363,478,3.363,479,3.363,524,3.842,876,4.363,877,3.363,878,5.719,879,3.972,880,3.972]],["title/coverage.html",[881,3.979]],["body/coverage.html",[0,0.182,1,1.848,5,0.212,6,2.335,7,2.988,12,1.072,14,2.056,19,0.292,20,0.025,22,2.056,31,0.678,47,1.682,69,1.667,91,0.014,92,0.014,103,1.003,108,2.056,109,1.848,111,2.335,116,1.322,123,1.332,129,1.072,136,2.335,141,1.147,151,1.426,159,2.056,172,1.322,180,1.848,181,2.335,182,3.082,190,1.848,191,2.335,207,1.23,209,1.544,210,1.544,211,1.426,223,1.848,227,1.23,233,1.848,239,1.848,244,1.848,250,1.848,255,1.848,261,1.848,265,1.848,267,1.848,274,1.682,288,2.056,289,2.056,293,1.848,295,1.848,326,3.347,409,2.335,453,2.335,454,2.988,469,2.056,470,2.335,481,2.335,493,2.335,494,2.335,496,2.335,503,2.335,512,2.056,513,2.335,514,2.335,523,2.335,536,2.056,537,2.335,545,1.682,567,2.335,568,2.335,577,2.335,750,2.988,751,2.988,757,2.335,767,2.335,768,2.335,771,1.848,772,1.848,774,2.335,799,2.335,876,2.335,877,2.335,881,2.335,882,2.335,883,2.757,884,2.757,885,2.988,886,5.505,887,2.335,888,6.601,889,6.288,890,2.335,891,2.335,892,2.335,893,2.335,894,2.335,895,2.335,896,2.335,897,4.007,898,2.335,899,2.335,900,3.393,901,3.393,902,5.743,903,6.288,904,2.757,905,2.757,906,2.335,907,2.335,908,2.335,909,2.335,910,2.335,911,2.335,912,2.335,913,4.007,914,4.007,915,2.757,916,2.757,917,2.757,918,2.757,919,2.757,920,2.757,921,2.757,922,2.757,923,2.757,924,2.757]],["title/dependencies.html",[96,1.991,925,2.453]],["body/dependencies.html",[0,0.154,20,0.026,41,0.903,44,3.735,46,2.486,54,3.805,91,0.02,92,0.02,96,2.155,148,3.351,189,1.87,287,3.013,436,3.013,465,3.351,554,4.718,555,3.013,557,3.805,558,3.805,926,5.572,927,4.494,928,6.057,929,5.572,930,5.572,931,4.494,932,4.494,933,4.494,934,4.494,935,4.494,936,4.494,937,4.494,938,3.805,939,4.494,940,4.494,941,4.494,942,4.494,943,4.494,944,4.494,945,4.494]],["title/miscellaneous/enumerations.html",[946,1.389,947,3.517]],["body/miscellaneous/enumerations.html",[10,0.335,20,0.025,50,2.649,80,2.446,91,0.017,92,0.017,178,3.172,205,2.958,226,2.341,227,2.111,236,2.341,242,2.341,247,2.341,253,2.131,290,3.528,291,3.172,292,3.528,518,4.746,607,2.605,619,2.958,639,4.006,656,3.528,692,3.597,946,1.675,947,2.958,948,3.493,949,4.006,950,3.493,951,3.493,952,5.366,953,4.732,954,3.493,955,3.493,956,3.493,957,3.493,958,4.006,959,4.732,960,3.493,961,3.493,962,3.493,963,3.493,964,3.493,965,3.493,966,3.493,967,3.493,968,4.732,969,3.493,970,3.493,971,3.493,972,3.493,973,3.493,974,3.493,975,3.493,976,3.493,977,3.493,978,3.493,979,3.493,980,3.493,981,3.493,982,3.493,983,3.493,984,3.493,985,3.493,986,3.493,987,3.493,988,3.493,989,3.493,990,3.493,991,3.493,992,3.493,993,3.493,994,3.493,995,3.493,996,3.493,997,3.493,998,2.958,999,3.493,1000,3.493,1001,3.493,1002,3.493,1003,3.493,1004,3.493]],["title/miscellaneous/functions.html",[946,1.389,1005,3.517]],["body/miscellaneous/functions.html",[10,0.442,19,0.649,20,0.024,30,1.609,31,1.506,32,1.609,69,2.547,91,0.02,92,0.02,525,4.976,885,3.433,887,5.184,890,3.898,891,4.789,892,4.789,893,3.898,894,4.789,895,3.898,896,4.789,911,3.898,912,5.184,946,2.207,1005,3.898,1006,4.604,1007,3.898,1008,4.604,1009,4.604,1010,4.604,1011,4.604,1012,4.604,1013,4.604]],["title/index.html",[10,0.278,1014,2.453,1015,2.453]],["body/index.html",[5,0.263,12,1.327,20,0.023,46,1.523,69,1.42,77,1.765,78,2.233,91,0.017,92,0.017,102,1.765,103,1.242,129,2.214,148,3.474,149,3.944,194,2.608,216,2.546,217,2.891,226,2.288,227,2.933,230,2.546,236,2.288,242,3.123,247,2.288,253,2.083,258,2.546,259,2.546,264,3.944,265,3.554,270,2.546,271,2.546,316,2.288,336,2.546,337,2.891,445,2.891,531,3.944,540,2.842,586,2.891,588,2.288,589,2.891,644,2.546,672,3.474,776,2.546,781,4.248,866,2.891,938,4.49,958,2.891,1016,2.546,1017,4.658,1018,2.891,1019,3.414,1020,3.414,1021,3.414,1022,2.891,1023,3.414,1024,3.414,1025,3.414,1026,3.414,1027,3.414,1028,3.414,1029,3.414,1030,3.414,1031,3.414,1032,4.658,1033,3.414,1034,3.414,1035,3.414,1036,4.658,1037,3.414,1038,3.414,1039,3.414,1040,4.658,1041,5.303,1042,3.414,1043,3.414,1044,3.414,1045,3.414,1046,3.414,1047,6.298,1048,5.963,1049,3.414,1050,3.414,1051,3.414,1052,3.414,1053,5.303,1054,3.414,1055,3.414,1056,3.414,1057,3.414,1058,3.414,1059,3.414,1060,3.414,1061,3.414,1062,3.414,1063,2.546,1064,3.414,1065,3.414,1066,3.414,1067,3.414,1068,2.891,1069,4.658,1070,4.658,1071,4.658,1072,3.414,1073,3.414,1074,3.414,1075,3.414,1076,3.414,1077,3.414,1078,3.414,1079,2.891,1080,2.546,1081,2.891,1082,2.891,1083,2.891,1084,2.891]],["title/license.html",[1014,2.453,1015,2.453,1080,2.161]],["body/license.html",[20,0.019,77,2.121,91,0.019,92,0.019,103,1.492,152,3.473,219,3.059,433,3.473,440,4.454,597,4.917,620,3.473,621,3.473,882,3.473,1079,3.473,1080,3.059,1081,4.917,1084,3.473,1085,4.102,1086,4.102,1087,4.102,1088,4.102,1089,5.261,1090,4.102,1091,4.102,1092,4.102,1093,4.102,1094,4.102,1095,4.102,1096,5.261,1097,6.741,1098,4.102,1099,4.102,1100,4.102,1101,4.102,1102,5.261,1103,4.102,1104,4.102,1105,4.102,1106,4.102,1107,4.102,1108,4.102,1109,4.102,1110,4.102,1111,4.102,1112,5.261,1113,4.102,1114,4.102,1115,4.102,1116,4.102,1117,4.102,1118,4.102,1119,5.261,1120,5.261,1121,4.102,1122,4.102,1123,4.102,1124,4.102,1125,4.102,1126,4.102,1127,4.102,1128,4.102,1129,4.102,1130,4.102,1131,4.102,1132,4.102,1133,4.102,1134,4.102,1135,4.102,1136,4.102,1137,4.102,1138,4.102,1139,4.102,1140,4.102,1141,4.102,1142,4.102,1143,4.102,1144,4.102,1145,4.102]],["title/modules.html",[95,2.253]],["body/modules.html",[20,0.021,91,0.021,92,0.021,94,3.375,95,2.414,99,3.072,100,2.82,399,3.072,400,2.82,1146,6.718,1147,6.718,1148,6.718,1149,6.718]],["title/overview.html",[1016,3.504]],["body/overview.html",[2,1.115,20,0.025,91,0.018,92,0.018,94,4.232,95,1.787,96,2.369,97,3.155,98,3.155,99,4.202,100,3.821,101,2.767,102,1.927,103,1.355,108,2.779,116,2.83,135,1.55,141,2.556,207,2.873,209,3.104,210,3.607,211,3.33,396,3.155,397,3.155,398,3.155,399,3.99,400,3.607,497,3.155,498,3.155,499,3.155,572,3.155,573,3.155,574,3.155,692,3.312,771,2.498,793,3.155,795,3.155,796,3.155,998,3.155,1016,2.779,1150,3.727,1151,3.727]],["title/properties.html",[11,1.091,925,2.453]],["body/properties.html",[11,1.378,20,0.024,91,0.022,92,0.022,158,2.938,194,2.938,1018,4.442,1022,4.442,1063,3.912,1082,4.442,1083,4.442,1152,5.246,1153,5.246,1154,5.246]],["title/miscellaneous/typealiases.html",[946,1.389,1155,4.153]],["body/miscellaneous/typealiases.html",[10,0.429,19,0.73,20,0.022,26,4.701,52,3.109,91,0.02,92,0.02,144,1.772,227,2.476,473,4.14,946,2.142,1156,4.468,1157,6.716,1158,6.318,1159,5.552,1160,5.552,1161,5.552,1162,5.552,1163,5.552,1164,4.468,1165,5.552,1166,5.552,1167,5.552,1168,4.468,1169,6.844,1170,4.468,1171,4.468]],["title/miscellaneous/variables.html",[946,1.389,1172,3.517]],["body/miscellaneous/variables.html",[3,0.256,10,0.285,14,3.666,15,0.779,19,0.314,20,0.026,22,3.148,27,1.986,47,2.575,56,2.509,68,0.946,69,2.356,79,2.753,80,1.532,91,0.015,92,0.015,133,1.152,134,3.591,144,1.569,159,3.148,172,2.715,194,1.659,288,3.148,289,3.148,326,1.421,518,4.283,521,3.666,525,2.21,540,2.575,545,2.575,552,3.574,593,5.41,595,2.509,885,2.21,898,2.509,899,3.574,900,2.509,901,2.509,906,2.509,907,2.509,908,2.509,909,3.574,910,2.509,946,1.421,949,2.509,1007,2.509,1063,2.21,1068,2.509,1172,2.509,1173,2.964,1174,4.221,1175,2.964,1176,2.964,1177,4.221,1178,2.964,1179,2.964,1180,4.916,1181,4.916,1182,2.964,1183,2.964,1184,2.964,1185,2.964,1186,4.221,1187,2.964,1188,2.964,1189,4.916,1190,4.916,1191,4.916,1192,4.916,1193,2.964,1194,2.964,1195,2.964,1196,2.964,1197,2.964,1198,2.964,1199,5.357,1200,2.964,1201,2.964,1202,2.964,1203,2.964,1204,2.964,1205,2.964,1206,2.964,1207,2.964,1208,2.964,1209,4.916,1210,4.916,1211,2.964,1212,2.964,1213,2.964,1214,2.964,1215,2.964,1216,4.221,1217,4.221,1218,2.964,1219,2.964,1220,2.964,1221,2.964,1222,2.964,1223,2.964,1224,2.964,1225,2.964,1226,2.964]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":326,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/ParseIdPipe.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1153,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":888,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":897,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":692,"title":{},"body":{"injectables/RoomService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["1/2",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":521,"title":{},"body":{"injectables/ParseIdPipe.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["11.0.1",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["11/13",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["11/14",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":1151,"title":{},"body":{"overview.html":{}}}],["2",{"_index":639,"title":{},"body":{"injectables/RoomService.html":{},"miscellaneous/enumerations.html":{}}}],["2/5",{"_index":905,"title":{},"body":{"coverage.html":{}}}],["2022",{"_index":1084,"title":{},"body":{"index.html":{},"license.html":{}}}],["3",{"_index":996,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3.0.2",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["3.8.2",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":997,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["4.3.1",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["4.5.2",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["4.5.3",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["40",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":998,"title":{},"body":{"miscellaneous/enumerations.html":{},"overview.html":{}}}],["5.2.3",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":90,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["60",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["6379",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.2.0",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["78",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["84",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1150,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["above",{"_index":1118,"title":{},"body":{"license.html":{}}}],["accept",{"_index":640,"title":{},"body":{"injectables/RoomService.html":{}}}],["acceptedfriends",{"_index":857,"title":{},"body":{"injectables/UserService.html":{}}}],["accepting",{"_index":643,"title":{},"body":{"injectables/RoomService.html":{}}}],["acceptorid",{"_index":859,"title":{},"body":{"injectables/UserService.html":{}}}],["access",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":421,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["action",{"_index":621,"title":{},"body":{"injectables/RoomService.html":{},"license.html":{}}}],["activestatus",{"_index":290,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["activestatus.online",{"_index":317,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/UserService.html":{}}}],["actor",{"_index":649,"title":{},"body":{"injectables/RoomService.html":{}}}],["actorid",{"_index":329,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{}}}],["adapter",{"_index":558,"title":{},"body":{"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["adapterconstructor",{"_index":539,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["add",{"_index":586,"title":{},"body":{"injectables/RoomService.html":{},"index.html":{}}}],["admin",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["admin/auth",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminer",{"_index":1046,"title":{},"body":{"index.html":{}}}],["again",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["aliases",{"_index":1156,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allexceptionfilter",{"_index":1,"title":{"classes/AllExceptionFilter.html":{}},"body":{"classes/AllExceptionFilter.html":{},"classes/CommunicationGateway.html":{},"coverage.html":{}}}],["allowing",{"_index":434,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["and/or",{"_index":1110,"title":{},"body":{"license.html":{}}}],["another",{"_index":272,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{}}}],["anyone",{"_index":596,"title":{},"body":{"injectables/RoomService.html":{}}}],["anywhere",{"_index":1030,"title":{},"body":{"index.html":{}}}],["api",{"_index":1041,"title":{},"body":{"index.html":{}}}],["app",{"_index":531,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":535,"title":{},"body":{"injectables/PrismaService.html":{}}}],["appconfig",{"_index":47,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/CommunicationService.html":{},"injectables/RoomService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["appconfig.allowjoinmultiplerooms",{"_index":660,"title":{},"body":{"injectables/RoomService.html":{}}}],["appconfig.debug",{"_index":56,"title":{},"body":{"classes/AllExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["appconfig.disconnectifconflict",{"_index":438,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["appenv",{"_index":949,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["appenv.development",{"_index":1185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":1055,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":94,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["architecture",{"_index":1050,"title":{},"body":{"index.html":{}}}],["archived",{"_index":1029,"title":{},"body":{"index.html":{}}}],["arefriends",{"_index":800,"title":{},"body":{"injectables/UserService.html":{}}}],["arefriends(stuserid",{"_index":810,"title":{},"body":{"injectables/UserService.html":{}}}],["argumentshost",{"_index":28,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["arising",{"_index":1144,"title":{},"body":{"license.html":{}}}],["assign",{"_index":704,"title":{},"body":{"injectables/RoomService.html":{}}}],["associated",{"_index":1098,"title":{},"body":{"license.html":{}}}],["async",{"_index":112,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.decorator.ts",{"_index":899,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["authentication",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["authguard",{"_index":109,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["author",{"_index":1154,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1135,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":116,"title":{"injectables/AuthService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"modules/CommunicationModule.html":{},"injectables/CommunicationService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":130,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["badrequestexception",{"_index":472,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/ParseIdPipe.html":{},"injectables/RoomService.html":{},"classes/WsExceptionsFilter.html":{}}}],["badrequestexception('invalid",{"_index":522,"title":{},"body":{"injectables/ParseIdPipe.html":{}}}],["badrequestexception('member",{"_index":720,"title":{},"body":{"injectables/RoomService.html":{}}}],["badrequestexception('new",{"_index":725,"title":{},"body":{"injectables/RoomService.html":{}}}],["badrequestexception('please",{"_index":733,"title":{},"body":{"injectables/RoomService.html":{}}}],["badrequestexception('room",{"_index":675,"title":{},"body":{"injectables/RoomService.html":{}}}],["badrequestexception('this",{"_index":737,"title":{},"body":{"injectables/RoomService.html":{}}}],["badrequestexception('you",{"_index":743,"title":{},"body":{"injectables/RoomService.html":{}}}],["basewsexceptionfilter",{"_index":878,"title":{},"body":{"classes/WsExceptionsFilter.html":{}}}],["basic",{"_index":1019,"title":{},"body":{"index.html":{}}}],["before",{"_index":218,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/RoomService.html":{}}}],["being",{"_index":444,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["bind",{"_index":819,"title":{},"body":{"injectables/UserService.html":{}}}],["binding.interceptor.ts",{"_index":454,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"coverage.html":{}}}],["binding.interceptor.ts:12",{"_index":457,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{}}}],["binding.interceptor.ts:14",{"_index":758,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["binding.interceptor.ts:15",{"_index":462,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{}}}],["binding.interceptor.ts:17",{"_index":759,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["book",{"_index":578,"title":{},"body":{"injectables/RoomService.html":{}}}],["book(bookerid",{"_index":584,"title":{},"body":{"injectables/RoomService.html":{}}}],["book_room",{"_index":983,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["booker",{"_index":587,"title":{},"body":{"injectables/RoomService.html":{}}}],["bookerid",{"_index":594,"title":{},"body":{"injectables/RoomService.html":{}}}],["bookroom",{"_index":982,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bookroomdto",{"_index":180,"title":{"classes/BookRoomDto.html":{}},"body":{"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"coverage.html":{}}}],["boolean",{"_index":184,"title":{},"body":{"classes/BookRoomDto.html":{},"classes/RespondRoomInvitationDto.html":{},"injectables/RoomService.html":{}}}],["bootstrap",{"_index":912,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["break",{"_index":63,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["browse",{"_index":1149,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1146,"title":{},"body":{"modules.html":{}}}],["busy",{"_index":956,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["c",{"_index":1085,"title":{},"body":{"license.html":{}}}],["cachenamespace",{"_index":656,"title":{},"body":{"injectables/RoomService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["cachenamespace.room}${room.id",{"_index":727,"title":{},"body":{"injectables/RoomService.html":{}}}],["cachenamespace.uid2rids}${leaverid",{"_index":712,"title":{},"body":{"injectables/RoomService.html":{}}}],["cachenamespace.uid2rids}${memberid",{"_index":659,"title":{},"body":{"injectables/RoomService.html":{}}}],["cachenamespace.uid2rids}${userid",{"_index":853,"title":{},"body":{"injectables/UserService.html":{}}}],["cachenamespace.uid2sid}${uid",{"_index":850,"title":{},"body":{"injectables/UserService.html":{}}}],["callhandler",{"_index":461,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["canactivate",{"_index":113,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":118,"title":{},"body":{"guards/AuthGuard.html":{}}}],["candidateid",{"_index":646,"title":{},"body":{"injectables/RoomService.html":{},"classes/TransferOwnershipDto.html":{}}}],["case",{"_index":60,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["catch",{"_index":16,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["catch(exception",{"_index":25,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["catch(httpexception",{"_index":474,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(wsexception",{"_index":880,"title":{},"body":{"classes/WsExceptionsFilter.html":{}}}],["cd",{"_index":1062,"title":{},"body":{"index.html":{}}}],["chages",{"_index":1034,"title":{},"body":{"index.html":{}}}],["change",{"_index":818,"title":{},"body":{"injectables/UserService.html":{}}}],["charge",{"_index":1093,"title":{},"body":{"license.html":{}}}],["chat",{"_index":1027,"title":{},"body":{"index.html":{}}}],["check",{"_index":430,"title":{},"body":{"injectables/CommunicationService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["choosed",{"_index":650,"title":{},"body":{"injectables/RoomService.html":{}}}],["claim",{"_index":1138,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionFilter.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{},"classes/WsExceptionsFilter.html":{}},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{},"classes/WsExceptionsFilter.html":{},"overview.html":{}}}],["client",{"_index":69,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["client.disconnect",{"_index":320,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["client.emit(emitevent.error",{"_index":76,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CommunicationGateway.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{}}}],["client.emit(emitevent.receiveroomchanges",{"_index":349,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["client.eventname",{"_index":73,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{}}}],["client.handshake.headers.authorization",{"_index":450,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["client.id",{"_index":311,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["client.join(room.id",{"_index":348,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["client.leave(room.id",{"_index":359,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["client.userid",{"_index":330,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["clone",{"_index":1058,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_communicationmodule",{"_index":396,"title":{},"body":{"modules/CommunicationModule.html":{},"overview.html":{}}}],["cluster_communicationmodule_imports",{"_index":397,"title":{},"body":{"modules/CommunicationModule.html":{},"overview.html":{}}}],["cluster_communicationmodule_providers",{"_index":398,"title":{},"body":{"modules/CommunicationModule.html":{},"overview.html":{}}}],["cluster_messagemodule",{"_index":497,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_messagemodule_exports",{"_index":498,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_messagemodule_providers",{"_index":499,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_roommodule",{"_index":572,"title":{},"body":{"modules/RoomModule.html":{},"overview.html":{}}}],["cluster_roommodule_exports",{"_index":574,"title":{},"body":{"modules/RoomModule.html":{},"overview.html":{}}}],["cluster_roommodule_providers",{"_index":573,"title":{},"body":{"modules/RoomModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":793,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":796,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":794,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":795,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["commander",{"_index":1044,"title":{},"body":{"index.html":{}}}],["communicate",{"_index":1021,"title":{},"body":{"index.html":{}}}],["communication",{"_index":1063,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["communication.gateway",{"_index":408,"title":{},"body":{"modules/CommunicationModule.html":{}}}],["communication.service",{"_index":299,"title":{},"body":{"classes/CommunicationGateway.html":{},"modules/CommunicationModule.html":{}}}],["communicationgateway",{"_index":190,"title":{"classes/CommunicationGateway.html":{}},"body":{"classes/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"coverage.html":{}}}],["communicationmodule",{"_index":99,"title":{"modules/CommunicationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules.html":{},"overview.html":{}}}],["communicationservice",{"_index":209,"title":{"injectables/CommunicationService.html":{}},"body":{"classes/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"injectables/CommunicationService.html":{},"coverage.html":{},"overview.html":{}}}],["compose",{"_index":1048,"title":{},"body":{"index.html":{}}}],["compose.demo.yml",{"_index":1074,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":433,"title":{},"body":{"injectables/CommunicationService.html":{},"license.html":{}}}],["conflict",{"_index":417,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["connect",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommunicationService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["connect(user",{"_index":815,"title":{},"body":{"injectables/UserService.html":{}}}],["connected",{"_index":445,"title":{},"body":{"injectables/CommunicationService.html":{},"index.html":{}}}],["connectedsocket",{"_index":281,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["connection",{"_index":219,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"license.html":{}}}],["connectionservice",{"_index":208,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["connecttoredis",{"_index":541,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["conntected",{"_index":820,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":68,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":114,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/MessageService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":115,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/CommunicationService.html":{}}}],["constructor(eventname",{"_index":456,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{}}}],["constructor(prismaservice",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":125,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/MessageService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{}}}],["constructor(userservice",{"_index":206,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["content",{"_index":752,"title":{},"body":{"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{}}}],["context",{"_index":121,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":126,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtows().getclient",{"_index":466,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["contract",{"_index":1142,"title":{},"body":{"license.html":{}}}],["controller",{"_index":771,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["controller('users",{"_index":788,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":773,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["copies",{"_index":1112,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1096,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1081,"title":{},"body":{"index.html":{},"license.html":{}}}],["corresponding",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["cors",{"_index":307,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["corsconfig",{"_index":288,"title":{},"body":{"classes/CommunicationGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["corsoptions",{"_index":1193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":881,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":1064,"title":{},"body":{"index.html":{}}}],["create",{"_index":226,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["createadapter",{"_index":556,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createadapter(pubclient",{"_index":564,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createioserver",{"_index":542,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createioserver(port",{"_index":548,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["createlogger",{"_index":1198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createprivatemessage",{"_index":504,"title":{},"body":{"injectables/MessageService.html":{}}}],["createprivatemessage(senderid",{"_index":506,"title":{},"body":{"injectables/MessageService.html":{}}}],["creating",{"_index":592,"title":{},"body":{"injectables/RoomService.html":{}}}],["credentials",{"_index":1196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":642,"title":{},"body":{"injectables/RoomService.html":{}}}],["damages",{"_index":1139,"title":{},"body":{"license.html":{}}}],["data",{"_index":511,"title":{},"body":{"injectables/MessageService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["database",{"_index":1036,"title":{},"body":{"index.html":{}}}],["day",{"_index":1003,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["deal",{"_index":1100,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1145,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decline",{"_index":648,"title":{},"body":{"injectables/RoomService.html":{}}}],["declined",{"_index":622,"title":{},"body":{"injectables/RoomService.html":{}}}],["decodedtoken",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodedtoken.uid",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":21,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["default",{"_index":593,"title":{},"body":{"injectables/RoomService.html":{},"miscellaneous/variables.html":{}}}],["defaultmeta",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{}}}],["del(`${cachenamespace.sid2uid}${sid",{"_index":874,"title":{},"body":{"injectables/UserService.html":{}}}],["del(`${cachenamespace.uid2sid}${user.id",{"_index":875,"title":{},"body":{"injectables/UserService.html":{}}}],["delete",{"_index":701,"title":{},"body":{"injectables/RoomService.html":{}}}],["deleted",{"_index":629,"title":{},"body":{"injectables/RoomService.html":{}}}],["deletedmemberindex",{"_index":696,"title":{},"body":{"injectables/RoomService.html":{}}}],["deletedwaitingindex",{"_index":741,"title":{},"body":{"injectables/RoomService.html":{}}}],["dependencies",{"_index":96,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploylicense",{"_index":1075,"title":{},"body":{"index.html":{}}}],["description",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["design",{"_index":1051,"title":{},"body":{"index.html":{}}}],["details",{"_index":1049,"title":{},"body":{"index.html":{}}}],["devdemo",{"_index":1072,"title":{},"body":{"index.html":{}}}],["development",{"_index":958,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["differences",{"_index":1023,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":590,"title":{},"body":{"injectables/RoomService.html":{}}}],["disconnect",{"_index":801,"title":{},"body":{"injectables/UserService.html":{}}}],["disconnect(user",{"_index":821,"title":{},"body":{"injectables/UserService.html":{}}}],["disconnectedid",{"_index":441,"title":{},"body":{"injectables/CommunicationService.html":{},"injectables/UserService.html":{}}}],["disconnection",{"_index":231,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["distribute",{"_index":1108,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":1077,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1047,"title":{},"body":{"index.html":{}}}],["documentaions",{"_index":1052,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":882,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["don't",{"_index":1035,"title":{},"body":{"index.html":{}}}],["driven",{"_index":1054,"title":{},"body":{"index.html":{}}}],["dto",{"_index":509,"title":{},"body":{"injectables/MessageService.html":{}}}],["each",{"_index":338,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["emit(emitevent.receiveroomchanges",{"_index":368,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["emitevent",{"_index":50,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/enumerations.html":{}}}],["emitevents",{"_index":52,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/typealiases.html":{}}}],["empty",{"_index":628,"title":{},"body":{"injectables/RoomService.html":{}}}],["enabledebugmessages",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enableshutdownhooks",{"_index":526,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":528,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enter",{"_index":591,"title":{},"body":{"injectables/RoomService.html":{}}}],["entered",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["enumerations",{"_index":947,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":1068,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["env.app_debug",{"_index":1187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env.app_env",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env.example",{"_index":1065,"title":{},"body":{"index.html":{}}}],["env.redis_host",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env.redis_password",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["envthen",{"_index":1066,"title":{},"body":{"index.html":{}}}],["error",{"_index":80,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["error).message",{"_index":478,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["error.message",{"_index":319,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["errormessage",{"_index":473,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/typealiases.html":{}}}],["event",{"_index":77,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{},"index.html":{},"license.html":{}}}],["eventname",{"_index":458,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{}}}],["eventnamebindinginterceptor",{"_index":223,"title":{"injectables/EventNameBindingInterceptor.html":{}},"body":{"classes/CommunicationGateway.html":{},"injectables/EventNameBindingInterceptor.html":{},"coverage.html":{}}}],["eventnamebindinginterceptor(listenevent.bookroom",{"_index":344,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.invitetoroom",{"_index":382,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.joinroom",{"_index":351,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.kickoutofroom",{"_index":361,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.leaveroom",{"_index":356,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.respondroominvitation",{"_index":392,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.sendgroupmessage",{"_index":371,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.sendprivatemessage",{"_index":331,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["eventnamebindinginterceptor(listenevent.transerownership",{"_index":377,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["exception",{"_index":33,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["exception.event",{"_index":72,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":7,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:13",{"_index":24,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:15",{"_index":29,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.filter.ts:36",{"_index":39,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.filter.ts:49",{"_index":37,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.getresponse",{"_index":477,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":475,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.hosttype",{"_index":71,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.message",{"_index":479,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["exception.payload",{"_index":74,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.url",{"_index":85,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exceptionfilter",{"_index":9,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exceptions.filter.ts",{"_index":877,"title":{},"body":{"classes/WsExceptionsFilter.html":{},"coverage.html":{}}}],["exceptions.filter.ts:14",{"_index":879,"title":{},"body":{"classes/WsExceptionsFilter.html":{}}}],["exec",{"_index":672,"title":{},"body":{"injectables/RoomService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["executioncontext",{"_index":119,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["exist",{"_index":609,"title":{},"body":{"injectables/RoomService.html":{}}}],["export",{"_index":55,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{}}}],["exports",{"_index":501,"title":{},"body":{"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":1126,"title":{},"body":{"license.html":{}}}],["extends",{"_index":524,"title":{},"body":{"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/WsExceptionsFilter.html":{}}}],["f",{"_index":1073,"title":{},"body":{"index.html":{}}}],["failed",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":595,"title":{},"body":{"injectables/RoomService.html":{},"miscellaneous/variables.html":{}}}],["fastify",{"_index":44,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["fastifyreply",{"_index":42,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"controllers/UserController.html":{}}}],["fastifyrequest",{"_index":43,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/UserController.html":{}}}],["features",{"_index":1031,"title":{},"body":{"index.html":{}}}],["fid",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"index.html":{}}}],["filename",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":1099,"title":{},"body":{"license.html":{}}}],["fill",{"_index":1067,"title":{},"body":{"index.html":{}}}],["firebase",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{},"index.html":{}}}],["firebaseauth",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["first",{"_index":705,"title":{},"body":{"injectables/RoomService.html":{}}}],["fitness",{"_index":1131,"title":{},"body":{"license.html":{}}}],["following",{"_index":1117,"title":{},"body":{"license.html":{}}}],["forbiddenexception",{"_index":654,"title":{},"body":{"injectables/RoomService.html":{}}}],["forbiddenexception('this",{"_index":689,"title":{},"body":{"injectables/RoomService.html":{}}}],["forbiddenexception('you",{"_index":698,"title":{},"body":{"injectables/RoomService.html":{}}}],["forever",{"_index":1004,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["format",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.combine",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.errors",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.prettyprint",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format.timestamp",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["free",{"_index":1092,"title":{},"body":{"license.html":{}}}],["friend",{"_index":781,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["friend.id",{"_index":863,"title":{},"body":{"injectables/UserService.html":{}}}],["friendlist",{"_index":790,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["friends",{"_index":336,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/UserService.html":{},"index.html":{}}}],["friendsids",{"_index":312,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["function",{"_index":886,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1005,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1115,"title":{},"body":{"license.html":{}}}],["game",{"_index":1022,"title":{},"body":{"index.html":{},"properties.html":{}}}],["gatewaymetadata",{"_index":282,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["generated",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('friends",{"_index":779,"title":{},"body":{"controllers/UserController.html":{}}}],["get(`${cachenamespace.room}${roomid",{"_index":729,"title":{},"body":{"injectables/RoomService.html":{}}}],["get(`${cachenamespace.uid2sid}${guestid",{"_index":730,"title":{},"body":{"injectables/RoomService.html":{}}}],["get(`${cachenamespace.uid2sid}${memberid",{"_index":722,"title":{},"body":{"injectables/RoomService.html":{}}}],["get(roomid",{"_index":598,"title":{},"body":{"injectables/RoomService.html":{}}}],["getauth(getapp",{"_index":1197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getbyid",{"_index":802,"title":{},"body":{"injectables/UserService.html":{}}}],["getbyid(userid",{"_index":826,"title":{},"body":{"injectables/UserService.html":{}}}],["getbysocketid",{"_index":803,"title":{},"body":{"injectables/UserService.html":{}}}],["getbysocketid(socketid",{"_index":828,"title":{},"body":{"injectables/UserService.html":{}}}],["getfirebaseuserid",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["getfirebaseuserid(token",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["getfriendlist",{"_index":777,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getfriendlist(request",{"_index":778,"title":{},"body":{"controllers/UserController.html":{}}}],["getfriendlist(userid",{"_index":830,"title":{},"body":{"injectables/UserService.html":{}}}],["getidbysocketid",{"_index":804,"title":{},"body":{"injectables/UserService.html":{}}}],["getidbysocketid(socketid",{"_index":833,"title":{},"body":{"injectables/UserService.html":{}}}],["getjoinedroomids",{"_index":805,"title":{},"body":{"injectables/UserService.html":{}}}],["getjoinedroomids(userid",{"_index":835,"title":{},"body":{"injectables/UserService.html":{}}}],["getmany",{"_index":579,"title":{},"body":{"injectables/RoomService.html":{}}}],["getmany(roomids",{"_index":600,"title":{},"body":{"injectables/RoomService.html":{}}}],["getonlinefriendssocketids",{"_index":806,"title":{},"body":{"injectables/UserService.html":{}}}],["getonlinefriendssocketids(userid",{"_index":837,"title":{},"body":{"injectables/UserService.html":{}}}],["getsocketidbyuserid",{"_index":807,"title":{},"body":{"injectables/UserService.html":{}}}],["getsocketidbyuserid(userid",{"_index":839,"title":{},"body":{"injectables/UserService.html":{}}}],["getsocketidsbyuserids",{"_index":808,"title":{},"body":{"injectables/UserService.html":{}}}],["getsocketidsbyuserids(userids",{"_index":841,"title":{},"body":{"injectables/UserService.html":{}}}],["getting",{"_index":1014,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuser",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuser(token",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["git",{"_index":1057,"title":{},"body":{"index.html":{}}}],["git@github.com:tp",{"_index":1059,"title":{},"body":{"index.html":{}}}],["granted",{"_index":1091,"title":{},"body":{"license.html":{}}}],["group",{"_index":265,"title":{},"body":{"classes/CommunicationGateway.html":{},"classes/SendGroupMessageDto.html":{},"coverage.html":{},"index.html":{}}}],["guard",{"_index":108,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":110,"title":{},"body":{"guards/AuthGuard.html":{}}}],["guest",{"_index":237,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{}}}],["guestid",{"_index":482,"title":{},"body":{"classes/InviteToRoomDto.html":{},"injectables/RoomService.html":{}}}],["guestsid",{"_index":728,"title":{},"body":{"injectables/RoomService.html":{}}}],["guestsocketid",{"_index":384,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{}}}],["handleconflict",{"_index":410,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["handleconflict(server",{"_index":414,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["handleconnection",{"_index":195,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handleconnection(client",{"_index":214,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handlecreateroom",{"_index":196,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handlecreateroom(client",{"_index":220,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handledisconnect",{"_index":197,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handledisconnect(client",{"_index":228,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handlehttpexception",{"_index":17,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["handlehttpexception(exception",{"_index":36,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["handleinvitetoroom",{"_index":198,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handleinvitetoroom(client",{"_index":232,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handlejoinroom",{"_index":199,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handlejoinroom(client",{"_index":238,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handlekickoutofroom",{"_index":200,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handlekickoutofroom(client",{"_index":243,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handleleaveroom",{"_index":201,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handleleaveroom(client",{"_index":249,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handlerespondinvitation",{"_index":202,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handlerespondinvitation(client",{"_index":254,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handlesendgroupmessage",{"_index":203,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handlesendgroupmessage(client",{"_index":260,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handletransferownership",{"_index":204,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handletransferownership(client",{"_index":266,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["handlewsexception",{"_index":18,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["handlewsexception(exception",{"_index":38,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["headerauthorization",{"_index":426,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["here",{"_index":1053,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1090,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1136,"title":{},"body":{"license.html":{}}}],["host",{"_index":27,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["host.gettype",{"_index":59,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["host.switchtohttp().getrequest",{"_index":84,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["host.switchtohttp().getresponse",{"_index":82,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtows().getclient",{"_index":70,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["host.switchtows().getdata",{"_index":75,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["hour",{"_index":1002,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["http",{"_index":64,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httperrorresponse",{"_index":1159,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["httpexception",{"_index":471,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["httpexceptionfilter",{"_index":469,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["id",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/ParseIdPipe.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["id.pipe.ts",{"_index":514,"title":{},"body":{"injectables/ParseIdPipe.html":{},"coverage.html":{}}}],["id.pipe.ts:5",{"_index":517,"title":{},"body":{"injectables/ParseIdPipe.html":{}}}],["identifier",{"_index":883,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":603,"title":{},"body":{"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"classes/CommunicationGateway.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["implied",{"_index":1127,"title":{},"body":{"license.html":{}}}],["import",{"_index":40,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{}}}],["imports",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/UserModule.html":{}}}],["included",{"_index":1121,"title":{},"body":{"license.html":{}}}],["including",{"_index":1102,"title":{},"body":{"license.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":529,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["injectable",{"_index":123,"title":{"injectables/AuthService.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["instanceof",{"_index":476,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["intercept",{"_index":455,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["intercept(context",{"_index":459,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["internalservererrorexception",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["invitation",{"_index":259,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{},"index.html":{}}}],["invitation.dto.ts",{"_index":568,"title":{},"body":{"classes/RespondRoomInvitationDto.html":{},"coverage.html":{}}}],["invitation.dto.ts:6",{"_index":571,"title":{},"body":{"classes/RespondRoomInvitationDto.html":{}}}],["invitation.dto.ts:9",{"_index":570,"title":{},"body":{"classes/RespondRoomInvitationDto.html":{}}}],["invite",{"_index":236,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["invite(inviter",{"_index":605,"title":{},"body":{"injectables/RoomService.html":{}}}],["invite_to_room",{"_index":989,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["invited",{"_index":738,"title":{},"body":{"injectables/RoomService.html":{}}}],["invitedfriends",{"_index":858,"title":{},"body":{"injectables/UserService.html":{}}}],["inviter",{"_index":610,"title":{},"body":{"injectables/RoomService.html":{}}}],["inviterid",{"_index":390,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/UserService.html":{}}}],["invitetoroom",{"_index":988,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["invitetoroomdto",{"_index":233,"title":{"classes/InviteToRoomDto.html":{}},"body":{"classes/CommunicationGateway.html":{},"classes/InviteToRoomDto.html":{},"coverage.html":{}}}],["ioadapter",{"_index":538,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["ioredis",{"_index":555,"title":{},"body":{"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["isaccpeted",{"_index":569,"title":{},"body":{"classes/RespondRoomInvitationDto.html":{},"injectables/RoomService.html":{}}}],["isboolean",{"_index":187,"title":{},"body":{"classes/BookRoomDto.html":{},"classes/RespondRoomInvitationDto.html":{}}}],["isboolean()@isnotempty",{"_index":185,"title":{},"body":{"classes/BookRoomDto.html":{}}}],["isint",{"_index":487,"title":{},"body":{"classes/InviteToRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["isint()@min(1",{"_index":484,"title":{},"body":{"classes/InviteToRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["ismemberofany",{"_index":580,"title":{},"body":{"injectables/RoomService.html":{}}}],["ismemberofany(memberid",{"_index":611,"title":{},"body":{"injectables/RoomService.html":{}}}],["isnotempty",{"_index":188,"title":{},"body":{"classes/BookRoomDto.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{}}}],["ispublic",{"_index":183,"title":{},"body":{"classes/BookRoomDto.html":{},"injectables/RoomService.html":{}}}],["isstring",{"_index":488,"title":{},"body":{"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/RespondRoomInvitationDto.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["isstring()@isnotempty",{"_index":753,"title":{},"body":{"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{}}}],["isstring()@minlength(13",{"_index":486,"title":{},"body":{"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/RespondRoomInvitationDto.html":{},"classes/SendGroupMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["join",{"_index":242,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["join(joinerid",{"_index":613,"title":{},"body":{"injectables/RoomService.html":{}}}],["join_room",{"_index":985,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["joined",{"_index":825,"title":{},"body":{"injectables/UserService.html":{}}}],["joinerid",{"_index":615,"title":{},"body":{"injectables/RoomService.html":{}}}],["joining",{"_index":686,"title":{},"body":{"injectables/RoomService.html":{}}}],["joinroom",{"_index":984,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["joinroomdto",{"_index":239,"title":{"classes/JoinRoomDto.html":{}},"body":{"classes/CommunicationGateway.html":{},"classes/JoinRoomDto.html":{},"coverage.html":{}}}],["json.parse(roomjson",{"_index":676,"title":{},"body":{"injectables/RoomService.html":{}}}],["json.stringify(room",{"_index":670,"title":{},"body":{"injectables/RoomService.html":{}}}],["kick",{"_index":247,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["kick(kickerid",{"_index":616,"title":{},"body":{"injectables/RoomService.html":{}}}],["kick_out_of_room",{"_index":993,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["kicked",{"_index":624,"title":{},"body":{"injectables/RoomService.html":{}}}],["kickedmembersid",{"_index":718,"title":{},"body":{"injectables/RoomService.html":{}}}],["kickedmembersocketid",{"_index":363,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{}}}],["kicker",{"_index":618,"title":{},"body":{"injectables/RoomService.html":{}}}],["kickerid",{"_index":623,"title":{},"body":{"injectables/RoomService.html":{}}}],["kickoutofroom",{"_index":992,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["kickoutofroomdto",{"_index":244,"title":{"classes/KickOutOfRoomDto.html":{}},"body":{"classes/CommunicationGateway.html":{},"classes/KickOutOfRoomDto.html":{},"coverage.html":{}}}],["kind",{"_index":1125,"title":{},"body":{"license.html":{}}}],["le",{"_index":1086,"title":{},"body":{"license.html":{}}}],["leave",{"_index":253,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["leave(leaverid",{"_index":625,"title":{},"body":{"injectables/RoomService.html":{}}}],["leave_room",{"_index":987,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["leavemany",{"_index":581,"title":{},"body":{"injectables/RoomService.html":{}}}],["leavemany(leaverid",{"_index":631,"title":{},"body":{"injectables/RoomService.html":{}}}],["leaver",{"_index":627,"title":{},"body":{"injectables/RoomService.html":{}}}],["leaverid",{"_index":630,"title":{},"body":{"injectables/RoomService.html":{}}}],["leaveroom",{"_index":986,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["leaveroomdto",{"_index":250,"title":{"classes/LeaveRoomDto.html":{}},"body":{"classes/CommunicationGateway.html":{},"classes/LeaveRoomDto.html":{},"coverage.html":{}}}],["leaving",{"_index":636,"title":{},"body":{"injectables/RoomService.html":{}}}],["left",{"_index":644,"title":{},"body":{"injectables/RoomService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["leftrooms",{"_index":322,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["leftrooms.foreach((room",{"_index":324,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{}}}],["level",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["liability",{"_index":1140,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1137,"title":{},"body":{"license.html":{}}}],["license",{"_index":1080,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limitation",{"_index":1103,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1128,"title":{},"body":{"license.html":{}}}],["list",{"_index":588,"title":{},"body":{"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["listenevent",{"_index":291,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"miscellaneous/enumerations.html":{}}}],["listenevent.connect",{"_index":318,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{}}}],["literal",{"_index":1169,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["log",{"_index":22,"title":{},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["log/error.log",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log/info.log",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log/warn.log",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logged",{"_index":782,"title":{},"body":{"controllers/UserController.html":{}}}],["loggederror",{"_index":26,"title":{},"body":{"classes/AllExceptionFilter.html":{},"miscellaneous/typealiases.html":{}}}],["logger",{"_index":14,"title":{},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logic",{"_index":634,"title":{},"body":{"injectables/RoomService.html":{}}}],["login",{"_index":766,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["lpush(`${cachenamespace.uid2rids}${bookerid",{"_index":671,"title":{},"body":{"injectables/RoomService.html":{}}}],["lpush(`${cachenamespace.uid2rids}${joinerid",{"_index":695,"title":{},"body":{"injectables/RoomService.html":{}}}],["lrem(`${cachenamespace.uid2rids}${leaverid",{"_index":709,"title":{},"body":{"injectables/RoomService.html":{}}}],["lrem(`${cachenamespace.uid2rids}${memberid",{"_index":723,"title":{},"body":{"injectables/RoomService.html":{}}}],["main",{"_index":887,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["many",{"_index":633,"title":{},"body":{"injectables/RoomService.html":{}}}],["matching",{"_index":92,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mechanism",{"_index":1028,"title":{},"body":{"index.html":{}}}],["member",{"_index":248,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{}}}],["memberid",{"_index":495,"title":{},"body":{"classes/KickOutOfRoomDto.html":{},"injectables/RoomService.html":{}}}],["memberids",{"_index":664,"title":{},"body":{"injectables/RoomService.html":{}}}],["members",{"_index":702,"title":{},"body":{"injectables/RoomService.html":{}}}],["merchantability",{"_index":1130,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1106,"title":{},"body":{"license.html":{}}}],["message",{"_index":78,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/MessageService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{},"index.html":{}}}],["message.dto.ts",{"_index":751,"title":{},"body":{"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:10",{"_index":754,"title":{},"body":{"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{}}}],["message.dto.ts:6",{"_index":755,"title":{},"body":{"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{}}}],["message.service",{"_index":502,"title":{},"body":{"modules/MessageModule.html":{}}}],["message/dto",{"_index":302,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["message/message.module",{"_index":407,"title":{},"body":{"modules/CommunicationModule.html":{}}}],["message/message.service",{"_index":300,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["messagebody",{"_index":283,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["messagemodule",{"_index":399,"title":{"modules/MessageModule.html":{}},"body":{"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules.html":{},"overview.html":{}}}],["messages",{"_index":337,"title":{},"body":{"classes/CommunicationGateway.html":{},"index.html":{}}}],["messageservice",{"_index":210,"title":{"injectables/MessageService.html":{}},"body":{"classes/CommunicationGateway.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"coverage.html":{},"overview.html":{}}}],["metadata",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":635,"title":{},"body":{"injectables/RoomService.html":{}}}],["methods",{"_index":15,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["migrate",{"_index":1071,"title":{},"body":{"index.html":{}}}],["min",{"_index":489,"title":{},"body":{"classes/InviteToRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["min(1",{"_index":492,"title":{},"body":{"classes/InviteToRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["miniute",{"_index":1001,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["minlength",{"_index":490,"title":{},"body":{"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/RespondRoomInvitationDto.html":{},"classes/SendGroupMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["minlength(13",{"_index":491,"title":{},"body":{"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/RespondRoomInvitationDto.html":{},"classes/SendGroupMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["miscellaneous",{"_index":946,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1079,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":1033,"title":{},"body":{"index.html":{}}}],["modify",{"_index":1105,"title":{},"body":{"license.html":{}}}],["module",{"_index":93,"title":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}}}],["module/communication/communication.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["module/user/user.module",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["modules",{"_index":95,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["multi",{"_index":589,"title":{},"body":{"injectables/RoomService.html":{},"index.html":{}}}],["multiple",{"_index":418,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["name",{"_index":31,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["namespace",{"_index":306,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["nduserid",{"_index":811,"title":{},"body":{"injectables/UserService.html":{}}}],["nestinterceptor",{"_index":463,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["nestjs",{"_index":1039,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":41,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":554,"title":{},"body":{"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":287,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"classes/WsExceptionsFilter.html":{},"dependencies.html":{}}}],["new",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/RoomService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":460,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["next.handle",{"_index":468,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["nginx",{"_index":1042,"title":{},"body":{"index.html":{}}}],["non",{"_index":608,"title":{},"body":{"injectables/RoomService.html":{}}}],["noninfringement",{"_index":1134,"title":{},"body":{"license.html":{}}}],["normal",{"_index":1024,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":655,"title":{},"body":{"injectables/RoomService.html":{}}}],["notfoundexception('room",{"_index":732,"title":{},"body":{"injectables/RoomService.html":{}}}],["notice",{"_index":1119,"title":{},"body":{"license.html":{}}}],["notify",{"_index":1032,"title":{},"body":{"index.html":{}}}],["npx",{"_index":1070,"title":{},"body":{"index.html":{}}}],["null",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["number",{"_index":483,"title":{},"body":{"classes/InviteToRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"injectables/MessageService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{},"injectables/UserService.html":{}}}],["o",{"_index":1083,"title":{},"body":{"index.html":{},"properties.html":{}}}],["object.freeze",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.values(appenv).includes(env.app_env",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":464,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["obtaining",{"_index":1095,"title":{},"body":{"license.html":{}}}],["offline",{"_index":824,"title":{},"body":{"injectables/UserService.html":{}}}],["og/communication",{"_index":1060,"title":{},"body":{"index.html":{}}}],["one",{"_index":662,"title":{},"body":{"injectables/RoomService.html":{}}}],["ongatewayconnection",{"_index":192,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["ongatewaydisconnect",{"_index":193,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["online",{"_index":607,"title":{},"body":{"injectables/RoomService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["onlinefriends",{"_index":854,"title":{},"body":{"injectables/UserService.html":{}}}],["onlinefriends.map((friend",{"_index":862,"title":{},"body":{"injectables/UserService.html":{}}}],["onlinefriendsids",{"_index":861,"title":{},"body":{"injectables/UserService.html":{}}}],["onlinefriendssids",{"_index":864,"title":{},"body":{"injectables/UserService.html":{}}}],["onmoduleinit",{"_index":527,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":549,"title":{},"body":{"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{}}}],["origin",{"_index":1194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":620,"title":{},"body":{"injectables/RoomService.html":{},"license.html":{}}}],["out",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"classes/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"classes/KickOutOfRoomDto.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"modules/UserModule.html":{},"coverage.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1016,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["owner",{"_index":619,"title":{},"body":{"injectables/RoomService.html":{},"miscellaneous/enumerations.html":{}}}],["ownerid",{"_index":651,"title":{},"body":{"injectables/RoomService.html":{}}}],["ownership",{"_index":271,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{},"index.html":{}}}],["ownership.dto.ts",{"_index":768,"title":{},"body":{"classes/TransferOwnershipDto.html":{},"coverage.html":{}}}],["ownership.dto.ts:10",{"_index":769,"title":{},"body":{"classes/TransferOwnershipDto.html":{}}}],["ownership.dto.ts:6",{"_index":770,"title":{},"body":{"classes/TransferOwnershipDto.html":{}}}],["package",{"_index":925,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/MessageService.html":{},"injectables/RoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":30,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"miscellaneous/functions.html":{}}}],["parsedport",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseidpipe",{"_index":512,"title":{"injectables/ParseIdPipe.html":{}},"body":{"injectables/ParseIdPipe.html":{},"coverage.html":{}}}],["parseint(env.app_port",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(env.redis_port",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(userid",{"_index":846,"title":{},"body":{"injectables/UserService.html":{}}}],["parseint(value",{"_index":520,"title":{},"body":{"injectables/ParseIdPipe.html":{}}}],["particular",{"_index":1132,"title":{},"body":{"license.html":{}}}],["password",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":221,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["payload.candidateid",{"_index":380,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["payload.guestid",{"_index":386,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["payload.isaccpeted",{"_index":395,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["payload.ispublic",{"_index":347,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["payload.memberid",{"_index":365,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["payload.receiverid",{"_index":334,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["payload.roomid",{"_index":354,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["people",{"_index":419,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["permission",{"_index":1089,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1113,"title":{},"body":{"license.html":{}}}],["person",{"_index":1094,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1114,"title":{},"body":{"license.html":{}}}],["phong",{"_index":1088,"title":{},"body":{"license.html":{}}}],["pipeline",{"_index":668,"title":{},"body":{"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["pipetransform",{"_index":519,"title":{},"body":{"injectables/ParseIdPipe.html":{}}}],["platform",{"_index":1026,"title":{},"body":{"index.html":{}}}],["please",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["port",{"_index":552,"title":{},"body":{"classes/RedisIoAdapter.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":1123,"title":{},"body":{"license.html":{}}}],["post",{"_index":1195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postgresql",{"_index":1045,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":775,"title":{},"body":{"controllers/UserController.html":{}}}],["prisma",{"_index":938,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["prisma.service",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["prisma/.../database.seeder.ts",{"_index":1007,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma/.../friend",{"_index":1008,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma/.../status.seeder.ts",{"_index":1009,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma/.../user.seeder.ts",{"_index":1010,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prisma/client",{"_index":436,"title":{},"body":{"injectables/CommunicationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/seeders/database.seeder.ts",{"_index":885,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma/seeders/friend",{"_index":890,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["prisma/seeders/status.seeder.ts",{"_index":893,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["prisma/seeders/user.seeder.ts",{"_index":895,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["prismaclient",{"_index":525,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prismaservice",{"_index":141,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/PrismaService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":12,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/MessageService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{},"classes/SendPrivateMessageDto.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["privatemessagedto",{"_index":507,"title":{},"body":{"injectables/MessageService.html":{}}}],["production",{"_index":959,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["project",{"_index":1076,"title":{},"body":{"index.html":{}}}],["promise",{"_index":122,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/RedisIoAdapter.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["propertykey",{"_index":1190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"license.html":{}}}],["providers",{"_index":402,"title":{},"body":{"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{}}}],["pubclient",{"_index":559,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["pubclient.duplicate",{"_index":562,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["publish",{"_index":1107,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1133,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":13,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["receive_group_message",{"_index":974,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receive_private_message",{"_index":972,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receive_room_changes",{"_index":978,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receive_room_invitation",{"_index":976,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receivegroupmessage",{"_index":973,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receivegroupmessagedata",{"_index":1160,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["receiveprivatemessage",{"_index":971,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receiveprivatemessagedata",{"_index":1161,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["receiverid",{"_index":756,"title":{},"body":{"classes/SendPrivateMessageDto.html":{}}}],["receiveroomchanges",{"_index":977,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receiveroomchangesdata",{"_index":1162,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["receiveroominvitation",{"_index":975,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receiveroominvitationdata",{"_index":1163,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["receiversid",{"_index":340,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["record",{"_index":427,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["redis",{"_index":540,"title":{},"body":{"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["redis(redisconfig",{"_index":1188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redis://${env.redis_host",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redisclient",{"_index":545,"title":{},"body":{"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["redisconfig",{"_index":909,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["redisioadapter",{"_index":536,"title":{"classes/RedisIoAdapter.html":{}},"body":{"classes/RedisIoAdapter.html":{},"coverage.html":{}}}],["redispipe",{"_index":677,"title":{},"body":{"injectables/RoomService.html":{}}}],["redispipe.del(`${cachenamespace.room}${room.id",{"_index":703,"title":{},"body":{"injectables/RoomService.html":{}}}],["redispipe.exec",{"_index":716,"title":{},"body":{"injectables/RoomService.html":{}}}],["redispipe.exec()).foreach((val",{"_index":681,"title":{},"body":{"injectables/RoomService.html":{}}}],["redispipe.get(`${cachenamespace.room}${rid",{"_index":680,"title":{},"body":{"injectables/RoomService.html":{}}}],["redispipe.lpush(`${cachenamespace.uid2rids}${guestid",{"_index":748,"title":{},"body":{"injectables/RoomService.html":{}}}],["redispipe.set(`${cachenamespace.room}${room.id",{"_index":708,"title":{},"body":{"injectables/RoomService.html":{}}}],["reflect",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["refuse",{"_index":641,"title":{},"body":{"injectables/RoomService.html":{}}}],["refusedids",{"_index":666,"title":{},"body":{"injectables/RoomService.html":{}}}],["relationship",{"_index":866,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["relationship.seeder.ts",{"_index":891,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["remove",{"_index":230,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{},"index.html":{}}}],["req",{"_index":783,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":83,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"controllers/UserController.html":{}}}],["request.body",{"_index":87,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.url",{"_index":86,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.user",{"_index":132,"title":{},"body":{"guards/AuthGuard.html":{}}}],["res",{"_index":784,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["respond",{"_index":258,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{},"index.html":{}}}],["respond_room_invitation",{"_index":991,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["respondinvitation",{"_index":582,"title":{},"body":{"injectables/RoomService.html":{}}}],["respondinvitation(guestid",{"_index":637,"title":{},"body":{"injectables/RoomService.html":{}}}],["respondroominvitation",{"_index":990,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["respondroominvitationdto",{"_index":255,"title":{"classes/RespondRoomInvitationDto.html":{}},"body":{"classes/CommunicationGateway.html":{},"classes/RespondRoomInvitationDto.html":{},"coverage.html":{}}}],["response",{"_index":81,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"controllers/UserController.html":{}}}],["response.code(200).send",{"_index":792,"title":{},"body":{"controllers/UserController.html":{}}}],["response.code(500).send",{"_index":88,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["response.code(status).send",{"_index":480,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["restful",{"_index":1040,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":1101,"title":{},"body":{"license.html":{}}}],["result",{"_index":731,"title":{},"body":{"injectables/RoomService.html":{}}}],["results",{"_index":91,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":133,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":34,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{}}}],["returntype",{"_index":543,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["rights",{"_index":1104,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["room",{"_index":227,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"classes/RespondRoomInvitationDto.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["room.dto.ts",{"_index":182,"title":{},"body":{"classes/BookRoomDto.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"coverage.html":{}}}],["room.dto.ts:10",{"_index":485,"title":{},"body":{"classes/InviteToRoomDto.html":{},"classes/KickOutOfRoomDto.html":{}}}],["room.dto.ts:6",{"_index":186,"title":{},"body":{"classes/BookRoomDto.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{}}}],["room.id",{"_index":389,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{}}}],["room.ispublic",{"_index":688,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.memberids.includes(candidateid",{"_index":724,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.memberids.includes(client.userid",{"_index":374,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["room.memberids.includes(guestid",{"_index":735,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.memberids.includes(inviter",{"_index":734,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.memberids.indexof(leaverid",{"_index":697,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.memberids.indexof(memberid",{"_index":719,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.memberids.length",{"_index":325,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/RoomService.html":{}}}],["room.memberids.push(guestid",{"_index":747,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.memberids.push(joinerid",{"_index":690,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.memberids.splice(deletedmemberindex",{"_index":699,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.memberids.splice(room.memberids.indexof(leaverid",{"_index":715,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.memberids[0",{"_index":707,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.ownerid",{"_index":706,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.refusedids.push(guestid",{"_index":749,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.refusedids.push(leaverid",{"_index":700,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.refusedids.push(memberid",{"_index":721,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.refusedids.splice(room.waitingids.indexof(guestid",{"_index":740,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.refusedids.splice(room.waitingids.indexof(joinerid",{"_index":693,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.service",{"_index":576,"title":{},"body":{"modules/RoomModule.html":{}}}],["room.type",{"_index":657,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.waitingids.includes(guestid",{"_index":736,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.waitingids.indexof(guestid",{"_index":742,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.waitingids.push(guestid",{"_index":739,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.waitingids.splice(deletedwaitingindex",{"_index":744,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.waitingids.splice(room.waitingids.indexof(joinerid",{"_index":691,"title":{},"body":{"injectables/RoomService.html":{}}}],["room/dto",{"_index":297,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["room/room.module",{"_index":404,"title":{},"body":{"modules/CommunicationModule.html":{},"modules/UserModule.html":{}}}],["room/room.service",{"_index":301,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/UserService.html":{}}}],["roomevent",{"_index":292,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"miscellaneous/enumerations.html":{}}}],["roomevent.create",{"_index":350,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["roomevent.invite",{"_index":391,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["roomevent.join",{"_index":355,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["roomevent.kick",{"_index":369,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["roomevent.leave",{"_index":328,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{}}}],["roomevent.owner",{"_index":381,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["roomid",{"_index":388,"title":{},"body":{"classes/CommunicationGateway.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/RespondRoomInvitationDto.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/TransferOwnershipDto.html":{}}}],["roomids",{"_index":604,"title":{},"body":{"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["roomids.foreach((rid",{"_index":679,"title":{},"body":{"injectables/RoomService.html":{}}}],["roomids.length",{"_index":710,"title":{},"body":{"injectables/RoomService.html":{}}}],["roomjson",{"_index":673,"title":{},"body":{"injectables/RoomService.html":{}}}],["roommodule",{"_index":400,"title":{"modules/RoomModule.html":{}},"body":{"modules/CommunicationModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["rooms",{"_index":602,"title":{},"body":{"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["rooms.map((room",{"_index":714,"title":{},"body":{"injectables/RoomService.html":{}}}],["rooms.push(json.parse(val[1",{"_index":684,"title":{},"body":{"injectables/RoomService.html":{}}}],["roomservice",{"_index":211,"title":{"injectables/RoomService.html":{}},"body":{"classes/CommunicationGateway.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["rpc",{"_index":66,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["rxjs",{"_index":465,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"dependencies.html":{}}}],["same",{"_index":420,"title":{},"body":{"injectables/CommunicationService.html":{},"injectables/RoomService.html":{}}}],["satisfies",{"_index":431,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["second",{"_index":1000,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["seedfriendrelationship",{"_index":892,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seedfriendrelationship(client",{"_index":1011,"title":{},"body":{"miscellaneous/functions.html":{}}}],["seedstatus",{"_index":894,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seedstatus(client",{"_index":1012,"title":{},"body":{"miscellaneous/functions.html":{}}}],["seeduser",{"_index":896,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeduser(client",{"_index":1013,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":856,"title":{},"body":{"injectables/UserService.html":{}}}],["sell",{"_index":1111,"title":{},"body":{"license.html":{}}}],["send",{"_index":264,"title":{},"body":{"classes/CommunicationGateway.html":{},"index.html":{}}}],["send_group_message",{"_index":981,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["send_private_message",{"_index":979,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["senderid",{"_index":343,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/MessageService.html":{}}}],["sendgroupmessage",{"_index":980,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sendgroupmessagedto",{"_index":261,"title":{"classes/SendGroupMessageDto.html":{}},"body":{"classes/CommunicationGateway.html":{},"classes/SendGroupMessageDto.html":{},"coverage.html":{}}}],["sendprivatemessage",{"_index":205,"title":{},"body":{"classes/CommunicationGateway.html":{},"miscellaneous/enumerations.html":{}}}],["sendprivatemessage(client",{"_index":273,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["sendprivatemessagedto",{"_index":274,"title":{"classes/SendPrivateMessageDto.html":{}},"body":{"classes/CommunicationGateway.html":{},"injectables/MessageService.html":{},"classes/SendPrivateMessageDto.html":{},"coverage.html":{}}}],["sepecific",{"_index":432,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["server",{"_index":194,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"classes/RedisIoAdapter.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["server.adapter(this.adapterconstructor",{"_index":566,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["server.git",{"_index":1061,"title":{},"body":{"index.html":{}}}],["server.to(disconnectedid).disconnectsockets",{"_index":447,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["server.to(disconnectedid).emit(emitevent.error",{"_index":443,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["server.to(room.id).emit(emitevent.receiveroomchanges",{"_index":448,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["serveroptions",{"_index":550,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["service",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["service/auth.service",{"_index":124,"title":{},"body":{"guards/AuthGuard.html":{}}}],["set(`${cachenamespace.room}${id",{"_index":669,"title":{},"body":{"injectables/RoomService.html":{}}}],["set(`${cachenamespace.room}${room.id",{"_index":694,"title":{},"body":{"injectables/RoomService.html":{}}}],["set(`${cachenamespace.sid2uid}${socketid",{"_index":869,"title":{},"body":{"injectables/UserService.html":{}}}],["set(`${cachenamespace.uid2sid}${user.id",{"_index":870,"title":{},"body":{"injectables/UserService.html":{}}}],["setup",{"_index":1056,"title":{},"body":{"index.html":{}}}],["shall",{"_index":1120,"title":{},"body":{"license.html":{}}}],["sid",{"_index":871,"title":{},"body":{"injectables/UserService.html":{}}}],["sid2uid",{"_index":961,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sid_to_uid",{"_index":962,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sidkeys",{"_index":848,"title":{},"body":{"injectables/UserService.html":{}}}],["sids",{"_index":851,"title":{},"body":{"injectables/UserService.html":{}}}],["social",{"_index":1025,"title":{},"body":{"index.html":{}}}],["socket",{"_index":45,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{}}}],["socket.io",{"_index":46,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/RedisIoAdapter.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{},"dependencies.html":{},"index.html":{}}}],["socket.io/redis",{"_index":557,"title":{},"body":{"classes/RedisIoAdapter.html":{},"dependencies.html":{}}}],["socketid",{"_index":816,"title":{},"body":{"injectables/UserService.html":{}}}],["socketuseridbindinginterceptor",{"_index":295,"title":{"injectables/SocketUserIdBindingInterceptor.html":{}},"body":{"classes/CommunicationGateway.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"coverage.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.bookroom",{"_index":224,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.invitetoroom",{"_index":234,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.joinroom",{"_index":240,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.kickoutofroom",{"_index":245,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.leaveroom",{"_index":251,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.respondroominvitation",{"_index":256,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.sendgroupmessage",{"_index":262,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.sendprivatemessage",{"_index":275,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["socketuseridbindinginterceptor)@subscribemessage(listenevent.transerownership",{"_index":268,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["software",{"_index":1097,"title":{},"body":{"license.html":{}}}],["solve",{"_index":416,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["someone",{"_index":446,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["something",{"_index":763,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionFilter.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"modules/CommunicationModule.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{}}}],["src/.../app.config.ts",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.enum.ts",{"_index":950,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../cache.enum.ts",{"_index":951,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../core.config.ts",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../error.type.ts",{"_index":1158,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../event.enum.ts",{"_index":952,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../event.type.ts",{"_index":1157,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../firebase",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../log.decorator.ts",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1006,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../redis.config.ts",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../redis.decorator.ts",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../room.type.ts",{"_index":1164,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../time.enum.ts",{"_index":954,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.enum.ts",{"_index":948,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../validation.config.ts",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/adapter/redis.adapter.ts",{"_index":537,"title":{},"body":{"classes/RedisIoAdapter.html":{},"coverage.html":{}}}],["src/adapter/redis.adapter.ts:11",{"_index":544,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/adapter/redis.adapter.ts:13",{"_index":547,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/adapter/redis.adapter.ts:20",{"_index":551,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/adapter/redis.adapter.ts:9",{"_index":546,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["src/app.module.ts",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/decorator",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"classes/RedisIoAdapter.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["src/common/decorator/firebase",{"_index":898,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorator/log.decorator",{"_index":49,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["src/common/decorator/log.decorator.ts",{"_index":900,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorator/redis.decorator.ts",{"_index":901,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/filter",{"_index":294,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["src/common/filter/all",{"_index":6,"title":{},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filter/http",{"_index":470,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filter/ws",{"_index":876,"title":{},"body":{"classes/WsExceptionsFilter.html":{},"coverage.html":{}}}],["src/common/guard",{"_index":786,"title":{},"body":{"controllers/UserController.html":{}}}],["src/common/guard/auth.guard.ts",{"_index":111,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/common/guard/auth.guard.ts:5",{"_index":117,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/common/guard/auth.guard.ts:8",{"_index":120,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/common/interceptor",{"_index":296,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["src/common/interceptor/event",{"_index":453,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptor/socket",{"_index":757,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{},"coverage.html":{}}}],["src/common/pipe/parse",{"_index":513,"title":{},"body":{"injectables/ParseIdPipe.html":{},"coverage.html":{}}}],["src/common/service/auth.service",{"_index":405,"title":{},"body":{"modules/CommunicationModule.html":{},"injectables/CommunicationService.html":{},"modules/UserModule.html":{}}}],["src/common/service/auth.service.ts",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/common/service/auth.service.ts:13",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/service/auth.service.ts:24",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/service/auth.service.ts:44",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/service/prisma.service",{"_index":406,"title":{},"body":{"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/common/service/prisma.service.ts",{"_index":523,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/common/service/prisma.service.ts:10",{"_index":530,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/common/service/prisma.service.ts:6",{"_index":532,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/config",{"_index":48,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/RoomService.html":{}}}],["src/config/app.config.ts",{"_index":906,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/core.config.ts",{"_index":907,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/redis.config.ts",{"_index":908,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/validation.config.ts",{"_index":910,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/enum",{"_index":51,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{}}}],["src/enum/app.enum.ts",{"_index":957,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/enum/cache.enum.ts",{"_index":960,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/enum/event.enum.ts",{"_index":967,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/enum/time.enum.ts",{"_index":999,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/enum/user.enum.ts",{"_index":955,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/main.ts",{"_index":911,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/module/communication/communication.gateway.ts",{"_index":191,"title":{},"body":{"classes/CommunicationGateway.html":{},"coverage.html":{}}}],["src/module/communication/communication.gateway.ts:137",{"_index":276,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:171",{"_index":225,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:196",{"_index":241,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:221",{"_index":252,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:246",{"_index":246,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:279",{"_index":263,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:306",{"_index":269,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:334",{"_index":235,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:367",{"_index":257,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:52",{"_index":212,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:66",{"_index":215,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["src/module/communication/communication.gateway.ts:96",{"_index":229,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["src/module/communication/communication.module.ts",{"_index":401,"title":{},"body":{"modules/CommunicationModule.html":{}}}],["src/module/communication/communication.service.ts",{"_index":409,"title":{},"body":{"injectables/CommunicationService.html":{},"coverage.html":{}}}],["src/module/communication/communication.service.ts:12",{"_index":413,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["src/module/communication/communication.service.ts:24",{"_index":424,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["src/module/communication/communication.service.ts:38",{"_index":415,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["src/module/communication/communication.service.ts:72",{"_index":429,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["src/module/message/dto/send",{"_index":750,"title":{},"body":{"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"coverage.html":{}}}],["src/module/message/message.module.ts",{"_index":500,"title":{},"body":{"modules/MessageModule.html":{}}}],["src/module/message/message.service.ts",{"_index":503,"title":{},"body":{"injectables/MessageService.html":{},"coverage.html":{}}}],["src/module/message/message.service.ts:16",{"_index":508,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/module/message/message.service.ts:6",{"_index":505,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/module/room/dto/book",{"_index":181,"title":{},"body":{"classes/BookRoomDto.html":{},"coverage.html":{}}}],["src/module/room/dto/invite",{"_index":481,"title":{},"body":{"classes/InviteToRoomDto.html":{},"coverage.html":{}}}],["src/module/room/dto/join",{"_index":493,"title":{},"body":{"classes/JoinRoomDto.html":{},"coverage.html":{}}}],["src/module/room/dto/kick",{"_index":494,"title":{},"body":{"classes/KickOutOfRoomDto.html":{},"coverage.html":{}}}],["src/module/room/dto/leave",{"_index":496,"title":{},"body":{"classes/LeaveRoomDto.html":{},"coverage.html":{}}}],["src/module/room/dto/respond",{"_index":567,"title":{},"body":{"classes/RespondRoomInvitationDto.html":{},"coverage.html":{}}}],["src/module/room/dto/transer",{"_index":767,"title":{},"body":{"classes/TransferOwnershipDto.html":{},"coverage.html":{}}}],["src/module/room/room.module.ts",{"_index":575,"title":{},"body":{"modules/RoomModule.html":{}}}],["src/module/room/room.service.ts",{"_index":577,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{}}}],["src/module/room/room.service.ts:117",{"_index":614,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/module/room/room.service.ts:154",{"_index":626,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/module/room/room.service.ts:16",{"_index":653,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/module/room/room.service.ts:194",{"_index":632,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/module/room/room.service.ts:24",{"_index":612,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/module/room/room.service.ts:248",{"_index":617,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/module/room/room.service.ts:293",{"_index":647,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/module/room/room.service.ts:327",{"_index":606,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/module/room/room.service.ts:373",{"_index":638,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/module/room/room.service.ts:41",{"_index":585,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/module/room/room.service.ts:76",{"_index":599,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/module/room/room.service.ts:94",{"_index":601,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/module/room/room.type.ts",{"_index":1171,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/module/user/user.controller.ts",{"_index":774,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/module/user/user.controller.ts:18",{"_index":780,"title":{},"body":{"controllers/UserController.html":{}}}],["src/module/user/user.module.ts",{"_index":797,"title":{},"body":{"modules/UserModule.html":{}}}],["src/module/user/user.service",{"_index":760,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["src/module/user/user.service.ts",{"_index":799,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/module/user/user.service.ts:110",{"_index":838,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:12",{"_index":809,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:147",{"_index":831,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:175",{"_index":812,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:196",{"_index":817,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:225",{"_index":822,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:25",{"_index":827,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:39",{"_index":829,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:57",{"_index":834,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:69",{"_index":840,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:81",{"_index":842,"title":{},"body":{"injectables/UserService.html":{}}}],["src/module/user/user.service.ts:94",{"_index":836,"title":{},"body":{"injectables/UserService.html":{}}}],["src/type",{"_index":53,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/WsExceptionsFilter.html":{}}}],["src/type/error.type.ts",{"_index":1170,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/type/event.type.ts",{"_index":1168,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stack",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["started",{"_index":1015,"title":{"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":217,"title":{},"body":{"classes/CommunicationGateway.html":{},"index.html":{}}}],["statements",{"_index":884,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":316,"title":{},"body":{"classes/CommunicationGateway.html":{},"classes/HttpExceptionFilter.html":{},"injectables/UserService.html":{},"index.html":{}}}],["statuscode",{"_index":89,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["statusid",{"_index":860,"title":{},"body":{"injectables/UserService.html":{}}}],["stopatfirsterror",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store",{"_index":216,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/MessageService.html":{},"index.html":{}}}],["string",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommunicationService.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/RespondRoomInvitationDto.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string(date.now",{"_index":663,"title":{},"body":{"injectables/RoomService.html":{}}}],["string(headerauthorization).replace('bearer",{"_index":437,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["string(request.headers.authorization).replace('bearer",{"_index":128,"title":{},"body":{"guards/AuthGuard.html":{}}}],["stuserid",{"_index":814,"title":{},"body":{"injectables/UserService.html":{}}}],["subclient",{"_index":561,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["subject",{"_index":1116,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1109,"title":{},"body":{"license.html":{}}}],["subscribemessage",{"_index":284,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.bookroom",{"_index":345,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.invitetoroom",{"_index":383,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.joinroom",{"_index":352,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.kickoutofroom",{"_index":362,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.leaveroom",{"_index":357,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.respondroominvitation",{"_index":393,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.sendgroupmessage",{"_index":372,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.sendprivatemessage",{"_index":332,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["subscribemessage(listenevent.transerownership",{"_index":378,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["substantial",{"_index":1122,"title":{},"body":{"license.html":{}}}],["success",{"_index":968,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["successresponse",{"_index":1165,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["super.createioserver(port",{"_index":565,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["support",{"_index":1147,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":1018,"title":{},"body":{"index.html":{},"properties.html":{}}}],["svg",{"_index":1148,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":58,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["symbol",{"_index":1191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":1189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["target[propertykey",{"_index":1192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["technologies",{"_index":1038,"title":{},"body":{"index.html":{}}}],["template",{"_index":1017,"title":{},"body":{"index.html":{}}}],["things",{"_index":1020,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":533,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":534,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.adapterconstructor",{"_index":563,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["this.auth.verifyidtoken(token",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.getuser(token",{"_index":131,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/CommunicationService.html":{}}}],["this.connectionservice.validateconnection",{"_index":308,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.eventname",{"_index":467,"title":{},"body":{"injectables/EventNameBindingInterceptor.html":{}}}],["this.get(roomid",{"_index":687,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.getbyid(parseint(userid",{"_index":845,"title":{},"body":{"injectables/UserService.html":{}}}],["this.getfirebaseuserid(token",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getmany(roomids",{"_index":713,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.getsocketidbyuserid(user.id",{"_index":872,"title":{},"body":{"injectables/UserService.html":{}}}],["this.getsocketidsbyuserids",{"_index":865,"title":{},"body":{"injectables/UserService.html":{}}}],["this.handleconflict(server",{"_index":452,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["this.handlehttpexception(exception",{"_index":65,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["this.handlewsexception(exception",{"_index":62,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["this.ismemberofany(bookerid",{"_index":661,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.ismemberofany(guestid",{"_index":745,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.ismemberofany(joinerid",{"_index":685,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.leave(kickerid",{"_index":717,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.leavemany(guestid",{"_index":746,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.logger.error(exception",{"_index":67,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["this.messageservice.createprivatemessage(client.userid",{"_index":339,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.prismaservice.friendrelationship.findfirst",{"_index":867,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prismaservice.privatemessage.create",{"_index":510,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.prismaservice.user.findmany",{"_index":855,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prismaservice.user.findunique",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.prismaservice.user.update",{"_index":868,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redis",{"_index":667,"title":{},"body":{"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["this.redis.duplicate",{"_index":560,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["this.redis.get(`${cachenamespace.room}${roomid",{"_index":674,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.redis.get(`${cachenamespace.sid2uid}${socketid",{"_index":844,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redis.get(`${cachenamespace.uid2sid}${userid",{"_index":847,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redis.llen",{"_index":658,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.redis.lrange",{"_index":711,"title":{},"body":{"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["this.redis.mget(...sidkeys",{"_index":852,"title":{},"body":{"injectables/UserService.html":{}}}],["this.redis.pipeline",{"_index":678,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.redis.set",{"_index":726,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.roomservice.book(client.userid",{"_index":346,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.roomservice.get(payload.roomid",{"_index":373,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.roomservice.invite",{"_index":385,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.roomservice.join(client.userid",{"_index":353,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.roomservice.kick",{"_index":364,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.roomservice.leave(client.userid",{"_index":358,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.roomservice.leavemany(user.id",{"_index":873,"title":{},"body":{"injectables/UserService.html":{}}}],["this.roomservice.respondinvitation",{"_index":394,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.roomservice.transferownership",{"_index":379,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.server",{"_index":309,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.server.to(client.id).to(room.id).emit(emitevent.receiveroomchanges",{"_index":360,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.server.to(friendsids).emit(emitevent.updatefriendstatus",{"_index":315,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.server.to(guestsocketid).emit(emitevent.receiveroominvitation",{"_index":387,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.server.to(kickedmembersocketid).socketsleave(room.id",{"_index":370,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.server.to(payload.roomid).emit(emitevent.receivegroupmessage",{"_index":376,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.server.to(receiversid).emit(emitevent.receiveprivatemessage",{"_index":342,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.server.to(room.id).emit(emitevent.receiveroomchanges",{"_index":327,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.userservice.arefriends(client.userid",{"_index":333,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.userservice.connect(user",{"_index":310,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.userservice.disconnect",{"_index":442,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["this.userservice.disconnect(user",{"_index":323,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.userservice.getbysocketid(client.id",{"_index":321,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.userservice.getfriendlist(request.user.id",{"_index":791,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getidbysocketid(client.id",{"_index":762,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["this.userservice.getonlinefriendssocketids",{"_index":313,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.userservice.getsocketidbyuserid",{"_index":341,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["this.validateauthorization",{"_index":449,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["throw",{"_index":57,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/ParseIdPipe.html":{},"injectables/RoomService.html":{}}}],["time",{"_index":953,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["time.forever",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["to(kickedmembersocketid",{"_index":366,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["to(room.id",{"_index":367,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["token",{"_index":127,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CommunicationService.html":{}}}],["tools",{"_index":1037,"title":{},"body":{"index.html":{}}}],["tort",{"_index":1143,"title":{},"body":{"license.html":{}}}],["tp",{"_index":1082,"title":{},"body":{"index.html":{},"properties.html":{}}}],["tran",{"_index":1087,"title":{},"body":{"license.html":{}}}],["transerownership",{"_index":994,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transfer",{"_index":270,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/RoomService.html":{},"index.html":{}}}],["transfer_ownership",{"_index":995,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transferownership",{"_index":583,"title":{},"body":{"injectables/RoomService.html":{}}}],["transferownership(ownerid",{"_index":645,"title":{},"body":{"injectables/RoomService.html":{}}}],["transferownershipdto",{"_index":267,"title":{"classes/TransferOwnershipDto.html":{}},"body":{"classes/CommunicationGateway.html":{},"classes/TransferOwnershipDto.html":{},"coverage.html":{}}}],["transform",{"_index":515,"title":{},"body":{"injectables/ParseIdPipe.html":{}}}],["transform(value",{"_index":516,"title":{},"body":{"injectables/ParseIdPipe.html":{}}}],["transformer",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["transports",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transports.file",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":134,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/SocketUserIdBindingInterceptor.html":{}}}],["ttl",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["two",{"_index":813,"title":{},"body":{"injectables/UserService.html":{}}}],["type",{"_index":19,"title":{},"body":{"classes/AllExceptionFilter.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BookRoomDto.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/EventNameBindingInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"injectables/MessageService.html":{},"injectables/ParseIdPipe.html":{},"injectables/PrismaService.html":{},"classes/RedisIoAdapter.html":{},"classes/RespondRoomInvitationDto.html":{},"injectables/RoomService.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"classes/TransferOwnershipDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1155,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":682,"title":{},"body":{"injectables/RoomService.html":{}}}],["uid",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["uid2rids",{"_index":965,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uid2sid",{"_index":963,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uid_to_rids",{"_index":966,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uid_to_sid",{"_index":964,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unauthorizedexception",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["unbind",{"_index":823,"title":{},"body":{"injectables/UserService.html":{}}}],["under",{"_index":1078,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":79,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/CommunicationService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":1069,"title":{},"body":{"index.html":{}}}],["update",{"_index":652,"title":{},"body":{"injectables/RoomService.html":{}}}],["update_friend_status",{"_index":970,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["updated",{"_index":435,"title":{},"body":{"injectables/CommunicationService.html":{},"injectables/RoomService.html":{},"injectables/UserService.html":{}}}],["updatefriendstatus",{"_index":969,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["updatefriendstatusdata",{"_index":1166,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["url",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":440,"title":{},"body":{"injectables/CommunicationService.html":{},"license.html":{}}}],["usefilters",{"_index":277,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["usefilters(new",{"_index":303,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["useguards",{"_index":785,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(authguard",{"_index":789,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors",{"_index":278,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["useinterceptors(new",{"_index":222,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["usepipes",{"_index":279,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["usepipes(new",{"_index":304,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["user",{"_index":129,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/ParseIdPipe.html":{},"injectables/RoomService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["user's",{"_index":832,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":798,"title":{},"body":{"modules/UserModule.html":{}}}],["user.id",{"_index":314,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":787,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.statusid",{"_index":451,"title":{},"body":{"injectables/CommunicationService.html":{},"injectables/UserService.html":{}}}],["user/user.module",{"_index":403,"title":{},"body":{"modules/CommunicationModule.html":{}}}],["user/user.service",{"_index":298,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{}}}],["usercontroller",{"_index":772,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":761,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{},"injectables/UserService.html":{}}}],["userids",{"_index":843,"title":{},"body":{"injectables/UserService.html":{}}}],["userids.map((uid",{"_index":849,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":100,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":776,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["userservice",{"_index":207,"title":{"injectables/UserService.html":{}},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"injectables/SocketUserIdBindingInterceptor.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["val[1",{"_index":683,"title":{},"body":{"injectables/RoomService.html":{}}}],["validateauthorization",{"_index":411,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["validateauthorization(headerauthorization",{"_index":423,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["validateconnection",{"_index":412,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["validateconnection(server",{"_index":428,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["validationconfig",{"_index":289,"title":{},"body":{"classes/CommunicationGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationpipe",{"_index":280,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["validationpipe(validationconfig",{"_index":305,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["validator",{"_index":189,"title":{},"body":{"classes/BookRoomDto.html":{},"classes/InviteToRoomDto.html":{},"classes/JoinRoomDto.html":{},"classes/KickOutOfRoomDto.html":{},"classes/LeaveRoomDto.html":{},"classes/RespondRoomInvitationDto.html":{},"classes/SendGroupMessageDto.html":{},"classes/SendPrivateMessageDto.html":{},"classes/TransferOwnershipDto.html":{},"dependencies.html":{}}}],["value",{"_index":518,"title":{},"body":{"injectables/ParseIdPipe.html":{},"injectables/RoomService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":889,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1172,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":425,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["version",{"_index":1152,"title":{},"body":{"properties.html":{}}}],["void",{"_index":35,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/WsExceptionsFilter.html":{}}}],["waitingids",{"_index":665,"title":{},"body":{"injectables/RoomService.html":{}}}],["warn",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warranties",{"_index":1129,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1124,"title":{},"body":{"license.html":{}}}],["web",{"_index":1043,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":422,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["websocketgateway",{"_index":285,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["websocketserver",{"_index":213,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["went",{"_index":764,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["whether",{"_index":1141,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston",{"_index":54,"title":{},"body":{"classes/AllExceptionFilter.html":{},"dependencies.html":{}}}],["without",{"_index":597,"title":{},"body":{"injectables/RoomService.html":{},"license.html":{}}}],["wrong",{"_index":765,"title":{},"body":{"injectables/SocketUserIdBindingInterceptor.html":{}}}],["ws",{"_index":61,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["wserrorresponse",{"_index":1167,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["wsexception",{"_index":286,"title":{},"body":{"classes/CommunicationGateway.html":{},"injectables/CommunicationService.html":{},"classes/WsExceptionsFilter.html":{}}}],["wsexception('only",{"_index":335,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["wsexception('you",{"_index":375,"title":{},"body":{"classes/CommunicationGateway.html":{}}}],["wsexception('your",{"_index":439,"title":{},"body":{"injectables/CommunicationService.html":{}}}],["wsexceptionsfilter",{"_index":293,"title":{"classes/WsExceptionsFilter.html":{}},"body":{"classes/CommunicationGateway.html":{},"classes/WsExceptionsFilter.html":{},"coverage.html":{}}}],["yes",{"_index":553,"title":{},"body":{"classes/RedisIoAdapter.html":{}}}],["zoom",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/CommunicationModule.html":{},"modules/MessageModule.html":{},"modules/RoomModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionFilter.html":{"url":"classes/AllExceptionFilter.html","title":"class - AllExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filter/all-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                handleHttpException\n                            \n                            \n                                    Private\n                                handleWsException\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Logger\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Log()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/filter/all-exception.filter.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: LoggedError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filter/all-exception.filter.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                LoggedError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleHttpException\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleHttpException(exception: LoggedError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filter/all-exception.filter.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                LoggedError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleWsException\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleWsException(exception: LoggedError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filter/all-exception.filter.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                LoggedError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost } from '@nestjs/common';\nimport { FastifyReply, FastifyRequest } from 'fastify';\nimport { Socket } from 'socket.io';\nimport { AppConfig } from 'src/config';\nimport { Log } from 'src/common/decorator/log.decorator';\nimport { EmitEvent } from 'src/enum';\nimport { EmitEvents, LoggedError } from 'src/type';\nimport { Logger } from 'winston';\n\n@Catch()\nexport class AllExceptionFilter implements ExceptionFilter {\n  @Log()\n  private readonly logger: Logger;\n\n  catch(exception: LoggedError, host: ArgumentsHost) {\n    if (AppConfig.debug) {\n      throw exception;\n    }\n\n    switch (host.getType()) {\n      case 'ws':\n        this.handleWsException(exception, host);\n        break;\n\n      case 'http':\n        this.handleHttpException(exception, host);\n        break;\n\n      case 'rpc':\n        break;\n    }\n\n    this.logger.error(exception);\n  }\n\n  private handleWsException(exception: LoggedError, host: ArgumentsHost) {\n    const client = host.switchToWs().getClient() as Socket;\n\n    exception.hostType = 'ws';\n    exception.event = client.eventName;\n    exception.payload = host.switchToWs().getData();\n\n    client.emit(EmitEvent.Error, {\n      event: client.eventName,\n      message: 'Unknown error!',\n    });\n  }\n\n  private handleHttpException(exception: LoggedError, host: ArgumentsHost) {\n    const response = host.switchToHttp().getResponse();\n    const request = host.switchToHttp().getRequest();\n\n    exception.hostType = 'http';\n    exception.url = request.url;\n    exception.payload = request.body;\n\n    response.code(500).send({\n      statusCode: 500,\n      message: 'Unknown error!',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCommunicationModule\n\nCommunicationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommunicationModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CommunicationModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CommunicationModule } from './module/communication/communication.module';\nimport { UserModule } from './module/user/user.module';\n\n@Module({\n  imports: [CommunicationModule, UserModule],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guard/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/common/guard/auth.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guard/auth.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthService } from '../service/auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = String(request.headers.authorization).replace('Bearer ', '');\n    const user = await this.authService.getUser(token);\n\n    request.user = user;\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/service/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                auth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getFirebaseUserId\n                            \n                            \n                                    Async\n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/common/service/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getFirebaseUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFirebaseUserId(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/service/auth.service.ts:24\n                \n            \n\n\n            \n                \n                    Get uid generated by firebase authentication using\nID token provided by it.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/service/auth.service.ts:44\n                \n            \n\n\n            \n                \n                    Get a corresponding user on the entered token. Throw an error\nif authentication failed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID token provided by firebase authentication.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Auth\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @FirebaseAuth()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/service/auth.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Auth } from 'firebase-admin/auth';\nimport { FirebaseAuth } from 'src/common/decorator';\nimport { PrismaService } from './prisma.service';\n\n@Injectable()\nexport class AuthService {\n  @FirebaseAuth()\n  private readonly auth: Auth;\n\n  constructor(private prismaService: PrismaService) {}\n\n  /**\n   * Get uid generated by firebase authentication using\n   * ID token provided by it.\n   *\n   * @param token\n   * @returns\n   */\n  private async getFirebaseUserId(token: string) {\n    let fid: string;\n\n    try {\n      const decodedToken = await this.auth.verifyIdToken(token);\n      fid = decodedToken.uid;\n    } catch {\n      fid = '';\n    }\n\n    return fid;\n  }\n\n  /**\n   * Get a corresponding user on the entered token. Throw an error\n   * if authentication failed.\n   *\n   * @param token ID token provided by firebase authentication.\n   * @returns\n   */\n  async getUser(token: string) {\n    const fid = await this.getFirebaseUserId(token);\n\n    if (fid === '') {\n      throw new UnauthorizedException('Invalid access token!');\n    }\n\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        fid,\n      },\n    });\n\n    if (user == null) {\n      throw new InternalServerErrorException(\n        'Please connect again after a while!',\n      );\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BookRoomDto.html":{"url":"classes/BookRoomDto.html","title":"class - BookRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BookRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/book-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isPublic\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isPublic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/book-room.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsNotEmpty } from 'class-validator';\n\nexport class BookRoomDto {\n  @IsBoolean()\n  @IsNotEmpty()\n  isPublic: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommunicationGateway.html":{"url":"classes/CommunicationGateway.html","title":"class - CommunicationGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommunicationGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/communication/communication.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                    Async\n                                handleCreateRoom\n                            \n                            \n                                    Async\n                                handleDisconnect\n                            \n                            \n                                    Async\n                                handleInviteToRoom\n                            \n                            \n                                    Async\n                                handleJoinRoom\n                            \n                            \n                                    Async\n                                handleKickOutOfRoom\n                            \n                            \n                                    Async\n                                handleLeaveRoom\n                            \n                            \n                                    Async\n                                handleRespondInvitation\n                            \n                            \n                                    Async\n                                handleSendGroupMessage\n                            \n                            \n                                    Async\n                                handleTransferOwnership\n                            \n                            \n                                    Async\n                                sendPrivateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, connectionService: CommunicationService, messageService: MessageService, roomService: RoomService)\n                    \n                \n                        \n                            \n                                Defined in src/module/communication/communication.gateway.ts:52\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connectionService\n                                                  \n                                                        \n                                                                        CommunicationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messageService\n                                                  \n                                                        \n                                                                        MessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roomService\n                                                  \n                                                        \n                                                                        RoomService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/communication/communication.gateway.ts:52\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConnection(client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:66\n                \n            \n\n\n            \n                \n                    Store user state before connection.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleCreateRoom\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleCreateRoom(client: Socket, payload: BookRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.BookRoom)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:171\n                \n            \n\n\n            \n                \n                    Create a new room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                BookRoomDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleDisconnect(client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:96\n                \n            \n\n\n            \n                \n                    Remove user state after disconnection.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleInviteToRoom\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleInviteToRoom(client: Socket, payload: InviteToRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.InviteToRoom)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:334\n                \n            \n\n\n            \n                \n                    Invite a guest into room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                InviteToRoomDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleJoinRoom\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleJoinRoom(client: Socket, payload: JoinRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.JoinRoom)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:196\n                \n            \n\n\n            \n                \n                    Join to a new room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                JoinRoomDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleKickOutOfRoom\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleKickOutOfRoom(client: Socket, payload: KickOutOfRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.KickOutOfRoom)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:246\n                \n            \n\n\n            \n                \n                    Kick member out of room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                KickOutOfRoomDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleLeaveRoom\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleLeaveRoom(client: Socket, payload: LeaveRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.LeaveRoom)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:221\n                \n            \n\n\n            \n                \n                    Leave the room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                LeaveRoomDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleRespondInvitation\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRespondInvitation(client: Socket, payload: RespondRoomInvitationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.RespondRoomInvitation)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:367\n                \n            \n\n\n            \n                \n                    Respond to room invitation.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                RespondRoomInvitationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleSendGroupMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleSendGroupMessage(client: Socket, payload: SendGroupMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.SendGroupMessage)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:279\n                \n            \n\n\n            \n                \n                    Send group message.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                SendGroupMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleTransferOwnership\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleTransferOwnership(client: Socket, payload: TransferOwnershipDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.TranserOwnership)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:306\n                \n            \n\n\n            \n                \n                    Transfer ownership to another member in room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                TransferOwnershipDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendPrivateMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPrivateMessage(client: Socket, payload: SendPrivateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(new EventNameBindingInterceptor(), SocketUserIdBindingInterceptor)@SubscribeMessage(ListenEvent.SendPrivateMessage)\n                \n            \n\n            \n                \n                    Defined in src/module/communication/communication.gateway.ts:137\n                \n            \n\n\n            \n                \n                    Send private message.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                                \n                                    payload\n                                    \n                                                SendPrivateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  UseFilters,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport {\n  ConnectedSocket,\n  GatewayMetadata,\n  MessageBody,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n  WsException,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { CORSConfig, ValidationConfig } from 'src/config';\nimport { ActiveStatus, EmitEvent, ListenEvent, RoomEvent } from 'src/enum';\nimport { AllExceptionFilter, WsExceptionsFilter } from 'src/common/filter';\nimport {\n  EventNameBindingInterceptor,\n  SocketUserIdBindingInterceptor,\n} from 'src/common/interceptor';\nimport { EmitEvents } from 'src/type';\nimport {\n  BookRoomDto,\n  InviteToRoomDto,\n  JoinRoomDto,\n  KickOutOfRoomDto,\n  LeaveRoomDto,\n  RespondRoomInvitationDto,\n  TransferOwnershipDto,\n} from '../room/dto';\nimport { UserService } from '../user/user.service';\nimport { CommunicationService } from './communication.service';\nimport { MessageService } from '../message/message.service';\nimport { RoomService } from '../room/room.service';\nimport { SendGroupMessageDto, SendPrivateMessageDto } from '../message/dto';\n\n@UseFilters(new AllExceptionFilter(), new WsExceptionsFilter())\n@UsePipes(new ValidationPipe(ValidationConfig))\n@WebSocketGateway({\n  namespace: '/',\n  cors: CORSConfig,\n})\nexport class CommunicationGateway\n  implements OnGatewayConnection, OnGatewayDisconnect\n{\n  @WebSocketServer()\n  private readonly server: Server;\n\n  constructor(\n    private userService: UserService,\n    private connectionService: CommunicationService,\n    private messageService: MessageService,\n    private roomService: RoomService,\n  ) {}\n\n  /**\n   * Store user state before connection.\n   *\n   * @param client socket client.\n   */\n  async handleConnection(client: Socket) {\n    try {\n      const user = await this.connectionService.validateConnection(\n        this.server,\n        client,\n      );\n      await this.userService.connect(user, client.id);\n\n      const friendSIds = await this.userService.getOnlineFriendsSocketIds(\n        user.id,\n      );\n      this.server.to(friendSIds).emit(EmitEvent.UpdateFriendStatus, {\n        id: user.id,\n        status: ActiveStatus.Online,\n      });\n    } catch (error: any) {\n      client.emit(EmitEvent.Error, {\n        event: ListenEvent.Connect,\n        message: error.message,\n      });\n\n      client.disconnect();\n    }\n  }\n\n  /**\n   * Remove user state after disconnection.\n   *\n   * @param client socket client.\n   */\n  async handleDisconnect(client: Socket) {\n    try {\n      const user = await this.userService.getBySocketId(client.id);\n\n      if (user != null) {\n        const friendSIds = await this.userService.getOnlineFriendsSocketIds(\n          user.id,\n        );\n        const { leftRooms } = await this.userService.disconnect(user);\n\n        this.server.to(friendSIds).emit(EmitEvent.UpdateFriendStatus, {\n          id: user.id,\n          status: null,\n        });\n\n        leftRooms.forEach((room) => {\n          if (room.memberIds.length > 0) {\n            this.server.to(room.id).emit(EmitEvent.ReceiveRoomChanges, {\n              event: RoomEvent.Leave,\n              actorId: client.userId,\n              room,\n            });\n          }\n        });\n      }\n    } catch (error) {\n      //\n    }\n  }\n\n  /**\n   * Send private message.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.SendPrivateMessage),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.SendPrivateMessage)\n  async sendPrivateMessage(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: SendPrivateMessageDto,\n  ) {\n    if (\n      !(await this.userService.areFriends(client.userId, payload.receiverId))\n    ) {\n      throw new WsException('Only friends can send messages to each other!');\n    }\n\n    await this.messageService.createPrivateMessage(client.userId, payload);\n    const receiverSId = await this.userService.getSocketIdByUserId(\n      payload.receiverId,\n    );\n\n    if (receiverSId != null) {\n      this.server.to(receiverSId).emit(EmitEvent.ReceivePrivateMessage, {\n        ...payload,\n        senderId: client.userId,\n      });\n    }\n  }\n\n  /**\n   * Create a new room.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.BookRoom),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.BookRoom)\n  async handleCreateRoom(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: BookRoomDto,\n  ) {\n    const room = await this.roomService.book(client.userId, payload.isPublic);\n    client.join(room.id);\n\n    client.emit(EmitEvent.ReceiveRoomChanges, {\n      event: RoomEvent.Create,\n      actorId: client.userId,\n      room,\n    });\n  }\n\n  /**\n   * Join to a new room.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.JoinRoom),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.JoinRoom)\n  async handleJoinRoom(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: JoinRoomDto,\n  ) {\n    const room = await this.roomService.join(client.userId, payload.roomId);\n    client.join(room.id);\n\n    this.server.to(room.id).emit(EmitEvent.ReceiveRoomChanges, {\n      event: RoomEvent.Join,\n      actorId: client.userId,\n      room,\n    });\n  }\n\n  /**\n   * Leave the room.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.LeaveRoom),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.LeaveRoom)\n  async handleLeaveRoom(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: LeaveRoomDto,\n  ) {\n    const room = await this.roomService.leave(client.userId, payload.roomId);\n    client.leave(room.id);\n\n    this.server.to(client.id).to(room.id).emit(EmitEvent.ReceiveRoomChanges, {\n      event: RoomEvent.Leave,\n      actorId: client.userId,\n      room,\n    });\n  }\n\n  /**\n   * Kick member out of room.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.KickOutOfRoom),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.KickOutOfRoom)\n  async handleKickOutOfRoom(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: KickOutOfRoomDto,\n  ) {\n    const { room, kickedMemberSocketId } = await this.roomService.kick(\n      client.userId,\n      payload.memberId,\n      payload.roomId,\n    );\n\n    this.server\n      .to(kickedMemberSocketId)\n      .to(room.id)\n      .emit(EmitEvent.ReceiveRoomChanges, {\n        event: RoomEvent.Kick,\n        actorId: client.userId,\n        room,\n      });\n\n    this.server.to(kickedMemberSocketId).socketsLeave(room.id);\n  }\n\n  /**\n   * Send group message.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.SendGroupMessage),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.SendGroupMessage)\n  async handleSendGroupMessage(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: SendGroupMessageDto,\n  ) {\n    const room = await this.roomService.get(payload.roomId);\n\n    if (!room.memberIds.includes(client.userId)) {\n      throw new WsException('You are not in this room!');\n    }\n\n    this.server.to(payload.roomId).emit(EmitEvent.ReceiveGroupMessage, {\n      ...payload,\n      senderId: client.userId,\n    });\n  }\n\n  /**\n   * Transfer ownership to another member in room.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.TranserOwnership),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.TranserOwnership)\n  async handleTransferOwnership(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: TransferOwnershipDto,\n  ) {\n    const room = await this.roomService.transferOwnership(\n      client.userId,\n      payload.candidateId,\n      payload.roomId,\n    );\n\n    this.server.to(room.id).emit(EmitEvent.ReceiveRoomChanges, {\n      event: RoomEvent.Owner,\n      actorId: client.userId,\n      room,\n    });\n  }\n\n  /**\n   * Invite a guest into room.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.InviteToRoom),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.InviteToRoom)\n  async handleInviteToRoom(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: InviteToRoomDto,\n  ) {\n    const { room, guestSocketId } = await this.roomService.invite(\n      client.userId,\n      payload.guestId,\n      payload.roomId,\n    );\n\n    this.server.to(guestSocketId).emit(EmitEvent.ReceiveRoomInvitation, {\n      roomId: room.id,\n      inviterId: client.userId,\n    });\n\n    this.server.to(room.id).emit(EmitEvent.ReceiveRoomChanges, {\n      event: RoomEvent.Invite,\n      actorId: client.userId,\n      room,\n    });\n  }\n\n  /**\n   * Respond to room invitation.\n   *\n   * @param client socket client.\n   * @param payload\n   */\n  @UseInterceptors(\n    new EventNameBindingInterceptor(ListenEvent.RespondRoomInvitation),\n    SocketUserIdBindingInterceptor,\n  )\n  @SubscribeMessage(ListenEvent.RespondRoomInvitation)\n  async handleRespondInvitation(\n    @ConnectedSocket() client: Socket,\n    @MessageBody() payload: RespondRoomInvitationDto,\n  ) {\n    const { room, leftRooms } = await this.roomService.respondInvitation(\n      client.userId,\n      payload.isAccpeted,\n      payload.roomId,\n    );\n\n    if (payload.isAccpeted) {\n      client.join(room.id);\n\n      this.server.to(room.id).emit(EmitEvent.ReceiveRoomChanges, {\n        event: RoomEvent.Join,\n        actorId: client.userId,\n        room,\n      });\n\n      leftRooms.forEach((room) => {\n        if (room.memberIds.length > 0) {\n          this.server.to(room.id).emit(EmitEvent.ReceiveRoomChanges, {\n            event: RoomEvent.Leave,\n            actorId: client.userId,\n            room,\n          });\n        }\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommunicationModule.html":{"url":"modules/CommunicationModule.html","title":"module - CommunicationModule","body":"\n                   \n\n\n\n\n    Modules\n    CommunicationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CommunicationModule\n\n\n\ncluster_CommunicationModule_imports\n\n\n\ncluster_CommunicationModule_providers\n\n\n\n\nMessageModule\n\nMessageModule\n\n\n\nCommunicationModule\n\nCommunicationModule\n\nCommunicationModule -->\n\nMessageModule->CommunicationModule\n\n\n\n\n\nRoomModule\n\nRoomModule\n\nCommunicationModule -->\n\nRoomModule->CommunicationModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nCommunicationModule -->\n\nUserModule->CommunicationModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nCommunicationModule -->\n\nAuthService->CommunicationModule\n\n\n\n\n\nCommunicationService\n\nCommunicationService\n\nCommunicationModule -->\n\nCommunicationService->CommunicationModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nCommunicationModule -->\n\nPrismaService->CommunicationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/communication/communication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            CommunicationService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MessageModule\n                        \n                        \n                            RoomModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserModule } from '../user/user.module';\nimport { RoomModule } from '../room/room.module';\nimport { AuthService } from 'src/common/service/auth.service';\nimport { PrismaService } from 'src/common/service/prisma.service';\nimport { MessageModule } from '../message/message.module';\nimport { CommunicationService } from './communication.service';\nimport { CommunicationGateway } from './communication.gateway';\n\n@Module({\n  imports: [UserModule, RoomModule, MessageModule],\n  providers: [\n    CommunicationGateway,\n    CommunicationService,\n    AuthService,\n    PrismaService,\n  ],\n})\nexport class CommunicationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommunicationService.html":{"url":"injectables/CommunicationService.html","title":"injectable - CommunicationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommunicationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/communication/communication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                handleConflict\n                            \n                            \n                                    Private\n                                    Async\n                                validateAuthorization\n                            \n                            \n                                    Async\n                                validateConnection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/module/communication/communication.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        handleConflict\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConflict(server: Server, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/module/communication/communication.service.ts:38\n                \n            \n\n\n            \n                \n                    Solve conflict if multiple people connect to the\nsame account.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    server\n                                    \n                                                Server\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        websocket server.\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validateAuthorization\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateAuthorization(headerAuthorization: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/communication/communication.service.ts:24\n                \n            \n\n\n            \n                \n                    Verify token.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    headerAuthorization\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        user record.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateConnection(server: Server, client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/module/communication/communication.service.ts:72\n                \n            \n\n\n            \n                \n                    Check if the connection satisfies some sepecific conditions\nbefore allowing the connection.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    server\n                                    \n                                            Server\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        websocket server.\n\n                                    \n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        socket client.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        updated user.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { WsException } from '@nestjs/websockets';\nimport { User } from '@prisma/client';\nimport { Server, Socket } from 'socket.io';\nimport { AuthService } from 'src/common/service/auth.service';\nimport { AppConfig } from 'src/config';\nimport { EmitEvent, ListenEvent, RoomEvent } from 'src/enum';\nimport { EmitEvents } from 'src/type';\nimport { UserService } from '../user/user.service';\n\n@Injectable()\nexport class CommunicationService {\n  constructor(\n    private authService: AuthService,\n    private userService: UserService,\n  ) {}\n\n  /**\n   * Verify token.\n   *\n   * @param headerAuthorization\n   * @returns user record.\n   */\n  private async validateAuthorization(headerAuthorization: string) {\n    const token = String(headerAuthorization).replace('Bearer ', '');\n    const user = await this.authService.getUser(token);\n\n    return user;\n  }\n\n  /**\n   * Solve conflict if multiple people connect to the\n   * same account.\n   *\n   * @param server websocket server.\n   * @param user\n   */\n  private async handleConflict(server: Server, user: User) {\n    if (!AppConfig.disconnectIfConflict) {\n      throw new WsException('Your account is in use!');\n    }\n\n    const { disconnectedId, leftRooms } = await this.userService.disconnect(\n      user,\n    );\n\n    server.to(disconnectedId).emit(EmitEvent.Error, {\n      event: ListenEvent.Connect,\n      message: 'This account is being connected by someone else!',\n    });\n    server.to(disconnectedId).disconnectSockets();\n\n    leftRooms.forEach((room) => {\n      if (room.memberIds.length > 0) {\n        server.to(room.id).emit(EmitEvent.ReceiveRoomChanges, {\n          event: RoomEvent.Leave,\n          actorId: user.id,\n          room,\n        });\n      }\n    });\n  }\n\n  /**\n   * Check if the connection satisfies some sepecific conditions\n   * before allowing the connection.\n   *\n   * @param server websocket server.\n   * @param client socket client.\n   * @returns updated user.\n   */\n  async validateConnection(server: Server, client: Socket) {\n    const user = await this.validateAuthorization(\n      client.handshake.headers.authorization,\n    );\n\n    if (user.statusId != null) {\n      await this.handleConflict(server, user);\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventNameBindingInterceptor.html":{"url":"injectables/EventNameBindingInterceptor.html","title":"injectable - EventNameBindingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventNameBindingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptor/event-name-binding.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventName: ListenEvent)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptor/event-name-binding.interceptor.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventName\n                                                  \n                                                        \n                                                                        ListenEvent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        intercept\n                        \n                    \n                \n            \n            \n                \n                    \n                    intercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptor/event-name-binding.interceptor.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { Socket } from 'socket.io';\nimport { ListenEvent } from 'src/enum';\n\n@Injectable()\nexport class EventNameBindingInterceptor implements NestInterceptor {\n  constructor(private readonly eventName: ListenEvent) {}\n\n  async intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Promise> {\n    const client = context.switchToWs().getClient() as Socket;\n    client.eventName = this.eventName;\n\n    return next.handle();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filter/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filter/http-exception.filter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { FastifyReply } from 'fastify';\nimport { ErrorMessage } from 'src/type';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const response = host.switchToHttp().getResponse();\n    const status = exception.getStatus();\n    let message: ErrorMessage;\n\n    if (exception instanceof BadRequestException) {\n      message = (exception.getResponse() as Error).message;\n    } else {\n      message = exception.message;\n    }\n\n    response.code(status).send({\n      statusCode: status,\n      message,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InviteToRoomDto.html":{"url":"classes/InviteToRoomDto.html","title":"class - InviteToRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InviteToRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/invite-to-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                guestId\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        guestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/invite-to-room.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(13)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/invite-to-room.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString, Min, MinLength } from 'class-validator';\n\nexport class InviteToRoomDto {\n  @IsString()\n  @MinLength(13)\n  roomId: string;\n\n  @IsInt()\n  @Min(1)\n  guestId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JoinRoomDto.html":{"url":"classes/JoinRoomDto.html","title":"class - JoinRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JoinRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/join-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(13)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/join-room.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, MinLength } from 'class-validator';\n\nexport class JoinRoomDto {\n  @IsString()\n  @MinLength(13)\n  roomId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KickOutOfRoomDto.html":{"url":"classes/KickOutOfRoomDto.html","title":"class - KickOutOfRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KickOutOfRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/kick-out-of-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                memberId\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        memberId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/kick-out-of-room.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(13)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/kick-out-of-room.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString, Min, MinLength } from 'class-validator';\n\nexport class KickOutOfRoomDto {\n  @IsString()\n  @MinLength(13)\n  roomId: string;\n\n  @IsInt()\n  @Min(1)\n  memberId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeaveRoomDto.html":{"url":"classes/LeaveRoomDto.html","title":"class - LeaveRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeaveRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/leave-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(13)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/leave-room.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, MinLength } from 'class-validator';\n\nexport class LeaveRoomDto {\n  @IsString()\n  @MinLength(13)\n  roomId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessageModule.html":{"url":"modules/MessageModule.html","title":"module - MessageModule","body":"\n                   \n\n\n\n\n    Modules\n    MessageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_exports\n\n\n\ncluster_MessageModule_providers\n\n\n\n\nMessageService \n\nMessageService \n\n\n\nMessageModule\n\nMessageModule\n\nMessageService  -->\n\nMessageModule->MessageService \n\n\n\n\n\nMessageService\n\nMessageService\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nMessageModule -->\n\nPrismaService->MessageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/message/message.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessageService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MessageService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from 'src/common/service/prisma.service';\nimport { MessageService } from './message.service';\n\n@Module({\n  providers: [MessageService, PrismaService],\n  exports: [MessageService],\n})\nexport class MessageModule {\n  //\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessageService.html":{"url":"injectables/MessageService.html","title":"injectable - MessageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/message/message.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createPrivateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/module/message/message.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createPrivateMessage\n                        \n                    \n                \n            \n            \n                \ncreatePrivateMessage(senderId: number, privateMessageDto: SendPrivateMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/module/message/message.service.ts:16\n                \n            \n\n\n            \n                \n                    Store new private message.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    privateMessageDto\n                                    \n                                                SendPrivateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/common/service/prisma.service';\nimport { SendPrivateMessageDto } from './dto';\n\n@Injectable()\nexport class MessageService {\n  constructor(private prismaService: PrismaService) {}\n\n  /**\n   * Store new private message.\n   *\n   * @param senderId\n   * @param privateMessageDto\n   * @returns\n   */\n  createPrivateMessage(\n    senderId: number,\n    privateMessageDto: SendPrivateMessageDto,\n  ) {\n    return this.prismaService.privateMessage.create({\n      data: {\n        ...privateMessageDto,\n        senderId,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIdPipe.html":{"url":"injectables/ParseIdPipe.html","title":"injectable - ParseIdPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIdPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipe/parse-id.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipe/parse-id.pipe.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, BadRequestException } from '@nestjs/common';\n\n@Injectable()\nexport class ParseIdPipe implements PipeTransform {\n  transform(value: any) {\n    value = parseInt(value, 10);\n\n    if (value > 0) {\n      return value;\n    }\n\n    throw new BadRequestException('Invalid user id');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/service/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/common/service/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/common/service/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RedisIoAdapter.html":{"url":"classes/RedisIoAdapter.html","title":"class - RedisIoAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RedisIoAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/adapter/redis.adapter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    IoAdapter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                adapterConstructor\n                            \n                            \n                                    Private\n                                    Readonly\n                                redis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                connectToRedis\n                            \n                            \n                                createIOServer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        adapterConstructor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                    \n                        \n                                Defined in src/adapter/redis.adapter.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        redis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @RedisClient()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/adapter/redis.adapter.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        connectToRedis\n                        \n                    \n                \n            \n            \n                \n                    \n                    connectToRedis()\n                \n            \n\n\n            \n                \n                    Defined in src/adapter/redis.adapter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createIOServer\n                        \n                    \n                \n            \n            \n                \ncreateIOServer(port: number, options?: ServerOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/adapter/redis.adapter.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            ServerOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IoAdapter } from '@nestjs/platform-socket.io';\nimport Redis from 'ioredis';\nimport { ServerOptions } from 'socket.io';\nimport { createAdapter } from '@socket.io/redis-adapter';\nimport { RedisClient } from 'src/common/decorator';\n\nexport class RedisIoAdapter extends IoAdapter {\n  @RedisClient()\n  private readonly redis: Redis;\n\n  private adapterConstructor: ReturnType;\n\n  async connectToRedis(): Promise {\n    const pubClient = this.redis.duplicate();\n    const subClient = pubClient.duplicate();\n\n    this.adapterConstructor = createAdapter(pubClient, subClient);\n  }\n\n  createIOServer(port: number, options?: ServerOptions): any {\n    const server = super.createIOServer(port, options);\n    server.adapter(this.adapterConstructor);\n\n    return server;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RespondRoomInvitationDto.html":{"url":"classes/RespondRoomInvitationDto.html","title":"class - RespondRoomInvitationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RespondRoomInvitationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/respond-room-invitation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isAccpeted\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isAccpeted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/respond-room-invitation.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(13)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/respond-room-invitation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsString, MinLength } from 'class-validator';\n\nexport class RespondRoomInvitationDto {\n  @IsString()\n  @MinLength(13)\n  roomId: string;\n\n  @IsBoolean()\n  isAccpeted: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoomModule.html":{"url":"modules/RoomModule.html","title":"module - RoomModule","body":"\n                   \n\n\n\n\n    Modules\n    RoomModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RoomModule\n\n\n\ncluster_RoomModule_providers\n\n\n\ncluster_RoomModule_exports\n\n\n\n\nRoomService \n\nRoomService \n\n\n\nRoomModule\n\nRoomModule\n\nRoomService  -->\n\nRoomModule->RoomService \n\n\n\n\n\nRoomService\n\nRoomService\n\nRoomModule -->\n\nRoomService->RoomModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/room/room.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoomService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoomService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RoomService } from './room.service';\n\n@Module({\n  providers: [RoomService],\n  exports: [RoomService],\n})\nexport class RoomModule {\n  //\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoomService.html":{"url":"injectables/RoomService.html","title":"injectable - RoomService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoomService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/room.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                redis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                book\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                getMany\n                            \n                            \n                                    Async\n                                invite\n                            \n                            \n                                    Private\n                                    Async\n                                isMemberOfAny\n                            \n                            \n                                    Async\n                                join\n                            \n                            \n                                    Async\n                                kick\n                            \n                            \n                                    Async\n                                leave\n                            \n                            \n                                    Async\n                                leaveMany\n                            \n                            \n                                    Async\n                                respondInvitation\n                            \n                            \n                                    Async\n                                transferOwnership\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        book\n                        \n                    \n                \n            \n            \n                \n                    \n                    book(bookerId: number, isPublic)\n                \n            \n\n\n            \n                \n                    Defined in src/module/room/room.service.ts:41\n                \n            \n\n\n            \n                \n                    Create a room and add the booker to its member list.\nIf multi-room join is disabled, the booker must not\nenter any room before creating the room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    bookerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    isPublic\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        if true, anyone can join without invitation.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        updated room.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(roomId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/room/room.service.ts:76\n                \n            \n\n\n            \n                \n                    Get room by id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMany(roomIds: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/module/room/room.service.ts:94\n                \n            \n\n\n            \n                \n                    Get rooms by ids.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roomIds\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        invite\n                        \n                    \n                \n            \n            \n                \n                    \n                    invite(inviter: number, guestId: number, roomId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/room/room.service.ts:327\n                \n            \n\n\n            \n                \n                    Invite a guest into room. Only invite online user and\nnon-exist in room user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inviter\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    guestId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        updated room and guest socket ids.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        isMemberOfAny\n                        \n                    \n                \n            \n            \n                \n                    \n                    isMemberOfAny(memberId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/room/room.service.ts:24\n                \n            \n\n\n            \n                \n                    Check if user is in any room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    memberId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        join\n                        \n                    \n                \n            \n            \n                \n                    \n                    join(joinerId: number, roomId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/room/room.service.ts:117\n                \n            \n\n\n            \n                \n                    Add user to room. If multi-room join is disabled,\nthe booker must not enter any room before creating\nthe room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    joinerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        updated room.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        kick\n                        \n                    \n                \n            \n            \n                \n                    \n                    kick(kickerId: number, memberId: number, roomId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/room/room.service.ts:248\n                \n            \n\n\n            \n                \n                    Kick member out of room. Kicker must be the owner\nand member must be in the room, otherwise the action\nis declined.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    kickerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        updated room and socket id of kicked member.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        leave\n                        \n                    \n                \n            \n            \n                \n                    \n                    leave(leaverId: number, roomId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/room/room.service.ts:154\n                \n            \n\n\n            \n                \n                    Remove user from room. Transfer ownership for to a member\nin room if leaver is owner. Empty room will be deleted.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    leaverId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        updated room.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        leaveMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    leaveMany(leaverId: number, ...roomIds: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/module/room/room.service.ts:194\n                \n            \n\n\n            \n                \n                    Remove user from many rooms. Logic is the same\nas leave method.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    leaverId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    roomIds\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        empty if leaving all rooms.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        updated rooms.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        respondInvitation\n                        \n                    \n                \n            \n            \n                \n                    \n                    respondInvitation(guestId: number, isAccpeted: boolean, roomId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/room/room.service.ts:373\n                \n            \n\n\n            \n                \n                    Respond to room invitation. There are 2 options:\naccept and refuse. Leave the current room after\naccepting if multi-room join is disabled.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    guestId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isAccpeted\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        updated room and left rooms.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferOwnership\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferOwnership(ownerId: number, candidateId: number, roomId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/room/room.service.ts:293\n                \n            \n\n\n            \n                \n                    Transfer ownership to another member. Decline action\nif room is empty, actor is not owner, or choosed member\ndoes not exist in the room.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    candidateId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        update room.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        redis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @RedisClient()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/room.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport Redis from 'ioredis';\nimport { AppConfig } from 'src/config';\nimport { RedisClient } from 'src/common/decorator';\nimport { CacheNamespace } from 'src/enum';\nimport { Room } from './room.type';\n\n@Injectable()\nexport class RoomService {\n  @RedisClient()\n  private readonly redis: Redis;\n\n  /**\n   * Check if user is in any room.\n   *\n   * @param memberId\n   * @returns\n   */\n  private async isMemberOfAny(memberId: number) {\n    const roomIds = await this.redis.llen(\n      `${CacheNamespace.UId2RIds}${memberId}`,\n    );\n\n    return roomIds > 0;\n  }\n\n  /**\n   * Create a room and add the booker to its member list.\n   * If multi-room join is disabled, the booker must not\n   * enter any room before creating the room.\n   *\n   * @param bookerId\n   * @param isPublic if true, anyone can join without invitation.\n   * @returns updated room.\n   */\n  async book(bookerId: number, isPublic = false) {\n    if (\n      !AppConfig.allowJoinMultipleRooms &&\n      (await this.isMemberOfAny(bookerId))\n    ) {\n      throw new BadRequestException(\n        'Please leave current room before creating a new one',\n      );\n    }\n\n    const id = String(Date.now());\n    const room: Room = {\n      id,\n      isPublic,\n      ownerId: bookerId,\n      memberIds: [bookerId],\n      waitingIds: [],\n      refusedIds: [],\n    };\n\n    await this.redis\n      .pipeline()\n      .set(`${CacheNamespace.Room}${id}`, JSON.stringify(room))\n      .lpush(`${CacheNamespace.UId2RIds}${bookerId}`, room.id)\n      .exec();\n\n    return room;\n  }\n\n  /**\n   * Get room by id.\n   *\n   * @param roomId\n   * @returns\n   */\n  async get(roomId: string) {\n    const roomJSON = await this.redis.get(`${CacheNamespace.Room}${roomId}`);\n\n    if (roomJSON === null) {\n      throw new BadRequestException('Room does not exist!');\n    }\n\n    const room: Room = JSON.parse(roomJSON);\n\n    return room;\n  }\n\n  /**\n   * Get rooms by ids.\n   *\n   * @param roomIds\n   * @returns\n   */\n  async getMany(roomIds: string[]) {\n    const rooms: Room[] = [];\n    const redisPipe = this.redis.pipeline();\n    roomIds.forEach((rId) => redisPipe.get(`${CacheNamespace.Room}${rId}`));\n\n    (await redisPipe.exec()).forEach((val) => {\n      if (typeof val[1] === 'string') {\n        rooms.push(JSON.parse(val[1] as string));\n      }\n    });\n\n    return rooms;\n  }\n\n  /**\n   * Add user to room. If multi-room join is disabled,\n   * the booker must not enter any room before creating\n   * the room.\n   *\n   * @param joinerId\n   * @param roomId\n   * @returns updated room.\n   */\n  async join(joinerId: number, roomId: string) {\n    if (\n      !AppConfig.allowJoinMultipleRooms &&\n      (await this.isMemberOfAny(joinerId))\n    ) {\n      throw new BadRequestException(\n        'Please leave current room before joining another one!',\n      );\n    }\n\n    const room = await this.get(roomId);\n\n    if (!room.isPublic) {\n      throw new ForbiddenException('This room is private!');\n    }\n\n    room.memberIds.push(joinerId);\n    room.waitingIds.splice(room.waitingIds.indexOf(joinerId), 1);\n    room.refusedIds.splice(room.waitingIds.indexOf(joinerId), 1);\n\n    await this.redis\n      .pipeline()\n      .set(`${CacheNamespace.Room}${room.id}`, JSON.stringify(room))\n      .lpush(`${CacheNamespace.UId2RIds}${joinerId}`, room.id)\n      .exec();\n\n    return room;\n  }\n\n  /**\n   * Remove user from room. Transfer ownership for to a member\n   * in room if leaver is owner. Empty room will be deleted.\n   *\n   * @param leaverId\n   * @param roomId\n   * @returns updated room.\n   */\n  async leave(leaverId: number, roomId: string) {\n    const room = await this.get(roomId);\n    const deletedMemberIndex = room.memberIds.indexOf(leaverId);\n\n    if (deletedMemberIndex === -1) {\n      throw new ForbiddenException('You are not in this room!');\n    } else {\n      room.memberIds.splice(deletedMemberIndex, 1);\n      room.refusedIds.push(leaverId);\n    }\n\n    const redisPipe = this.redis.pipeline();\n\n    // Delete room if all members have left\n    if (room.memberIds.length === 0) {\n      redisPipe.del(`${CacheNamespace.Room}${room.id}`);\n    } else {\n      // Assign owner to the first member\n      if (leaverId === room.ownerId) {\n        room.ownerId = room.memberIds[0];\n      }\n\n      redisPipe.set(`${CacheNamespace.Room}${room.id}`, JSON.stringify(room));\n    }\n\n    await redisPipe\n      .lrem(`${CacheNamespace.UId2RIds}${leaverId}`, 1, room.id)\n      .exec();\n\n    return room;\n  }\n\n  /**\n   * Remove user from many rooms. Logic is the same\n   * as `leave` method.\n   *\n   * @param leaverId\n   * @param roomIds empty if leaving all rooms.\n   * @returns updated rooms.\n   */\n  async leaveMany(leaverId: number, ...roomIds: string[]) {\n    if (roomIds.length === 0) {\n      roomIds = await this.redis.lrange(\n        `${CacheNamespace.UId2RIds}${leaverId}`,\n        0,\n        -1,\n      );\n\n      if (roomIds.length === 0) {\n        return [];\n      }\n    }\n\n    const rooms = await this.getMany(roomIds);\n    const redisPipe = this.redis.pipeline();\n\n    rooms.map((room) => {\n      room.memberIds.splice(room.memberIds.indexOf(leaverId), 1);\n      room.refusedIds.push(leaverId);\n\n      // Delete room if all members have left\n      if (room.memberIds.length === 0) {\n        redisPipe.del(`${CacheNamespace.Room}${room.id}`);\n      } else {\n        // Assign owner to the first member\n        if (leaverId === room.ownerId) {\n          room.ownerId = room.memberIds[0];\n        }\n\n        redisPipe.set(`${CacheNamespace.Room}${room.id}`, JSON.stringify(room));\n      }\n\n      redisPipe\n        .lrem(`${CacheNamespace.UId2RIds}${leaverId}`, 1, room.id)\n        .exec();\n\n      return room;\n    });\n\n    await redisPipe.exec();\n\n    return rooms;\n  }\n\n  /**\n   * Kick member out of room. Kicker must be the owner\n   * and member must be in the room, otherwise the action\n   * is declined.\n   *\n   * @param kickerId\n   * @param memberId\n   * @param roomId\n   * @returns updated room and socket id of kicked member.\n   */\n  async kick(kickerId: number, memberId: number, roomId: string) {\n    if (kickerId === memberId) {\n      const room = await this.leave(kickerId, roomId);\n\n      return { room, kickedMemberSId: kickerId };\n    }\n\n    const room = await this.get(roomId);\n\n    if (room.ownerId !== kickerId) {\n      throw new ForbiddenException('You are not owner of this room!');\n    }\n\n    const deletedMemberIndex = room.memberIds.indexOf(memberId);\n\n    if (deletedMemberIndex === -1) {\n      throw new BadRequestException('Member is not in this room!');\n    }\n\n    room.memberIds.splice(deletedMemberIndex, 1);\n    room.refusedIds.push(memberId);\n\n    const [[, kickedMemberSId]] = await this.redis\n      .pipeline()\n      .get(`${CacheNamespace.UID2SId}${memberId}`)\n      .set(`${CacheNamespace.Room}${room.id}`, JSON.stringify(room))\n      .lrem(`${CacheNamespace.UId2RIds}${memberId}`, 1, room.id)\n      .exec();\n\n    return {\n      room,\n      kickedMemberSocketId: kickedMemberSId as string,\n    };\n  }\n\n  /**\n   * Transfer ownership to another member. Decline action\n   * if room is empty, actor is not owner, or choosed member\n   * does not exist in the room.\n   *\n   * @param ownerId\n   * @param candidateId\n   * @param roomId\n   * @returns update room.\n   */\n  async transferOwnership(\n    ownerId: number,\n    candidateId: number,\n    roomId: string,\n  ) {\n    const room = await this.get(roomId);\n\n    if (room.ownerId !== ownerId) {\n      throw new ForbiddenException('You are not owner of this room!');\n    }\n\n    if (ownerId === candidateId || !room.memberIds.includes(candidateId)) {\n      throw new BadRequestException('New owner must be a member in this room!');\n    }\n\n    room.ownerId = candidateId;\n\n    await this.redis.set(\n      `${CacheNamespace.Room}${room.id}`,\n      JSON.stringify(room),\n    );\n\n    return room;\n  }\n\n  /**\n   * Invite a guest into room. Only invite online user and\n   * non-exist in room user.\n   *\n   * @param inviter\n   * @param guestId\n   * @param roomId\n   * @returns updated room and guest socket ids.\n   */\n  async invite(inviter: number, guestId: number, roomId: string) {\n    const [[, roomJSON], [, guestSId]] = (await this.redis\n      .pipeline()\n      .get(`${CacheNamespace.Room}${roomId}`)\n      .get(`${CacheNamespace.UID2SId}${guestId}`)\n      .exec()) as [error: any, result: string | string[]][];\n\n    if (roomJSON == null) {\n      throw new NotFoundException('Room does not exist!');\n    }\n\n    const room: Room = JSON.parse(roomJSON as string);\n\n    if (guestSId == null) {\n      throw new BadRequestException('Please only invite online user!');\n    }\n\n    if (!room.memberIds.includes(inviter)) {\n      throw new ForbiddenException('You are not in this room!');\n    }\n\n    if (room.memberIds.includes(guestId) || room.waitingIds.includes(guestId)) {\n      throw new BadRequestException('This user has been invited!');\n    }\n\n    room.waitingIds.push(guestId);\n    room.refusedIds.splice(room.waitingIds.indexOf(guestId), 1);\n\n    await this.redis.set(\n      `${CacheNamespace.Room}${room.id}`,\n      JSON.stringify(room),\n    );\n\n    return { room, guestSocketId: guestSId };\n  }\n\n  /**\n   * Respond to room invitation. There are 2 options:\n   * accept and refuse. Leave the current room after\n   * accepting if multi-room join is disabled.\n   *\n   * @param guestId\n   * @param isAccpeted\n   * @param roomId\n   * @returns updated room and left rooms.\n   */\n  async respondInvitation(\n    guestId: number,\n    isAccpeted: boolean,\n    roomId: string,\n  ) {\n    let leftRooms: Room[] = [];\n    const room = await this.get(roomId);\n    const deletedWaitingIndex = room.waitingIds.indexOf(guestId);\n\n    if (deletedWaitingIndex === -1) {\n      throw new BadRequestException('You are not invited to this room!');\n    }\n\n    const redisPipe = this.redis.pipeline();\n\n    room.waitingIds.splice(deletedWaitingIndex, 1);\n\n    if (isAccpeted) {\n      // Leave all current rooms if multi-room join is disabled\n      if (\n        !AppConfig.allowJoinMultipleRooms &&\n        (await this.isMemberOfAny(guestId))\n      ) {\n        leftRooms = await this.leaveMany(guestId);\n      }\n\n      room.memberIds.push(guestId);\n      redisPipe.lpush(`${CacheNamespace.UId2RIds}${guestId}`, room.id);\n    } else {\n      room.refusedIds.push(guestId);\n    }\n\n    await redisPipe\n      .set(`${CacheNamespace.Room}${room.id}`, JSON.stringify(room))\n      .exec();\n\n    return { room, leftRooms };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendGroupMessageDto.html":{"url":"classes/SendGroupMessageDto.html","title":"class - SendGroupMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendGroupMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/message/dto/send-group-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/message/dto/send-group-message.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(13)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/message/dto/send-group-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class SendGroupMessageDto {\n  @IsString()\n  @MinLength(13)\n  roomId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendPrivateMessageDto.html":{"url":"classes/SendPrivateMessageDto.html","title":"class - SendPrivateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendPrivateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/message/dto/send-private-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                receiverId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/message/dto/send-private-message.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receiverId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/message/dto/send-private-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsNotEmpty, IsString, Min } from 'class-validator';\n\nexport class SendPrivateMessageDto {\n  @IsInt()\n  @Min(1)\n  receiverId: number;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SocketUserIdBindingInterceptor.html":{"url":"injectables/SocketUserIdBindingInterceptor.html","title":"injectable - SocketUserIdBindingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SocketUserIdBindingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptor/socket-user-id-binding.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptor/socket-user-id-binding.interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        intercept\n                        \n                    \n                \n            \n            \n                \n                    \n                    intercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptor/socket-user-id-binding.interceptor.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { Socket } from 'socket.io';\nimport { EmitEvent } from 'src/enum';\nimport { UserService } from 'src/module/user/user.service';\nimport { EmitEvents } from 'src/type';\n\n@Injectable()\nexport class SocketUserIdBindingInterceptor implements NestInterceptor {\n  constructor(private userService: UserService) {}\n\n  async intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Promise> {\n    const client = context.switchToWs().getClient() as Socket;\n    const userId = await this.userService.getIdBySocketId(client.id);\n\n    if (userId > 0) {\n      client.userId = userId;\n\n      return next.handle();\n    }\n\n    client.emit(EmitEvent.Error, {\n      event: client.eventName,\n      message: 'Something went wrong. Please try to login again!',\n    });\n\n    client.disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TransferOwnershipDto.html":{"url":"classes/TransferOwnershipDto.html","title":"class - TransferOwnershipDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TransferOwnershipDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/room/dto/transer-ownership.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                candidateId\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        candidateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/transer-ownership.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(13)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/room/dto/transer-ownership.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString, Min, MinLength } from 'class-validator';\n\nexport class TransferOwnershipDto {\n  @IsString()\n  @MinLength(13)\n  roomId: string;\n\n  @IsInt()\n  @Min(1)\n  candidateId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getFriendList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFriendList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFriendList(request: FastifyRequest, response: FastifyReply)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('friends')\n                \n            \n\n            \n                \n                    Defined in src/module/user/user.controller.ts:18\n                \n            \n\n\n            \n                \n                    Get friend list of logged in user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            FastifyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            FastifyReply\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, Res, UseGuards } from '@nestjs/common';\nimport { FastifyReply, FastifyRequest } from 'fastify';\nimport { AuthGuard } from 'src/common/guard';\nimport { UserService } from './user.service';\n\n@Controller('users')\n@UseGuards(AuthGuard)\nexport class UserController {\n  constructor(private userService: UserService) {}\n\n  /**\n   * Get friend list of logged in user.\n   *\n   * @param request\n   * @param response\n   */\n  @Get('friends')\n  async getFriendList(\n    @Req() request: FastifyRequest,\n    @Res() response: FastifyReply,\n  ) {\n    const friendList = await this.userService.getFriendList(request.user.id);\n\n    response.code(200).send({\n      data: friendList,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nRoomModule\n\nRoomModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nRoomModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RoomModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from 'src/common/service/auth.service';\nimport { PrismaService } from 'src/common/service/prisma.service';\nimport { RoomModule } from '../room/room.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [RoomModule],\n  controllers: [UserController],\n  providers: [UserService, PrismaService, AuthService],\n  exports: [UserService],\n})\nexport class UserModule {\n  //\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                redis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                areFriends\n                            \n                            \n                                    Async\n                                connect\n                            \n                            \n                                    Async\n                                disconnect\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getBySocketId\n                            \n                            \n                                    Async\n                                getFriendList\n                            \n                            \n                                    Async\n                                getIdBySocketId\n                            \n                            \n                                    Async\n                                getJoinedRoomIds\n                            \n                            \n                                    Async\n                                getOnlineFriendsSocketIds\n                            \n                            \n                                    Async\n                                getSocketIdByUserId\n                            \n                            \n                                    Async\n                                getSocketIdsByUserIds\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, roomService: RoomService)\n                    \n                \n                        \n                            \n                                Defined in src/module/user/user.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roomService\n                                                  \n                                                        \n                                                                        RoomService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        areFriends\n                        \n                    \n                \n            \n            \n                \n                    \n                    areFriends(stUserId: number, ndUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:175\n                \n            \n\n\n            \n                \n                    Check if two users are friends.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ndUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        connect\n                        \n                    \n                \n            \n            \n                \n                    \n                    connect(user: User, socketId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:196\n                \n            \n\n\n            \n                \n                    Change the user status to online and then\nbind socket id to user id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    socketId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        conntected socket id.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        updated user.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    disconnect(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:225\n                \n            \n\n\n            \n                \n                    Unbind socket id from user id after that change\nthe user status to offline and leave all joined\nrooms.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        updated user and left rooms.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:25\n                \n            \n\n\n            \n                \n                    Get user by id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getBySocketId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBySocketId(socketId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:39\n                \n            \n\n\n            \n                \n                    Get user by socket id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socketId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFriendList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFriendList(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:147\n                \n            \n\n\n            \n                \n                    Get user's friend list.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getIdBySocketId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getIdBySocketId(socketId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:57\n                \n            \n\n\n            \n                \n                    Get user id by socket id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socketId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getJoinedRoomIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getJoinedRoomIds(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:94\n                \n            \n\n\n            \n                \n                    Get user's joined room id list.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnlineFriendsSocketIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnlineFriendsSocketIds(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:110\n                \n            \n\n\n            \n                \n                    Get socket id list of the user's online friends.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSocketIdByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSocketIdByUserId(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:69\n                \n            \n\n\n            \n                \n                    Get socket id by user id.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSocketIdsByUserIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSocketIdsByUserIds(userIds: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:81\n                \n            \n\n\n            \n                \n                    Get socket ids by user ids.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIds\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        redis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Redis\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @RedisClient()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/user.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { User } from '@prisma/client';\nimport Redis from 'ioredis';\nimport { RedisClient } from 'src/common/decorator';\nimport { PrismaService } from 'src/common/service/prisma.service';\nimport { ActiveStatus, CacheNamespace } from 'src/enum';\nimport { RoomService } from '../room/room.service';\n\n@Injectable()\nexport class UserService {\n  @RedisClient()\n  private readonly redis: Redis;\n\n  constructor(\n    private prismaService: PrismaService,\n    private roomService: RoomService,\n  ) {}\n\n  /**\n   * Get user by id.\n   *\n   * @param userId\n   * @returns\n   */\n  async getById(userId: number) {\n    const user = await this.prismaService.user.findUnique({\n      where: { id: userId },\n    });\n\n    return user;\n  }\n\n  /**\n   * Get user by socket id.\n   *\n   * @param socketId\n   * @returns\n   */\n  async getBySocketId(socketId: string) {\n    const userId = await this.redis.get(`${CacheNamespace.SId2UId}${socketId}`);\n\n    if (userId == null) {\n      return null;\n    }\n\n    const user = await this.getById(parseInt(userId, 10));\n\n    return user;\n  }\n\n  /**\n   * Get user id by socket id.\n   *\n   * @param socketId\n   * @returns\n   */\n  async getIdBySocketId(socketId: string) {\n    const userId = await this.redis.get(`${CacheNamespace.SId2UId}${socketId}`);\n\n    return parseInt(userId, 10);\n  }\n\n  /**\n   * Get socket id by user id.\n   *\n   * @param userId\n   * @returns\n   */\n  async getSocketIdByUserId(userId: number) {\n    const socketId = await this.redis.get(`${CacheNamespace.UID2SId}${userId}`);\n\n    return socketId;\n  }\n\n  /**\n   * Get socket ids by user ids.\n   *\n   * @param userIds\n   * @returns\n   */\n  async getSocketIdsByUserIds(userIds: number[]) {\n    const sIdKeys = userIds.map((uid) => `${CacheNamespace.UID2SId}${uid}`);\n    const sIds = await this.redis.mget(...sIdKeys);\n\n    return sIds;\n  }\n\n  /**\n   * Get user's joined room id list.\n   *\n   * @param userId\n   * @returns\n   */\n  async getJoinedRoomIds(userId: number) {\n    const roomIds = await this.redis.lrange(\n      `${CacheNamespace.UId2RIds}${userId}`,\n      0,\n      -1,\n    );\n\n    return roomIds;\n  }\n\n  /**\n   * Get socket id list of the user's online friends.\n   *\n   * @param userId\n   * @returns\n   */\n  async getOnlineFriendsSocketIds(userId: number) {\n    const onlineFriends = await this.prismaService.user.findMany({\n      select: {\n        id: true,\n      },\n      where: {\n        OR: {\n          acceptedFriends: {\n            every: {\n              inviterId: userId,\n            },\n          },\n          invitedFriends: {\n            every: {\n              acceptorId: userId,\n            },\n          },\n        },\n        NOT: {\n          statusId: null,\n        },\n      },\n    });\n    const onlineFriendsIds = onlineFriends.map((friend) => friend.id);\n    const onlineFriendsSIds = await this.getSocketIdsByUserIds(\n      onlineFriendsIds,\n    );\n\n    return onlineFriendsSIds;\n  }\n\n  /**\n   * Get user's friend list.\n   *\n   * @param userId\n   * @returns\n   */\n  async getFriendList(userId: number) {\n    const friendList = await this.prismaService.user.findMany({\n      where: {\n        OR: {\n          acceptedFriends: {\n            every: {\n              inviterId: userId,\n            },\n          },\n          invitedFriends: {\n            every: {\n              acceptorId: userId,\n            },\n          },\n        },\n      },\n    });\n\n    return friendList;\n  }\n\n  /**\n   * Check if two users are friends.\n   *\n   * @param stUserId\n   * @param ndUserId\n   * @returns\n   */\n  async areFriends(stUserId: number, ndUserId: number) {\n    const relationship = await this.prismaService.friendRelationship.findFirst({\n      where: {\n        OR: [\n          { inviterId: stUserId, acceptorId: ndUserId },\n          { inviterId: ndUserId, acceptorId: stUserId },\n        ],\n      },\n    });\n\n    return relationship != null;\n  }\n\n  /**\n   * Change the user status to online and then\n   * bind socket id to user id.\n   *\n   * @param user\n   * @param socketId conntected socket id.\n   * @returns updated user.\n   */\n  async connect(user: User, socketId: string) {\n    user.statusId = ActiveStatus.Online;\n\n    await this.prismaService.user.update({\n      data: {\n        statusId: user.statusId,\n      },\n      where: {\n        id: user.id,\n      },\n    });\n\n    await this.redis\n      .pipeline()\n      .set(`${CacheNamespace.SId2UId}${socketId}`, user.id)\n      .set(`${CacheNamespace.UID2SId}${user.id}`, socketId)\n      .exec();\n\n    return user;\n  }\n\n  /**\n   * Unbind socket id from user id after that change\n   * the user status to offline and leave all joined\n   * rooms.\n   *\n   * @param user\n   * @return updated user and left rooms.\n   */\n  async disconnect(user: User) {\n    const sId = await this.getSocketIdByUserId(user.id);\n    const leftRooms = await this.roomService.leaveMany(user.id);\n\n    user.statusId = null;\n\n    await this.redis\n      .pipeline()\n      .del(`${CacheNamespace.SId2UId}${sId}`)\n      .del(`${CacheNamespace.UID2SId}${user.id}`)\n      .exec();\n\n    await this.prismaService.user.update({\n      data: {\n        statusId: user.statusId,\n      },\n      where: {\n        id: user.id,\n      },\n    });\n\n    return { user, leftRooms, disconnectedId: sId };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WsExceptionsFilter.html":{"url":"classes/WsExceptionsFilter.html","title":"class - WsExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WsExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filter/ws-exceptions.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseWsExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filter/ws-exceptions.filter.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ArgumentsHost,\n  BadRequestException,\n  HttpException,\n} from '@nestjs/common';\nimport { BaseWsExceptionFilter, WsException } from '@nestjs/websockets';\nimport { Socket } from 'socket.io';\nimport { EmitEvent } from 'src/enum';\nimport { EmitEvents, ErrorMessage } from 'src/type';\n\n@Catch(WsException, HttpException)\nexport class WsExceptionsFilter extends BaseWsExceptionFilter {\n  catch(exception: Error, host: ArgumentsHost) {\n    const client = host.switchToWs().getClient() as Socket;\n    let message: ErrorMessage;\n\n    if (exception instanceof BadRequestException) {\n      message = (exception.getResponse() as Error).message;\n    } else {\n      message = exception.message;\n    }\n\n    client.emit(EmitEvent.Error, {\n      event: client.eventName,\n      message: message,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/seeders/database.seeder.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seeders/database.seeder.ts\n            \n            variable\n            client\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seeders/friend-relationship.seeder.ts\n            \n            function\n            seedFriendRelationship\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seeders/status.seeder.ts\n            \n            function\n            seedStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seeders/user.seeder.ts\n            \n            function\n            seedUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/adapter/redis.adapter.ts\n            \n            class\n            RedisIoAdapter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/decorator/firebase-auth.decorator.ts\n            \n            variable\n            FirebaseAuth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/log.decorator.ts\n            \n            variable\n            Log\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/log.decorator.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/redis.decorator.ts\n            \n            variable\n            client\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorator/redis.decorator.ts\n            \n            variable\n            RedisClient\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/filter/all-exception.filter.ts\n            \n            class\n            AllExceptionFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/filter/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/filter/ws-exceptions.filter.ts\n            \n            class\n            WsExceptionsFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/guard/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptor/event-name-binding.interceptor.ts\n            \n            injectable\n            EventNameBindingInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptor/socket-user-id-binding.interceptor.ts\n            \n            injectable\n            SocketUserIdBindingInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pipe/parse-id.pipe.ts\n            \n            injectable\n            ParseIdPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/service/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/common/service/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/app.config.ts\n            \n            variable\n            AppConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/core.config.ts\n            \n            variable\n            CORSConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/redis.config.ts\n            \n            variable\n            RedisConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/validation.config.ts\n            \n            variable\n            ValidationConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/communication/communication.gateway.ts\n            \n            class\n            CommunicationGateway\n            \n                78 %\n                (11/14)\n            \n        \n        \n            \n                \n                src/module/communication/communication.service.ts\n            \n            injectable\n            CommunicationService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/module/message/dto/send-group-message.dto.ts\n            \n            class\n            SendGroupMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/message/dto/send-private-message.dto.ts\n            \n            class\n            SendPrivateMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/message/message.service.ts\n            \n            injectable\n            MessageService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/module/room/dto/book-room.dto.ts\n            \n            class\n            BookRoomDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/room/dto/invite-to-room.dto.ts\n            \n            class\n            InviteToRoomDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/room/dto/join-room.dto.ts\n            \n            class\n            JoinRoomDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/room/dto/kick-out-of-room.dto.ts\n            \n            class\n            KickOutOfRoomDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/room/dto/leave-room.dto.ts\n            \n            class\n            LeaveRoomDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/room/dto/respond-room-invitation.dto.ts\n            \n            class\n            RespondRoomInvitationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/room/dto/transer-ownership.dto.ts\n            \n            class\n            TransferOwnershipDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/room/room.service.ts\n            \n            injectable\n            RoomService\n            \n                84 %\n                (11/13)\n            \n        \n        \n            \n                \n                src/module/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/module/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                78 %\n                (11/14)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/platform-fastify : ^9.0.11\n        \n            @nestjs/platform-socket.io : ^9.0.11\n        \n            @nestjs/websockets : ^9.0.11\n        \n            @prisma/client : ^4.3.1\n        \n            @socket.io/redis-adapter : ^7.2.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            fastify : ^4.5.3\n        \n            firebase-admin : ^11.0.1\n        \n            ioredis : ^5.2.3\n        \n            prisma : ^4.3.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            socket.io : ^4.5.2\n        \n            winston : ^3.8.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveStatus   (src/.../user.enum.ts)\n                        \n                        \n                            AppEnv   (src/.../app.enum.ts)\n                        \n                        \n                            CacheNamespace   (src/.../cache.enum.ts)\n                        \n                        \n                            EmitEvent   (src/.../event.enum.ts)\n                        \n                        \n                            ListenEvent   (src/.../event.enum.ts)\n                        \n                        \n                            RoomEvent   (src/.../event.enum.ts)\n                        \n                        \n                            Time   (src/.../time.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/enum/user.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ActiveStatus\n                    \n                \n                        \n                            \n                                 Online\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 Busy\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n            \n        \n\n    src/enum/app.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AppEnv\n                    \n                \n                        \n                            \n                                 Development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 Production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n            \n        \n\n    src/enum/cache.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CacheNamespace\n                    \n                \n                        \n                            \n                                 SId2UId\n                            \n                        \n                        \n                            \n                                Value : sid_to_uid:\n                            \n                        \n                        \n                            \n                                 UID2SId\n                            \n                        \n                        \n                            \n                                Value : uid_to_sid:\n                            \n                        \n                        \n                            \n                                 UId2RIds\n                            \n                        \n                        \n                            \n                                Value : uid_to_rids:\n                            \n                        \n                        \n                            \n                                 Room\n                            \n                        \n                        \n                            \n                                Value : room:\n                            \n                        \n            \n        \n\n    src/enum/event.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EmitEvent\n                    \n                \n                        \n                            \n                                 Error\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n                        \n                            \n                                 Success\n                            \n                        \n                        \n                            \n                                Value : success\n                            \n                        \n                        \n                            \n                                 UpdateFriendStatus\n                            \n                        \n                        \n                            \n                                Value : update_friend_status\n                            \n                        \n                        \n                            \n                                 ReceivePrivateMessage\n                            \n                        \n                        \n                            \n                                Value : receive_private_message\n                            \n                        \n                        \n                            \n                                 ReceiveGroupMessage\n                            \n                        \n                        \n                            \n                                Value : receive_group_message\n                            \n                        \n                        \n                            \n                                 ReceiveRoomInvitation\n                            \n                        \n                        \n                            \n                                Value : receive_room_invitation\n                            \n                        \n                        \n                            \n                                 ReceiveRoomChanges\n                            \n                        \n                        \n                            \n                                Value : receive_room_changes\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ListenEvent\n                    \n                \n                        \n                            \n                                 Connect\n                            \n                        \n                        \n                            \n                                Value : connect\n                            \n                        \n                        \n                            \n                                 SendPrivateMessage\n                            \n                        \n                        \n                            \n                                Value : send_private_message\n                            \n                        \n                        \n                            \n                                 SendGroupMessage\n                            \n                        \n                        \n                            \n                                Value : send_group_message\n                            \n                        \n                        \n                            \n                                 BookRoom\n                            \n                        \n                        \n                            \n                                Value : book_room\n                            \n                        \n                        \n                            \n                                 JoinRoom\n                            \n                        \n                        \n                            \n                                Value : join_room\n                            \n                        \n                        \n                            \n                                 LeaveRoom\n                            \n                        \n                        \n                            \n                                Value : leave_room\n                            \n                        \n                        \n                            \n                                 InviteToRoom\n                            \n                        \n                        \n                            \n                                Value : invite_to_room\n                            \n                        \n                        \n                            \n                                 RespondRoomInvitation\n                            \n                        \n                        \n                            \n                                Value : respond_room_invitation\n                            \n                        \n                        \n                            \n                                 KickOutOfRoom\n                            \n                        \n                        \n                            \n                                Value : kick_out_of_room\n                            \n                        \n                        \n                            \n                                 TranserOwnership\n                            \n                        \n                        \n                            \n                                Value : transfer_ownership\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RoomEvent\n                    \n                \n                        \n                            \n                                 Create\n                            \n                        \n                        \n                            \n                                 Kick\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 Leave\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 Join\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n                        \n                            \n                                 Owner\n                            \n                        \n                        \n                            \n                                Value : 4\n                            \n                        \n                        \n                            \n                                 Invite\n                            \n                        \n                        \n                            \n                                Value : 5\n                            \n                        \n            \n        \n\n    src/enum/time.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Time\n                    \n                \n                        \n                            \n                                 Second\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 Miniute\n                            \n                        \n                        \n                            \n                                 Hour\n                            \n                        \n                        \n                            \n                                 Day\n                            \n                        \n                        \n                            \n                                 Forever\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            main   (prisma/.../database.seeder.ts)\n                        \n                        \n                            seedFriendRelationship   (prisma/.../friend-relationship.seeder.ts)\n                        \n                        \n                            seedStatus   (prisma/.../status.seeder.ts)\n                        \n                        \n                            seedUser   (prisma/.../user.seeder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    prisma/seeders/database.seeder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n    prisma/seeders/friend-relationship.seeder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        seedFriendRelationship\n                        \n                    \n                \n            \n            \n                \nseedFriendRelationship(client: PrismaClient)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            PrismaClient\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    prisma/seeders/status.seeder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        seedStatus\n                        \n                    \n                \n            \n            \n                \nseedStatus(client: PrismaClient)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            PrismaClient\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    prisma/seeders/user.seeder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        seedUser\n                        \n                    \n                \n            \n            \n                \nseedUser(client: PrismaClient)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            PrismaClient\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nOverview\nA template supports the most basic things for user - user, and user - group communicate in game client. The differences of this template from normal social platform chat mechanism are that room state will be reset if all the users connected to it have left and group messages are not archived anywhere.\nFeatures\n\n Firebase Authentication\n User\n Send private message\n Notify friends status\n Friend relationship\n Get friend list\n Add friend\n Remove friend\n\n\n\n\n Room\n Create room\n Join room (Multi-room join mode)\n Leave room\n Kick out of room\n Transfer ownership\n Invite to room\n Respond to room invitation\n Notify room chages\n Send group message (Don't store into database)\n\n\n\nTools And Technologies\n\nNestJS\nSocket.IO\nPrisma\nRESTful API\nNGINX Web Server\nRedis\nRedis Commander\nPostgreSQL\nAdminer\nFirebase Authentication\nDocker\nDocker Compose\n\nDetails\nArchitecture\n\nDatabase Design\n\nDocumentaions\nRESTful API here.\nEvent-Driven API here.\nApplication here.\nSetup\n$ git clone git@github.com:TP-OG/communication-server.git\n\n$ cd communication-server\n\n$ cp .env.example .envThen fill in the .env file.\nDevelopment\n$ docker-compose up\n\n$ docker-compose exec app npx prisma migrate devDemo\n$ docker-compose -f docker-compose.demo.yml up\n\n$ docker-compose exec app npx prisma migrate deployLicense\n\nThis project is distributed under the MIT License.\n\nCopyright of @TP-O, 2022.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Le Tran Phong\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommunicationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoomModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_CommunicationModule\n\n\n\ncluster_CommunicationModule_imports\n\n\n\ncluster_CommunicationModule_providers\n\n\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_exports\n\n\n\ncluster_MessageModule_providers\n\n\n\ncluster_RoomModule\n\n\n\ncluster_RoomModule_exports\n\n\n\ncluster_RoomModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nCommunicationModule\n\nCommunicationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCommunicationModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nCommunicationModule -->\n\nUserModule->CommunicationModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nMessageModule\n\nMessageModule\n\nCommunicationModule -->\n\nMessageModule->CommunicationModule\n\n\n\n\n\nMessageService \n\nMessageService \n\nMessageService  -->\n\nMessageModule->MessageService \n\n\n\n\n\nRoomModule\n\nRoomModule\n\nCommunicationModule -->\n\nRoomModule->CommunicationModule\n\n\n\nUserModule -->\n\nRoomModule->UserModule\n\n\n\n\n\nRoomService \n\nRoomService \n\nRoomService  -->\n\nRoomModule->RoomService \n\n\n\n\n\nAuthService\n\nAuthService\n\nCommunicationModule -->\n\nAuthService->CommunicationModule\n\n\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nCommunicationService\n\nCommunicationService\n\nCommunicationModule -->\n\nCommunicationService->CommunicationModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nCommunicationModule -->\n\nPrismaService->CommunicationModule\n\n\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\nMessageModule -->\n\nPrismaService->MessageModule\n\n\n\n\n\nMessageService\n\nMessageService\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nRoomModule -->\n\nRoomService->RoomModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : Server supports communication in game\n        \n            Author : TP-O\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EmitEvents   (src/.../event.type.ts)\n                        \n                        \n                            ErrorMessage   (src/.../error.type.ts)\n                        \n                        \n                            HttpErrorResponse   (src/.../error.type.ts)\n                        \n                        \n                            LoggedError   (src/.../error.type.ts)\n                        \n                        \n                            ReceiveGroupMessageData   (src/.../event.type.ts)\n                        \n                        \n                            ReceivePrivateMessageData   (src/.../event.type.ts)\n                        \n                        \n                            ReceiveRoomChangesData   (src/.../event.type.ts)\n                        \n                        \n                            ReceiveRoomInvitationData   (src/.../event.type.ts)\n                        \n                        \n                            Room   (src/.../room.type.ts)\n                        \n                        \n                            SuccessResponse   (src/.../event.type.ts)\n                        \n                        \n                            UpdateFriendStatusData   (src/.../event.type.ts)\n                        \n                        \n                            WsErrorResponse   (src/.../error.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/type/event.type.ts\n    \n    \n        \n            \n                \n                    \n                    EmitEvents\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReceiveGroupMessageData\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReceivePrivateMessageData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReceiveRoomChangesData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReceiveRoomInvitationData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SuccessResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UpdateFriendStatusData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/type/error.type.ts\n    \n    \n        \n            \n                \n                    \n                    ErrorMessage\n                \n            \n            \n                \n                        string | string[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HttpErrorResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LoggedError\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WsErrorResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/module/room/room.type.ts\n    \n    \n        \n            \n                \n                    \n                    Room\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppConfig   (src/.../app.config.ts)\n                        \n                        \n                            client   (prisma/.../database.seeder.ts)\n                        \n                        \n                            client   (src/.../redis.decorator.ts)\n                        \n                        \n                            CORSConfig   (src/.../core.config.ts)\n                        \n                        \n                            FirebaseAuth   (src/.../firebase-auth.decorator.ts)\n                        \n                        \n                            Log   (src/.../log.decorator.ts)\n                        \n                        \n                            logger   (src/.../log.decorator.ts)\n                        \n                        \n                            RedisClient   (src/.../redis.decorator.ts)\n                        \n                        \n                            RedisConfig   (src/.../redis.config.ts)\n                        \n                        \n                            ValidationConfig   (src/.../validation.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.freeze(\n  (() => {\n    const parsedPort = parseInt(env.APP_PORT, 10);\n\n    return {\n      env: Object.values(AppEnv).includes(env.APP_ENV as AppEnv)\n        ? env.APP_ENV\n        : AppEnv.Development,\n      debug: env.APP_DEBUG === 'true',\n      port: parsedPort >= 0 && parsedPort \n                    \n                \n\n\n        \n    \n\n    prisma/seeders/database.seeder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n\n    src/common/decorator/redis.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Redis(RedisConfig)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RedisClient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => (target: unknown, propertyKey: string | symbol) => {\n    target[propertyKey] = client;\n  }\n                    \n                \n\n\n        \n    \n\n    src/config/core.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CORSConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CorsOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  origin: '*',\n  methods: ['GET', 'POST'],\n  credentials: true,\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorator/firebase-auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FirebaseAuth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => (target: unknown, propertyKey: string | symbol) => {\n    target[propertyKey] = getAuth(getApp());\n  }\n                    \n                \n\n\n        \n    \n\n    src/common/decorator/log.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Log\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => (target: unknown, propertyKey: string | symbol) => {\n  target[propertyKey] = logger;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLogger({\n  level: 'debug',\n  format: format.combine(\n    format.errors({ stack: true }),\n    format.timestamp(),\n    format.prettyPrint(),\n  ),\n  defaultMeta: { service: 'Communication Server' },\n  transports: [\n    new transports.File({\n      filename: 'log/error.log',\n      level: 'error',\n    }),\n    new transports.File({\n      filename: 'log/warn.log',\n      level: 'warn',\n    }),\n    new transports.File({\n      filename: 'log/info.log',\n      level: 'info',\n    }),\n  ],\n})\n                    \n                \n\n\n        \n    \n\n    src/config/redis.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RedisConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.freeze({\n  host: env.REDIS_HOST || 'redis',\n  port: parseInt(env.REDIS_PORT, 10) || 6379,\n  url: `redis://${env.REDIS_HOST || 'redis'}:${\n    parseInt(env.REDIS_PORT, 10) || 6379\n  }`,\n  password: env.REDIS_PASSWORD || '',\n  ttl: Time.Forever,\n})\n                    \n                \n\n\n        \n    \n\n    src/config/validation.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ValidationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.freeze({\n    whitelist: true,\n    stopAtFirstError: false,\n    enableDebugMessages: AppConfig.debug,\n  })\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
